
2025_STM32F407_Battery_Challenge_Henriquez.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb80  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800bd08  0800bd08  0000cd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf08  0800bf08  0000d07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bf08  0800bf08  0000cf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf10  0800bf10  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf10  0800bf10  0000cf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf14  0800bf14  0000cf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800bf18  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00000e0c  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e88  20000e88  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bab2  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000439f  00000000  00000000  00028b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  0002cf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012e6  00000000  00000000  0002e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265ed  00000000  00000000  0002fa5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f95d  00000000  00000000  0005604b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1421  00000000  00000000  000759a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156dc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f58  00000000  00000000  00156e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0015dd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bcf0 	.word	0x0800bcf0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800bcf0 	.word	0x0800bcf0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b988 	b.w	8000e2c <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	468e      	mov	lr, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	4688      	mov	r8, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d962      	bls.n	8000c10 <__udivmoddi4+0xdc>
 8000b4a:	fab2 f682 	clz	r6, r2
 8000b4e:	b14e      	cbz	r6, 8000b64 <__udivmoddi4+0x30>
 8000b50:	f1c6 0320 	rsb	r3, r6, #32
 8000b54:	fa01 f806 	lsl.w	r8, r1, r6
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	40b7      	lsls	r7, r6
 8000b5e:	ea43 0808 	orr.w	r8, r3, r8
 8000b62:	40b4      	lsls	r4, r6
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	fa1f fc87 	uxth.w	ip, r7
 8000b6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b70:	0c23      	lsrs	r3, r4, #16
 8000b72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b88:	f080 80ea 	bcs.w	8000d60 <__udivmoddi4+0x22c>
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f240 80e7 	bls.w	8000d60 <__udivmoddi4+0x22c>
 8000b92:	3902      	subs	r1, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	1a9a      	subs	r2, r3, r2
 8000b98:	b2a3      	uxth	r3, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000baa:	459c      	cmp	ip, r3
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x8e>
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb4:	f080 80d6 	bcs.w	8000d64 <__udivmoddi4+0x230>
 8000bb8:	459c      	cmp	ip, r3
 8000bba:	f240 80d3 	bls.w	8000d64 <__udivmoddi4+0x230>
 8000bbe:	443b      	add	r3, r7
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc6:	eba3 030c 	sub.w	r3, r3, ip
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40f3      	lsrs	r3, r6
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xb6>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb0>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x14c>
 8000bf2:	4573      	cmp	r3, lr
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xc8>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 8105 	bhi.w	8000e06 <__udivmoddi4+0x2d2>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4690      	mov	r8, r2
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0e5      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c0e:	e7e2      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f000 8090 	beq.w	8000d36 <__udivmoddi4+0x202>
 8000c16:	fab2 f682 	clz	r6, r2
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f040 80a4 	bne.w	8000d68 <__udivmoddi4+0x234>
 8000c20:	1a8a      	subs	r2, r1, r2
 8000c22:	0c03      	lsrs	r3, r0, #16
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	b2bc      	uxth	r4, r7
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x11e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x11c>
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	f200 80e0 	bhi.w	8000e10 <__udivmoddi4+0x2dc>
 8000c50:	46c4      	mov	ip, r8
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c60:	fb02 f404 	mul.w	r4, r2, r4
 8000c64:	429c      	cmp	r4, r3
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x144>
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x142>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f200 80ca 	bhi.w	8000e0a <__udivmoddi4+0x2d6>
 8000c76:	4602      	mov	r2, r0
 8000c78:	1b1b      	subs	r3, r3, r4
 8000c7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c90:	fa20 f306 	lsr.w	r3, r0, r6
 8000c94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	fa1f fc87 	uxth.w	ip, r7
 8000ca6:	fbbe f0f9 	udiv	r0, lr, r9
 8000caa:	0c1c      	lsrs	r4, r3, #16
 8000cac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x1a0>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cc6:	f080 809c 	bcs.w	8000e02 <__udivmoddi4+0x2ce>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8099 	bls.w	8000e02 <__udivmoddi4+0x2ce>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	eba4 040e 	sub.w	r4, r4, lr
 8000cd8:	fa1f fe83 	uxth.w	lr, r3
 8000cdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1ce>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cf6:	f080 8082 	bcs.w	8000dfe <__udivmoddi4+0x2ca>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d97f      	bls.n	8000dfe <__udivmoddi4+0x2ca>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d0e:	4564      	cmp	r4, ip
 8000d10:	4673      	mov	r3, lr
 8000d12:	46e1      	mov	r9, ip
 8000d14:	d362      	bcc.n	8000ddc <__udivmoddi4+0x2a8>
 8000d16:	d05f      	beq.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x1fe>
 8000d1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	fa22 f301 	lsr.w	r3, r2, r1
 8000d2a:	431e      	orrs	r6, r3
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d32:	2100      	movs	r1, #0
 8000d34:	e74f      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000d36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d3a:	0c01      	lsrs	r1, r0, #16
 8000d3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d40:	b280      	uxth	r0, r0
 8000d42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d46:	463b      	mov	r3, r7
 8000d48:	4638      	mov	r0, r7
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	46b8      	mov	r8, r7
 8000d4e:	46be      	mov	lr, r7
 8000d50:	2620      	movs	r6, #32
 8000d52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d56:	eba2 0208 	sub.w	r2, r2, r8
 8000d5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d5e:	e766      	b.n	8000c2e <__udivmoddi4+0xfa>
 8000d60:	4601      	mov	r1, r0
 8000d62:	e718      	b.n	8000b96 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e72c      	b.n	8000bc2 <__udivmoddi4+0x8e>
 8000d68:	f1c6 0220 	rsb	r2, r6, #32
 8000d6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d70:	40b7      	lsls	r7, r6
 8000d72:	40b1      	lsls	r1, r6
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d88:	0c11      	lsrs	r1, r2, #16
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb08 f904 	mul.w	r9, r8, r4
 8000d92:	40b0      	lsls	r0, r6
 8000d94:	4589      	cmp	r9, r1
 8000d96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d9a:	b280      	uxth	r0, r0
 8000d9c:	d93e      	bls.n	8000e1c <__udivmoddi4+0x2e8>
 8000d9e:	1879      	adds	r1, r7, r1
 8000da0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000da4:	d201      	bcs.n	8000daa <__udivmoddi4+0x276>
 8000da6:	4589      	cmp	r9, r1
 8000da8:	d81f      	bhi.n	8000dea <__udivmoddi4+0x2b6>
 8000daa:	eba1 0109 	sub.w	r1, r1, r9
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fb09 f804 	mul.w	r8, r9, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc0:	4542      	cmp	r2, r8
 8000dc2:	d229      	bcs.n	8000e18 <__udivmoddi4+0x2e4>
 8000dc4:	18ba      	adds	r2, r7, r2
 8000dc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dca:	d2c4      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dcc:	4542      	cmp	r2, r8
 8000dce:	d2c2      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000dd4:	443a      	add	r2, r7
 8000dd6:	e7be      	b.n	8000d56 <__udivmoddi4+0x222>
 8000dd8:	45f0      	cmp	r8, lr
 8000dda:	d29d      	bcs.n	8000d18 <__udivmoddi4+0x1e4>
 8000ddc:	ebbe 0302 	subs.w	r3, lr, r2
 8000de0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000de4:	3801      	subs	r0, #1
 8000de6:	46e1      	mov	r9, ip
 8000de8:	e796      	b.n	8000d18 <__udivmoddi4+0x1e4>
 8000dea:	eba7 0909 	sub.w	r9, r7, r9
 8000dee:	4449      	add	r1, r9
 8000df0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000df4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df8:	fb09 f804 	mul.w	r8, r9, r4
 8000dfc:	e7db      	b.n	8000db6 <__udivmoddi4+0x282>
 8000dfe:	4673      	mov	r3, lr
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1ce>
 8000e02:	4650      	mov	r0, sl
 8000e04:	e766      	b.n	8000cd4 <__udivmoddi4+0x1a0>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e6fd      	b.n	8000c06 <__udivmoddi4+0xd2>
 8000e0a:	443b      	add	r3, r7
 8000e0c:	3a02      	subs	r2, #2
 8000e0e:	e733      	b.n	8000c78 <__udivmoddi4+0x144>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	443b      	add	r3, r7
 8000e16:	e71c      	b.n	8000c52 <__udivmoddi4+0x11e>
 8000e18:	4649      	mov	r1, r9
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x222>
 8000e1c:	eba1 0109 	sub.w	r1, r1, r9
 8000e20:	46c4      	mov	ip, r8
 8000e22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e26:	fb09 f804 	mul.w	r8, r9, r4
 8000e2a:	e7c4      	b.n	8000db6 <__udivmoddi4+0x282>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max){
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
	return (x-in_min)*(out_max-out_min+1)/(in_max-in_min+1) + out_min;
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	69b9      	ldr	r1, [r7, #24]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	fb03 f202 	mul.w	r2, r3, r2
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1acb      	subs	r3, r1, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	4413      	add	r3, r2
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	0000      	movs	r0, r0
	...

08000e70 <get_SineVal>:

void get_SineVal(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	for(int i=0; i < NUM_POINTS; i++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	e07b      	b.n	8000f74 <get_SineVal+0x104>
		gSine_Values[i] = (sin(i*2*PI/NUM_POINTS)+1)*(4096/V_REF);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff faf3 	bl	800046c <__aeabi_i2d>
 8000e86:	a342      	add	r3, pc, #264	@ (adr r3, 8000f90 <get_SineVal+0x120>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fb58 	bl	8000540 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f98 <get_SineVal+0x128>)
 8000e9e:	f7ff fc79 	bl	8000794 <__aeabi_ddiv>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	ec43 2b17 	vmov	d7, r2, r3
 8000eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8000eae:	eef0 0a67 	vmov.f32	s1, s15
 8000eb2:	f009 fef9 	bl	800aca8 <sin>
 8000eb6:	ec51 0b10 	vmov	r0, r1, d0
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <get_SineVal+0x12c>)
 8000ec0:	f7ff f988 	bl	80001d4 <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	a32e      	add	r3, pc, #184	@ (adr r3, 8000f88 <get_SineVal+0x118>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb35 	bl	8000540 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fdf1 	bl	8000ac4 <__aeabi_d2uiz>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	492e      	ldr	r1, [pc, #184]	@ (8000fa0 <get_SineVal+0x130>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		gSine_Values2[i] = (sin(i*2*PI*1.2/NUM_POINTS)+1)*(4096/V_REF);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fabb 	bl	800046c <__aeabi_i2d>
 8000ef6:	a326      	add	r3, pc, #152	@ (adr r3, 8000f90 <get_SineVal+0x120>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff fb20 	bl	8000540 <__aeabi_dmul>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000f0c:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <get_SineVal+0x134>)
 8000f0e:	f7ff fb17 	bl	8000540 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <get_SineVal+0x128>)
 8000f20:	f7ff fc38 	bl	8000794 <__aeabi_ddiv>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	ec43 2b17 	vmov	d7, r2, r3
 8000f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f30:	eef0 0a67 	vmov.f32	s1, s15
 8000f34:	f009 feb8 	bl	800aca8 <sin>
 8000f38:	ec51 0b10 	vmov	r0, r1, d0
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <get_SineVal+0x12c>)
 8000f42:	f7ff f947 	bl	80001d4 <__adddf3>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8000f88 <get_SineVal+0x118>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff faf4 	bl	8000540 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fdb0 	bl	8000ac4 <__aeabi_d2uiz>
 8000f64:	4602      	mov	r2, r0
 8000f66:	4910      	ldr	r1, [pc, #64]	@ (8000fa8 <get_SineVal+0x138>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i < NUM_POINTS; i++){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b63      	cmp	r3, #99	@ 0x63
 8000f78:	dd80      	ble.n	8000e7c <get_SineVal+0xc>
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	f3af 8000 	nop.w
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	40955400 	.word	0x40955400
 8000f90:	53c8d4f1 	.word	0x53c8d4f1
 8000f94:	400921fb 	.word	0x400921fb
 8000f98:	40590000 	.word	0x40590000
 8000f9c:	3ff00000 	.word	0x3ff00000
 8000fa0:	20000248 	.word	0x20000248
 8000fa4:	3ff33333 	.word	0x3ff33333
 8000fa8:	200003d8 	.word	0x200003d8

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb0:	f000 fe30 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb4:	f000 f846 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb8:	f000 f9fa 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fbc:	f000 f9d8 	bl	8001370 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fc0:	f000 f926 	bl	8001210 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fc4:	f000 f952 	bl	800126c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000fc8:	f009 fa16 	bl	800a3f8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000fcc:	f000 f8a4 	bl	8001118 <MX_ADC1_Init>
  MX_DAC_Init();
 8000fd0:	f000 f8f4 	bl	80011bc <MX_DAC_Init>
  MX_TIM2_Init();
 8000fd4:	f000 f980 	bl	80012d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8000fd8:	4814      	ldr	r0, [pc, #80]	@ (800102c <main+0x80>)
 8000fda:	f000 fef5 	bl	8001dc8 <HAL_ADC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 8000fde:	4814      	ldr	r0, [pc, #80]	@ (8001030 <main+0x84>)
 8000fe0:	f005 fbee 	bl	80067c0 <HAL_TIM_Base_Start>

  get_SineVal();
 8000fe4:	f7ff ff44 	bl	8000e70 <get_SineVal>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (lastButton != buttonCounter){
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <main+0x88>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <main+0x8c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d004      	beq.n	8000ffe <main+0x52>
		  change_sine_wave(buttonCounter);
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <main+0x8c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fb61 	bl	80016c0 <change_sine_wave>

	  }
	  caseNumber = CASE_NUMBER(gADC_Percent);
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <main+0x90>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fb7c 	bl	8001700 <CASE_NUMBER>
 8001008:	4603      	mov	r3, r0
 800100a:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <main+0x94>)
 800100c:	6013      	str	r3, [r2, #0]
	  if (caseNumber == 0){
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <main+0x94>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <main+0x7a>
		  buttonCounter = 0;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <main+0x8c>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
		  change_sine_wave(buttonCounter);
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <main+0x8c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fb4d 	bl	80016c0 <change_sine_wave>
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001026:	f009 fa0d 	bl	800a444 <MX_USB_HOST_Process>
	  if (lastButton != buttonCounter){
 800102a:	e7dd      	b.n	8000fe8 <main+0x3c>
 800102c:	20000098 	.word	0x20000098
 8001030:	20000200 	.word	0x20000200
 8001034:	20000578 	.word	0x20000578
 8001038:	20000574 	.word	0x20000574
 800103c:	2000056e 	.word	0x2000056e
 8001040:	20000570 	.word	0x20000570

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f009 fd98 	bl	800ab88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <SystemClock_Config+0xcc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <SystemClock_Config+0xcc>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <SystemClock_Config+0xd0>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b4:	2308      	movs	r3, #8
 80010b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010c2:	2307      	movs	r3, #7
 80010c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fe1c 	bl	8005d08 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010d6:	f000 fb24 	bl	8001722 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2302      	movs	r3, #2
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2105      	movs	r1, #5
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 f87d 	bl	80061f8 <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001104:	f000 fb0d 	bl	8001722 <Error_Handler>
  }
}
 8001108:	bf00      	nop
 800110a:	3750      	adds	r7, #80	@ 0x50
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800112a:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800112c:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <MX_ADC1_Init+0x9c>)
 800112e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001132:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001136:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001146:	2201      	movs	r2, #1
 8001148:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800115a:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <MX_ADC1_Init+0xa0>)
 800115c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001166:	2201      	movs	r2, #1
 8001168:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001174:	2201      	movs	r2, #1
 8001176:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800117a:	f000 fde1 	bl	8001d40 <HAL_ADC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001184:	f000 facd 	bl	8001722 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001188:	2301      	movs	r3, #1
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001190:	2307      	movs	r3, #7
 8001192:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800119a:	f001 f825 	bl	80021e8 <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011a4:	f000 fabd 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000098 	.word	0x20000098
 80011b4:	40012000 	.word	0x40012000
 80011b8:	0f000001 	.word	0x0f000001

080011bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_DAC_Init+0x4c>)
 80011cc:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <MX_DAC_Init+0x50>)
 80011ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011d0:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_DAC_Init+0x4c>)
 80011d2:	f001 fb42 	bl	800285a <HAL_DAC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011dc:	f000 faa1 	bl	8001722 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011e0:	2324      	movs	r3, #36	@ 0x24
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_DAC_Init+0x4c>)
 80011f0:	f001 fc81 	bl	8002af6 <HAL_DAC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011fa:	f000 fa92 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200000e0 	.word	0x200000e0
 800120c:	40007400 	.word	0x40007400

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f004 fc17 	bl	8005a80 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fa63 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000154 	.word	0x20000154
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_SPI1_Init+0x64>)
 8001272:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <MX_SPI1_Init+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_SPI1_Init+0x64>)
 8001278:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800127c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127e:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_SPI1_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_SPI1_Init+0x64>)
 8001298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800129c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_SPI1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_SPI1_Init+0x64>)
 80012b8:	220a      	movs	r2, #10
 80012ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <MX_SPI1_Init+0x64>)
 80012be:	f005 f9a7 	bl	8006610 <HAL_SPI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c8:	f000 fa2b 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200001a8 	.word	0x200001a8
 80012d4:	40013000 	.word	0x40013000

080012d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <MX_TIM2_Init+0x94>)
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_TIM2_Init+0x94>)
 80012fe:	2253      	movs	r2, #83	@ 0x53
 8001300:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM2_Init+0x94>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_TIM2_Init+0x94>)
 800130a:	2263      	movs	r2, #99	@ 0x63
 800130c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_TIM2_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_TIM2_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	@ (800136c <MX_TIM2_Init+0x94>)
 800131c:	f005 fa01 	bl	8006722 <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001326:	f000 f9fc 	bl	8001722 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_TIM2_Init+0x94>)
 8001338:	f005 fb9a 	bl	8006a70 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 f9ee 	bl	8001722 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001346:	2320      	movs	r3, #32
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_TIM2_Init+0x94>)
 8001354:	f005 fdc6 	bl	8006ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800135e:	f000 f9e0 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000200 	.word	0x20000200

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_DMA_Init+0x3c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <MX_DMA_Init+0x3c>)
 8001380:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_DMA_Init+0x3c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2010      	movs	r0, #16
 8001398:	f001 fa29 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800139c:	2010      	movs	r0, #16
 800139e:	f001 fa42 	bl	8002826 <HAL_NVIC_EnableIRQ>

}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	4b7e      	ldr	r3, [pc, #504]	@ (80015c4 <MX_GPIO_Init+0x214>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a7d      	ldr	r2, [pc, #500]	@ (80015c4 <MX_GPIO_Init+0x214>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b7b      	ldr	r3, [pc, #492]	@ (80015c4 <MX_GPIO_Init+0x214>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	4b77      	ldr	r3, [pc, #476]	@ (80015c4 <MX_GPIO_Init+0x214>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a76      	ldr	r2, [pc, #472]	@ (80015c4 <MX_GPIO_Init+0x214>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b74      	ldr	r3, [pc, #464]	@ (80015c4 <MX_GPIO_Init+0x214>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b70      	ldr	r3, [pc, #448]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a6f      	ldr	r2, [pc, #444]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b6d      	ldr	r3, [pc, #436]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b69      	ldr	r3, [pc, #420]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a68      	ldr	r2, [pc, #416]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b66      	ldr	r3, [pc, #408]	@ (80015c4 <MX_GPIO_Init+0x214>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b62      	ldr	r3, [pc, #392]	@ (80015c4 <MX_GPIO_Init+0x214>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a61      	ldr	r2, [pc, #388]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b5f      	ldr	r3, [pc, #380]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b5b      	ldr	r3, [pc, #364]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a5a      	ldr	r2, [pc, #360]	@ (80015c4 <MX_GPIO_Init+0x214>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b58      	ldr	r3, [pc, #352]	@ (80015c4 <MX_GPIO_Init+0x214>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2108      	movs	r1, #8
 8001472:	4855      	ldr	r0, [pc, #340]	@ (80015c8 <MX_GPIO_Init+0x218>)
 8001474:	f002 f99e 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2101      	movs	r1, #1
 800147c:	4853      	ldr	r0, [pc, #332]	@ (80015cc <MX_GPIO_Init+0x21c>)
 800147e:	f002 f999 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001482:	2200      	movs	r2, #0
 8001484:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001488:	4851      	ldr	r0, [pc, #324]	@ (80015d0 <MX_GPIO_Init+0x220>)
 800148a:	f002 f993 	bl	80037b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800148e:	2308      	movs	r3, #8
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4848      	ldr	r0, [pc, #288]	@ (80015c8 <MX_GPIO_Init+0x218>)
 80014a6:	f001 ffe9 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4842      	ldr	r0, [pc, #264]	@ (80015cc <MX_GPIO_Init+0x21c>)
 80014c2:	f001 ffdb 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014c6:	2308      	movs	r3, #8
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d6:	2305      	movs	r3, #5
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	483a      	ldr	r0, [pc, #232]	@ (80015cc <MX_GPIO_Init+0x21c>)
 80014e2:	f001 ffcb 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f0:	2302      	movs	r3, #2
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4836      	ldr	r0, [pc, #216]	@ (80015d4 <MX_GPIO_Init+0x224>)
 80014fc:	f001 ffbe 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001500:	2304      	movs	r3, #4
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4831      	ldr	r0, [pc, #196]	@ (80015d8 <MX_GPIO_Init+0x228>)
 8001514:	f001 ffb2 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800152a:	2305      	movs	r3, #5
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4828      	ldr	r0, [pc, #160]	@ (80015d8 <MX_GPIO_Init+0x228>)
 8001536:	f001 ffa1 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800153a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800153e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	481f      	ldr	r0, [pc, #124]	@ (80015d0 <MX_GPIO_Init+0x220>)
 8001554:	f001 ff92 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001558:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800156a:	2306      	movs	r3, #6
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4815      	ldr	r0, [pc, #84]	@ (80015cc <MX_GPIO_Init+0x21c>)
 8001576:	f001 ff81 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800157a:	2320      	movs	r3, #32
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4810      	ldr	r0, [pc, #64]	@ (80015d0 <MX_GPIO_Init+0x220>)
 800158e:	f001 ff75 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001592:	2302      	movs	r3, #2
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001596:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <MX_GPIO_Init+0x218>)
 80015a8:	f001 ff68 	bl	800347c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2006      	movs	r0, #6
 80015b2:	f001 f91c 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015b6:	2006      	movs	r0, #6
 80015b8:	f001 f935 	bl	8002826 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	@ 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400

080015dc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	6078      	str	r0, [r7, #4]
	gADC_Value = HAL_ADC_GetValue(hadc);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fddd 	bl	80021a4 <HAL_ADC_GetValue>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_ADC_ConvCpltCallback+0x3c>)
 80015f0:	801a      	strh	r2, [r3, #0]
	gADC_Percent = map(gADC_Value, 0, 4096, 0, 100);
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <HAL_ADC_ConvCpltCallback+0x3c>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	2364      	movs	r3, #100	@ 0x64
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001602:	2100      	movs	r1, #0
 8001604:	f7ff fc14 	bl	8000e30 <map>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_ADC_ConvCpltCallback+0x40>)
 800160e:	801a      	strh	r2, [r3, #0]
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000056c 	.word	0x2000056c
 800161c:	2000056e 	.word	0x2000056e

08001620 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0){
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d115      	bne.n	800165c <HAL_GPIO_EXTI_Callback+0x3c>
		lastButton = buttonCounter;
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_GPIO_EXTI_Callback+0x48>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001636:	6013      	str	r3, [r2, #0]
		buttonCounter++;
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_GPIO_EXTI_Callback+0x48>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_GPIO_EXTI_Callback+0x48>)
 8001640:	6013      	str	r3, [r2, #0]
		buttonCounter = buttonCounter % 3;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <HAL_GPIO_EXTI_Callback+0x48>)
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_GPIO_EXTI_Callback+0x50>)
 8001648:	fb83 3201 	smull	r3, r2, r3, r1
 800164c:	17cb      	asrs	r3, r1, #31
 800164e:	1ad2      	subs	r2, r2, r3
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	1aca      	subs	r2, r1, r3
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <HAL_GPIO_EXTI_Callback+0x48>)
 800165a:	601a      	str	r2, [r3, #0]
	}

}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	20000574 	.word	0x20000574
 800166c:	20000578 	.word	0x20000578
 8001670:	55555556 	.word	0x55555556

08001674 <select_sine_wave>:

void select_sine_wave(int countStatus) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    if (countStatus == 1) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d103      	bne.n	800168a <select_sine_wave+0x16>
        current_sine_wave = gSine_Values;
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <select_sine_wave+0x38>)
 8001684:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <select_sine_wave+0x3c>)
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e005      	b.n	8001696 <select_sine_wave+0x22>
    } else if (countStatus == 2) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d102      	bne.n	8001696 <select_sine_wave+0x22>
        current_sine_wave = gSine_Values2;
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <select_sine_wave+0x38>)
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <select_sine_wave+0x40>)
 8001694:	601a      	str	r2, [r3, #0]
    }
    lastButton = buttonCounter;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <select_sine_wave+0x44>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <select_sine_wave+0x48>)
 800169c:	6013      	str	r3, [r2, #0]

}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000568 	.word	0x20000568
 80016b0:	20000248 	.word	0x20000248
 80016b4:	200003d8 	.word	0x200003d8
 80016b8:	20000574 	.word	0x20000574
 80016bc:	20000578 	.word	0x20000578

080016c0 <change_sine_wave>:

void change_sine_wave(int countStatus) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	6078      	str	r0, [r7, #4]
    // Stop Current DMA
    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	480b      	ldr	r0, [pc, #44]	@ (80016f8 <change_sine_wave+0x38>)
 80016cc:	f001 f9a8 	bl	8002a20 <HAL_DAC_Stop_DMA>

    // Change the Sine Wave Array
    if (countStatus != 0) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <change_sine_wave+0x2e>
    	select_sine_wave(countStatus);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffcc 	bl	8001674 <select_sine_wave>
    	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, current_sine_wave, NUM_POINTS, DAC_ALIGN_12B_R);
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <change_sine_wave+0x3c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2364      	movs	r3, #100	@ 0x64
 80016e6:	2100      	movs	r1, #0
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <change_sine_wave+0x38>)
 80016ea:	f001 f8d9 	bl	80028a0 <HAL_DAC_Start_DMA>
    }

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000e0 	.word	0x200000e0
 80016fc:	20000568 	.word	0x20000568

08001700 <CASE_NUMBER>:


int CASE_NUMBER(uint16_t gadc_percent){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
	if (gadc_percent<40){
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	2b27      	cmp	r3, #39	@ 0x27
 800170e:	d801      	bhi.n	8001714 <CASE_NUMBER+0x14>
		return 0;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <CASE_NUMBER+0x16>
	} else{
		return 1;
 8001714:	2301      	movs	r3, #1
	}
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001726:	b672      	cpsid	i
}
 8001728:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172a:	bf00      	nop
 800172c:	e7fd      	b.n	800172a <Error_Handler+0x8>
	...

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <HAL_MspInit+0x4c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_MspInit+0x4c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800176e:	2007      	movs	r0, #7
 8001770:	f001 f832 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1b      	ldr	r2, [pc, #108]	@ (800180c <HAL_ADC_MspInit+0x8c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12f      	bne.n	8001802 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_ADC_MspInit+0x90>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	4a19      	ldr	r2, [pc, #100]	@ (8001810 <HAL_ADC_MspInit+0x90>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <HAL_ADC_MspInit+0x90>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_ADC_MspInit+0x90>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <HAL_ADC_MspInit+0x90>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <HAL_ADC_MspInit+0x90>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017da:	2302      	movs	r3, #2
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017de:	2303      	movs	r3, #3
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4809      	ldr	r0, [pc, #36]	@ (8001814 <HAL_ADC_MspInit+0x94>)
 80017ee:	f001 fe45 	bl	800347c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2012      	movs	r0, #18
 80017f8:	f000 fff9 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017fc:	2012      	movs	r0, #18
 80017fe:	f001 f812 	bl	8002826 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	@ 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40012000 	.word	0x40012000
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000

08001818 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2f      	ldr	r2, [pc, #188]	@ (80018f4 <HAL_DAC_MspInit+0xdc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d158      	bne.n	80018ec <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <HAL_DAC_MspInit+0xe0>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <HAL_DAC_MspInit+0xe0>)
 8001844:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_DAC_MspInit+0xe0>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <HAL_DAC_MspInit+0xe0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a26      	ldr	r2, [pc, #152]	@ (80018f8 <HAL_DAC_MspInit+0xe0>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <HAL_DAC_MspInit+0xe0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001872:	2310      	movs	r3, #16
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001876:	2303      	movs	r3, #3
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	481d      	ldr	r0, [pc, #116]	@ (80018fc <HAL_DAC_MspInit+0xe4>)
 8001886:	f001 fdf9 	bl	800347c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 800188c:	4a1d      	ldr	r2, [pc, #116]	@ (8001904 <HAL_DAC_MspInit+0xec>)
 800188e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 8001892:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001896:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 800189a:	2240      	movs	r2, #64	@ 0x40
 800189c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018aa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018b2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ba:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80018d0:	480b      	ldr	r0, [pc, #44]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018d2:	f001 f9f3 	bl	8002cbc <HAL_DMA_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80018dc:	f7ff ff21 	bl	8001722 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	4a06      	ldr	r2, [pc, #24]	@ (8001900 <HAL_DAC_MspInit+0xe8>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	@ 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40007400 	.word	0x40007400
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	200000f4 	.word	0x200000f4
 8001904:	40026088 	.word	0x40026088

08001908 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <HAL_I2C_MspInit+0x84>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12c      	bne.n	8001984 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001946:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001950:	2301      	movs	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001958:	2304      	movs	r3, #4
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480c      	ldr	r0, [pc, #48]	@ (8001994 <HAL_I2C_MspInit+0x8c>)
 8001964:	f001 fd8a 	bl	800347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001972:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40005400 	.word	0x40005400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <HAL_SPI_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12b      	bne.n	8001a12 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	4a17      	ldr	r2, [pc, #92]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a10      	ldr	r2, [pc, #64]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <HAL_SPI_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019f2:	23e0      	movs	r3, #224	@ 0xe0
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a02:	2305      	movs	r3, #5
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <HAL_SPI_MspInit+0x8c>)
 8001a0e:	f001 fd35 	bl	800347c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	@ 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40013000 	.word	0x40013000
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a38:	d115      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <HAL_TIM_Base_MspInit+0x48>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <HAL_TIM_Base_MspInit+0x48>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_TIM_Base_MspInit+0x48>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201c      	movs	r0, #28
 8001a5c:	f000 fec7 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a60:	201c      	movs	r0, #28
 8001a62:	f000 fee0 	bl	8002826 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <NMI_Handler+0x4>

08001a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f000 f8f5 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f001 fe86 	bl	80037e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <DMA1_Stream5_IRQHandler+0x10>)
 8001ae6:	f001 fa5f 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000f4 	.word	0x200000f4

08001af4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <ADC_IRQHandler+0x10>)
 8001afa:	f000 fa43 	bl	8001f84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000098 	.word	0x20000098

08001b08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <TIM2_IRQHandler+0x10>)
 8001b0e:	f004 febf 	bl	8006890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000200 	.word	0x20000200

08001b1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <OTG_FS_IRQHandler+0x10>)
 8001b22:	f002 f959 	bl	8003dd8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000960 	.word	0x20000960

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f009 f82a 	bl	800abb8 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20020000 	.word	0x20020000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	2000057c 	.word	0x2000057c
 8001b98:	20000e88 	.word	0x20000e88

08001b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bc4:	f7ff ffea 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	@ (8001c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bee:	f008 ffe9 	bl	800abc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7ff f9db 	bl	8000fac <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c04:	0800bf18 	.word	0x0800bf18
  ldr r2, =_sbss
 8001c08:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c0c:	20000e88 	.word	0x20000e88

08001c10 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <CAN1_RX0_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c18:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <HAL_Init+0x40>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_Init+0x40>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	@ (8001c54 <HAL_Init+0x40>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 fdcb 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f808 	bl	8001c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fd72 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_InitTick+0x54>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_InitTick+0x58>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fde3 	bl	8002842 <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00e      	b.n	8001ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 fdab 	bl	80027ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <HAL_InitTick+0x5c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	20000580 	.word	0x20000580

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000580 	.word	0x20000580

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff ffee 	bl	8001ce0 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_Delay+0x44>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008

08001d40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e033      	b.n	8001dbe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fd0e 	bl	8001780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d118      	bne.n	8001db0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d86:	f023 0302 	bic.w	r3, r3, #2
 8001d8a:	f043 0202 	orr.w	r2, r3, #2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fb4a 	bl	800242c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dae:	e001      	b.n	8001db4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Start_IT+0x1a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e0bd      	b.n	8001f5e <HAL_ADC_Start_IT+0x196>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d018      	beq.n	8001e2a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e08:	4b58      	ldr	r3, [pc, #352]	@ (8001f6c <HAL_ADC_Start_IT+0x1a4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a58      	ldr	r2, [pc, #352]	@ (8001f70 <HAL_ADC_Start_IT+0x1a8>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0c9a      	lsrs	r2, r3, #18
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e1c:	e002      	b.n	8001e24 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f9      	bne.n	8001e1e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f040 8085 	bne.w	8001f44 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e78:	d106      	bne.n	8001e88 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f023 0206 	bic.w	r2, r3, #6
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e86:	e002      	b.n	8001e8e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e96:	4b37      	ldr	r3, [pc, #220]	@ (8001f74 <HAL_ADC_Start_IT+0x1ac>)
 8001e98:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d12a      	bne.n	8001f1a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f78 <HAL_ADC_Start_IT+0x1b0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d015      	beq.n	8001efa <HAL_ADC_Start_IT+0x132>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f7c <HAL_ADC_Start_IT+0x1b4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d105      	bne.n	8001ee4 <HAL_ADC_Start_IT+0x11c>
 8001ed8:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <HAL_ADC_Start_IT+0x1ac>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a25      	ldr	r2, [pc, #148]	@ (8001f80 <HAL_ADC_Start_IT+0x1b8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d136      	bne.n	8001f5c <HAL_ADC_Start_IT+0x194>
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_ADC_Start_IT+0x1ac>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d130      	bne.n	8001f5c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d129      	bne.n	8001f5c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	e020      	b.n	8001f5c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a16      	ldr	r2, [pc, #88]	@ (8001f78 <HAL_ADC_Start_IT+0x1b0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d11b      	bne.n	8001f5c <HAL_ADC_Start_IT+0x194>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d114      	bne.n	8001f5c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	e00b      	b.n	8001f5c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f043 0210 	orr.w	r2, r3, #16
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	40012300 	.word	0x40012300
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	40012100 	.word	0x40012100
 8001f80:	40012200 	.word	0x40012200

08001f84 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d049      	beq.n	800204e <HAL_ADC_IRQHandler+0xca>
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d046      	beq.n	800204e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d12b      	bne.n	800203e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d127      	bne.n	800203e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002006:	2b00      	cmp	r3, #0
 8002008:	d119      	bne.n	800203e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0220 	bic.w	r2, r2, #32
 8002018:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff facc 	bl	80015dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0212 	mvn.w	r2, #18
 800204c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d057      	beq.n	8002114 <HAL_ADC_IRQHandler+0x190>
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d054      	beq.n	8002114 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d139      	bne.n	8002104 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d12b      	bne.n	8002104 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d124      	bne.n	8002104 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11d      	bne.n	8002104 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d119      	bne.n	8002104 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fa8d 	bl	8002624 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 020c 	mvn.w	r2, #12
 8002112:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002122:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d017      	beq.n	800215a <HAL_ADC_IRQHandler+0x1d6>
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d014      	beq.n	800215a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10d      	bne.n	800215a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f837 	bl	80021be <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0201 	mvn.w	r2, #1
 8002158:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002168:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <HAL_ADC_IRQHandler+0x218>
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d012      	beq.n	800219c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0220 	mvn.w	r2, #32
 800218a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f820 	bl	80021d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f06f 0220 	mvn.w	r2, #32
 800219a:	601a      	str	r2, [r3, #0]
  }
}
 800219c:	bf00      	nop
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1c>
 8002200:	2302      	movs	r3, #2
 8002202:	e105      	b.n	8002410 <HAL_ADC_ConfigChannel+0x228>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b09      	cmp	r3, #9
 8002212:	d925      	bls.n	8002260 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68d9      	ldr	r1, [r3, #12]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	2207      	movs	r2, #7
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43da      	mvns	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	400a      	ands	r2, r1
 8002238:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68d9      	ldr	r1, [r3, #12]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	4603      	mov	r3, r0
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4403      	add	r3, r0
 8002252:	3b1e      	subs	r3, #30
 8002254:	409a      	lsls	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	e022      	b.n	80022a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6919      	ldr	r1, [r3, #16]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	2207      	movs	r2, #7
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	400a      	ands	r2, r1
 8002282:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6919      	ldr	r1, [r3, #16]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	4603      	mov	r3, r0
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4403      	add	r3, r0
 800229c:	409a      	lsls	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d824      	bhi.n	80022f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	3b05      	subs	r3, #5
 80022c0:	221f      	movs	r2, #31
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	400a      	ands	r2, r1
 80022ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	4618      	mov	r0, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	3b05      	subs	r3, #5
 80022ea:	fa00 f203 	lsl.w	r2, r0, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80022f6:	e04c      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	d824      	bhi.n	800234a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	3b23      	subs	r3, #35	@ 0x23
 8002312:	221f      	movs	r2, #31
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43da      	mvns	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	400a      	ands	r2, r1
 8002320:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b23      	subs	r3, #35	@ 0x23
 800233c:	fa00 f203 	lsl.w	r2, r0, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
 8002348:	e023      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	3b41      	subs	r3, #65	@ 0x41
 800235c:	221f      	movs	r2, #31
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	400a      	ands	r2, r1
 800236a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b41      	subs	r3, #65	@ 0x41
 8002386:	fa00 f203 	lsl.w	r2, r0, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002392:	4b22      	ldr	r3, [pc, #136]	@ (800241c <HAL_ADC_ConfigChannel+0x234>)
 8002394:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <HAL_ADC_ConfigChannel+0x238>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d109      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1cc>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b12      	cmp	r3, #18
 80023a6:	d105      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	@ (8002420 <HAL_ADC_ConfigChannel+0x238>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d123      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x21e>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d003      	beq.n	80023ce <HAL_ADC_ConfigChannel+0x1e6>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b11      	cmp	r3, #17
 80023cc:	d11b      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d111      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_ADC_ConfigChannel+0x23c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <HAL_ADC_ConfigChannel+0x240>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9a      	lsrs	r2, r3, #18
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023f8:	e002      	b.n	8002400 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40012300 	.word	0x40012300
 8002420:	40012000 	.word	0x40012000
 8002424:	20000000 	.word	0x20000000
 8002428:	431bde83 	.word	0x431bde83

0800242c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002434:	4b79      	ldr	r3, [pc, #484]	@ (800261c <ADC_Init+0x1f0>)
 8002436:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	021a      	lsls	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	4a58      	ldr	r2, [pc, #352]	@ (8002620 <ADC_Init+0x1f4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e00f      	b.n	800252a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002528:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0202 	bic.w	r2, r2, #2
 8002538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6899      	ldr	r1, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7e1b      	ldrb	r3, [r3, #24]
 8002544:	005a      	lsls	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01b      	beq.n	8002590 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002566:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002576:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	3b01      	subs	r3, #1
 8002584:	035a      	lsls	r2, r3, #13
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	e007      	b.n	80025a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800259e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	051a      	lsls	r2, r3, #20
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025e2:	025a      	lsls	r2, r3, #9
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6899      	ldr	r1, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	029a      	lsls	r2, r3, #10
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40012300 	.word	0x40012300
 8002620:	0f000001 	.word	0x0f000001

08002624 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	@ (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	@ (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	@ (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	@ (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	@ 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	@ 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a4:	d301      	bcc.n	80027aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00f      	b.n	80027ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <SysTick_Config+0x40>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b2:	210f      	movs	r1, #15
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f7ff ff8e 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <SysTick_Config+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c2:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <SysTick_Config+0x40>)
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff29 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff3e 	bl	8002680 <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ff8e 	bl	800272c <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff5d 	bl	80026d8 <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff31 	bl	800269c <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffa2 	bl	8002794 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e014      	b.n	8002896 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fe ffcb 	bl	8001818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0a2      	b.n	80029fe <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	795b      	ldrb	r3, [r3, #5]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_DAC_Start_DMA+0x24>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e09c      	b.n	80029fe <HAL_DAC_Start_DMA+0x15e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2202      	movs	r2, #2
 80028ce:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d129      	bne.n	800292a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a4b      	ldr	r2, [pc, #300]	@ (8002a08 <HAL_DAC_Start_DMA+0x168>)
 80028dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4a4a      	ldr	r2, [pc, #296]	@ (8002a0c <HAL_DAC_Start_DMA+0x16c>)
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	4a49      	ldr	r2, [pc, #292]	@ (8002a10 <HAL_DAC_Start_DMA+0x170>)
 80028ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80028fc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_DAC_Start_DMA+0x6c>
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d005      	beq.n	8002916 <HAL_DAC_Start_DMA+0x76>
 800290a:	e009      	b.n	8002920 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3308      	adds	r3, #8
 8002912:	613b      	str	r3, [r7, #16]
        break;
 8002914:	e033      	b.n	800297e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	330c      	adds	r3, #12
 800291c:	613b      	str	r3, [r7, #16]
        break;
 800291e:	e02e      	b.n	800297e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3310      	adds	r3, #16
 8002926:	613b      	str	r3, [r7, #16]
        break;
 8002928:	e029      	b.n	800297e <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4a39      	ldr	r2, [pc, #228]	@ (8002a14 <HAL_DAC_Start_DMA+0x174>)
 8002930:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4a38      	ldr	r2, [pc, #224]	@ (8002a18 <HAL_DAC_Start_DMA+0x178>)
 8002938:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	4a37      	ldr	r2, [pc, #220]	@ (8002a1c <HAL_DAC_Start_DMA+0x17c>)
 8002940:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002950:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_DAC_Start_DMA+0xc0>
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	2b04      	cmp	r3, #4
 800295c:	d005      	beq.n	800296a <HAL_DAC_Start_DMA+0xca>
 800295e:	e009      	b.n	8002974 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3314      	adds	r3, #20
 8002966:	613b      	str	r3, [r7, #16]
        break;
 8002968:	e009      	b.n	800297e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3318      	adds	r3, #24
 8002970:	613b      	str	r3, [r7, #16]
        break;
 8002972:	e004      	b.n	800297e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	331c      	adds	r3, #28
 800297a:	613b      	str	r3, [r7, #16]
        break;
 800297c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d111      	bne.n	80029a8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002992:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6898      	ldr	r0, [r3, #8]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	f000 fa3b 	bl	8002e18 <HAL_DMA_Start_IT>
 80029a2:	4603      	mov	r3, r0
 80029a4:	75fb      	strb	r3, [r7, #23]
 80029a6:	e010      	b.n	80029ca <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80029b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68d8      	ldr	r0, [r3, #12]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	f000 fa29 	bl	8002e18 <HAL_DMA_Start_IT>
 80029c6:	4603      	mov	r3, r0
 80029c8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6819      	ldr	r1, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2201      	movs	r2, #1
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e005      	b.n	80029fc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f043 0204 	orr.w	r2, r3, #4
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	08002ba9 	.word	0x08002ba9
 8002a0c:	08002bcb 	.word	0x08002bcb
 8002a10:	08002be7 	.word	0x08002be7
 8002a14:	08002c51 	.word	0x08002c51
 8002a18:	08002c73 	.word	0x08002c73
 8002a1c:	08002c8f 	.word	0x08002c8f

08002a20 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e03e      	b.n	8002ab2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	400a      	ands	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6819      	ldr	r1, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2201      	movs	r2, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43da      	mvns	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10d      	bne.n	8002a90 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fa25 	bl	8002ec8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e00c      	b.n	8002aaa <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fa17 	bl	8002ec8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002aa8:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b089      	sub	sp, #36	@ 0x24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_DAC_ConfigChannel+0x1c>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e042      	b.n	8002b9c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	795b      	ldrb	r3, [r3, #5]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_DAC_ConfigChannel+0x2c>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e03c      	b.n	8002b9c <HAL_DAC_ConfigChannel+0xa6>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	22c0      	movs	r2, #192	@ 0xc0
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43da      	mvns	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3724      	adds	r7, #36	@ 0x24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f7ff ff7f 	bl	8002aba <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	711a      	strb	r2, [r3, #4]
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff ff78 	bl	8002ace <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff ff6e 	bl	8002ae2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	711a      	strb	r2, [r3, #4]
}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff ffd8 	bl	8002c14 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	711a      	strb	r2, [r3, #4]
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7ff ffd1 	bl	8002c28 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f043 0204 	orr.w	r2, r3, #4
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ffc7 	bl	8002c3c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	711a      	strb	r2, [r3, #4]
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff f80a 	bl	8001ce0 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e099      	b.n	8002e0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf8:	e00f      	b.n	8002d1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cfa:	f7fe fff1 	bl	8001ce0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d908      	bls.n	8002d1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2203      	movs	r2, #3
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e078      	b.n	8002e0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e8      	bne.n	8002cfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4b38      	ldr	r3, [pc, #224]	@ (8002e14 <HAL_DMA_Init+0x158>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d107      	bne.n	8002d84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0307 	bic.w	r3, r3, #7
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d117      	bne.n	8002dde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fadf 	bl	8003384 <DMA_CheckFifoParam>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2240      	movs	r2, #64	@ 0x40
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e016      	b.n	8002e0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa96 	bl	8003318 <DMA_CalcBaseAndBitshift>
 8002dec:	4603      	mov	r3, r0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	223f      	movs	r2, #63	@ 0x3f
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	f010803f 	.word	0xf010803f

08002e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_Start_IT+0x26>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e040      	b.n	8002ec0 <HAL_DMA_Start_IT+0xa8>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d12f      	bne.n	8002eb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fa28 	bl	80032bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e70:	223f      	movs	r2, #63	@ 0x3f
 8002e72:	409a      	lsls	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0216 	orr.w	r2, r2, #22
 8002e86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e005      	b.n	8002ebe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ed6:	f7fe ff03 	bl	8001ce0 <HAL_GetTick>
 8002eda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d008      	beq.n	8002efa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e052      	b.n	8002fa0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0216 	bic.w	r2, r2, #22
 8002f08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <HAL_DMA_Abort+0x62>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0208 	bic.w	r2, r2, #8
 8002f38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4a:	e013      	b.n	8002f74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f4c:	f7fe fec8 	bl	8001ce0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d90c      	bls.n	8002f74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2203      	movs	r2, #3
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e015      	b.n	8002fa0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e4      	bne.n	8002f4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	223f      	movs	r2, #63	@ 0x3f
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80031f0 <HAL_DMA_IRQHandler+0x248>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a8e      	ldr	r2, [pc, #568]	@ (80031f4 <HAL_DMA_IRQHandler+0x24c>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0a9b      	lsrs	r3, r3, #10
 8002fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01a      	beq.n	8003014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	2208      	movs	r2, #8
 8003002:	409a      	lsls	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	2201      	movs	r2, #1
 8003038:	409a      	lsls	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	2204      	movs	r2, #4
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2204      	movs	r2, #4
 800306e:	409a      	lsls	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	2210      	movs	r2, #16
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d043      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d03c      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2210      	movs	r2, #16
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e01f      	b.n	8003118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e016      	b.n	8003118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0208 	bic.w	r2, r2, #8
 8003106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	2220      	movs	r2, #32
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 808f 	beq.w	8003248 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8087 	beq.w	8003248 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	2220      	movs	r2, #32
 8003140:	409a      	lsls	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b05      	cmp	r3, #5
 8003150:	d136      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0216 	bic.w	r2, r2, #22
 8003160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_DMA_IRQHandler+0x1da>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0208 	bic.w	r2, r2, #8
 8003190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	223f      	movs	r2, #63	@ 0x3f
 8003198:	409a      	lsls	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d07e      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
        }
        return;
 80031be:	e079      	b.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01d      	beq.n	800320a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10d      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e02c      	b.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000
 80031f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d023      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
 8003208:	e01e      	b.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10f      	bne.n	8003238 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0210 	bic.w	r2, r2, #16
 8003226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324c:	2b00      	cmp	r3, #0
 800324e:	d032      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2205      	movs	r2, #5
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3301      	adds	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	d307      	bcc.n	8003290 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f2      	bne.n	8003274 <HAL_DMA_IRQHandler+0x2cc>
 800328e:	e000      	b.n	8003292 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003290:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
 80032b2:	e000      	b.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032b4:	bf00      	nop
    }
  }
}
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d108      	bne.n	80032fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032fa:	e007      	b.n	800330c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	3b10      	subs	r3, #16
 8003328:	4a14      	ldr	r2, [pc, #80]	@ (800337c <DMA_CalcBaseAndBitshift+0x64>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	091b      	lsrs	r3, r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003332:	4a13      	ldr	r2, [pc, #76]	@ (8003380 <DMA_CalcBaseAndBitshift+0x68>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d909      	bls.n	800335a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	659a      	str	r2, [r3, #88]	@ 0x58
 8003358:	e007      	b.n	800336a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	aaaaaaab 	.word	0xaaaaaaab
 8003380:	0800bd24 	.word	0x0800bd24

08003384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d11f      	bne.n	80033de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d856      	bhi.n	8003452 <DMA_CheckFifoParam+0xce>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <DMA_CheckFifoParam+0x28>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033bd 	.word	0x080033bd
 80033b0:	080033cf 	.word	0x080033cf
 80033b4:	080033bd 	.word	0x080033bd
 80033b8:	08003453 	.word	0x08003453
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d046      	beq.n	8003456 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033cc:	e043      	b.n	8003456 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033d6:	d140      	bne.n	800345a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033dc:	e03d      	b.n	800345a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e6:	d121      	bne.n	800342c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d837      	bhi.n	800345e <DMA_CheckFifoParam+0xda>
 80033ee:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <DMA_CheckFifoParam+0x70>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003405 	.word	0x08003405
 80033f8:	0800340b 	.word	0x0800340b
 80033fc:	08003405 	.word	0x08003405
 8003400:	0800341d 	.word	0x0800341d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
      break;
 8003408:	e030      	b.n	800346c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d025      	beq.n	8003462 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341a:	e022      	b.n	8003462 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003424:	d11f      	bne.n	8003466 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800342a:	e01c      	b.n	8003466 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d903      	bls.n	800343a <DMA_CheckFifoParam+0xb6>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d003      	beq.n	8003440 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003438:	e018      	b.n	800346c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      break;
 800343e:	e015      	b.n	800346c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
      break;
 8003450:	e00b      	b.n	800346a <DMA_CheckFifoParam+0xe6>
      break;
 8003452:	bf00      	nop
 8003454:	e00a      	b.n	800346c <DMA_CheckFifoParam+0xe8>
      break;
 8003456:	bf00      	nop
 8003458:	e008      	b.n	800346c <DMA_CheckFifoParam+0xe8>
      break;
 800345a:	bf00      	nop
 800345c:	e006      	b.n	800346c <DMA_CheckFifoParam+0xe8>
      break;
 800345e:	bf00      	nop
 8003460:	e004      	b.n	800346c <DMA_CheckFifoParam+0xe8>
      break;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <DMA_CheckFifoParam+0xe8>
      break;   
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <DMA_CheckFifoParam+0xe8>
      break;
 800346a:	bf00      	nop
    }
  } 
  
  return status; 
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	@ 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e16b      	b.n	8003770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003498:	2201      	movs	r2, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	f040 815a 	bne.w	800376a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d005      	beq.n	80034ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d130      	bne.n	8003530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003504:	2201      	movs	r2, #1
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 0201 	and.w	r2, r3, #1
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b03      	cmp	r3, #3
 800353a:	d017      	beq.n	800356c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d123      	bne.n	80035c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	08da      	lsrs	r2, r3, #3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3208      	adds	r2, #8
 8003580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	220f      	movs	r2, #15
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	08da      	lsrs	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3208      	adds	r2, #8
 80035ba:	69b9      	ldr	r1, [r7, #24]
 80035bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0203 	and.w	r2, r3, #3
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80b4 	beq.w	800376a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	4b60      	ldr	r3, [pc, #384]	@ (8003788 <HAL_GPIO_Init+0x30c>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360a:	4a5f      	ldr	r2, [pc, #380]	@ (8003788 <HAL_GPIO_Init+0x30c>)
 800360c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003610:	6453      	str	r3, [r2, #68]	@ 0x44
 8003612:	4b5d      	ldr	r3, [pc, #372]	@ (8003788 <HAL_GPIO_Init+0x30c>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800361e:	4a5b      	ldr	r2, [pc, #364]	@ (800378c <HAL_GPIO_Init+0x310>)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	3302      	adds	r3, #2
 8003626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	220f      	movs	r2, #15
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a52      	ldr	r2, [pc, #328]	@ (8003790 <HAL_GPIO_Init+0x314>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d02b      	beq.n	80036a2 <HAL_GPIO_Init+0x226>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a51      	ldr	r2, [pc, #324]	@ (8003794 <HAL_GPIO_Init+0x318>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d025      	beq.n	800369e <HAL_GPIO_Init+0x222>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a50      	ldr	r2, [pc, #320]	@ (8003798 <HAL_GPIO_Init+0x31c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01f      	beq.n	800369a <HAL_GPIO_Init+0x21e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a4f      	ldr	r2, [pc, #316]	@ (800379c <HAL_GPIO_Init+0x320>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d019      	beq.n	8003696 <HAL_GPIO_Init+0x21a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4e      	ldr	r2, [pc, #312]	@ (80037a0 <HAL_GPIO_Init+0x324>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_GPIO_Init+0x216>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4d      	ldr	r2, [pc, #308]	@ (80037a4 <HAL_GPIO_Init+0x328>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00d      	beq.n	800368e <HAL_GPIO_Init+0x212>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4c      	ldr	r2, [pc, #304]	@ (80037a8 <HAL_GPIO_Init+0x32c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <HAL_GPIO_Init+0x20e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4b      	ldr	r2, [pc, #300]	@ (80037ac <HAL_GPIO_Init+0x330>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_GPIO_Init+0x20a>
 8003682:	2307      	movs	r3, #7
 8003684:	e00e      	b.n	80036a4 <HAL_GPIO_Init+0x228>
 8003686:	2308      	movs	r3, #8
 8003688:	e00c      	b.n	80036a4 <HAL_GPIO_Init+0x228>
 800368a:	2306      	movs	r3, #6
 800368c:	e00a      	b.n	80036a4 <HAL_GPIO_Init+0x228>
 800368e:	2305      	movs	r3, #5
 8003690:	e008      	b.n	80036a4 <HAL_GPIO_Init+0x228>
 8003692:	2304      	movs	r3, #4
 8003694:	e006      	b.n	80036a4 <HAL_GPIO_Init+0x228>
 8003696:	2303      	movs	r3, #3
 8003698:	e004      	b.n	80036a4 <HAL_GPIO_Init+0x228>
 800369a:	2302      	movs	r3, #2
 800369c:	e002      	b.n	80036a4 <HAL_GPIO_Init+0x228>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_GPIO_Init+0x228>
 80036a2:	2300      	movs	r3, #0
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	f002 0203 	and.w	r2, r2, #3
 80036aa:	0092      	lsls	r2, r2, #2
 80036ac:	4093      	lsls	r3, r2
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b4:	4935      	ldr	r1, [pc, #212]	@ (800378c <HAL_GPIO_Init+0x310>)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3302      	adds	r3, #2
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036e6:	4a32      	ldr	r2, [pc, #200]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ec:	4b30      	ldr	r3, [pc, #192]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003710:	4a27      	ldr	r2, [pc, #156]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003716:	4b26      	ldr	r3, [pc, #152]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800373a:	4a1d      	ldr	r2, [pc, #116]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003740:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003764:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3301      	adds	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	f67f ae90 	bls.w	8003498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3724      	adds	r7, #36	@ 0x24
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	40013800 	.word	0x40013800
 8003790:	40020000 	.word	0x40020000
 8003794:	40020400 	.word	0x40020400
 8003798:	40020800 	.word	0x40020800
 800379c:	40020c00 	.word	0x40020c00
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40021400 	.word	0x40021400
 80037a8:	40021800 	.word	0x40021800
 80037ac:	40021c00 	.word	0x40021c00
 80037b0:	40013c00 	.word	0x40013c00

080037b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
 80037c0:	4613      	mov	r3, r2
 80037c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c4:	787b      	ldrb	r3, [r7, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037d0:	e003      	b.n	80037da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	041a      	lsls	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	619a      	str	r2, [r3, #24]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037f2:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d006      	beq.n	800380c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037fe:	4a05      	ldr	r2, [pc, #20]	@ (8003814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd ff0a 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40013c00 	.word	0x40013c00

08003818 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e059      	b.n	80038de <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f006 fe35 	bl	800a4b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2203      	movs	r2, #3
 800384e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003858:	d102      	bne.n	8003860 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f003 fc42 	bl	80070ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7c1a      	ldrb	r2, [r3, #16]
 8003872:	f88d 2000 	strb.w	r2, [sp]
 8003876:	3304      	adds	r3, #4
 8003878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800387a:	f003 fbc3 	bl	8007004 <USB_CoreInit>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e026      	b.n	80038de <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f003 fc3a 	bl	8007110 <USB_SetCurrentMode>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e017      	b.n	80038de <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7c1a      	ldrb	r2, [r3, #16]
 80038b6:	f88d 2000 	strb.w	r2, [sp]
 80038ba:	3304      	adds	r3, #4
 80038bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038be:	f003 fde3 	bl	8007488 <USB_HostInit>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e004      	b.n	80038de <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80038e6:	b590      	push	{r4, r7, lr}
 80038e8:	b08b      	sub	sp, #44	@ 0x2c
 80038ea:	af04      	add	r7, sp, #16
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	4608      	mov	r0, r1
 80038f0:	4611      	mov	r1, r2
 80038f2:	461a      	mov	r2, r3
 80038f4:	4603      	mov	r3, r0
 80038f6:	70fb      	strb	r3, [r7, #3]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70bb      	strb	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003900:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003902:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_HCD_HC_Init+0x2c>
 800390e:	2302      	movs	r3, #2
 8003910:	e09d      	b.n	8003a4e <HAL_HCD_HC_Init+0x168>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	3319      	adds	r3, #25
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3314      	adds	r3, #20
 800393e:	787a      	ldrb	r2, [r7, #1]
 8003940:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3315      	adds	r3, #21
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3326      	adds	r3, #38	@ 0x26
 8003966:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800396a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	78bb      	ldrb	r3, [r7, #2]
 8003970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003974:	b2d8      	uxtb	r0, r3
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3316      	adds	r3, #22
 8003984:	4602      	mov	r2, r0
 8003986:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fbc7 	bl	8004120 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003992:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003996:	2b00      	cmp	r3, #0
 8003998:	da0a      	bge.n	80039b0 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3317      	adds	r3, #23
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e009      	b.n	80039c4 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3317      	adds	r3, #23
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f003 fec1 	bl	8007750 <USB_GetHostSpeed>
 80039ce:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80039d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10b      	bne.n	80039f0 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80039d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d107      	bne.n	80039f0 <HAL_HCD_HC_Init+0x10a>
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2bbc      	cmp	r3, #188	@ 0xbc
 80039ea:	d901      	bls.n	80039f0 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80039ec:	23bc      	movs	r3, #188	@ 0xbc
 80039ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	3318      	adds	r3, #24
 8003a00:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003a04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	b298      	uxth	r0, r3
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3328      	adds	r3, #40	@ 0x28
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	787c      	ldrb	r4, [r7, #1]
 8003a28:	78ba      	ldrb	r2, [r7, #2]
 8003a2a:	78f9      	ldrb	r1, [r7, #3]
 8003a2c:	9302      	str	r3, [sp, #8]
 8003a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	f003 feb0 	bl	80077a0 <USB_HC_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd90      	pop	{r4, r7, pc}

08003a56 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_HCD_HC_Halt+0x1e>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e00f      	b.n	8003a94 <HAL_HCD_HC_Halt+0x3e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f004 fa42 	bl	8007f0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	70fb      	strb	r3, [r7, #3]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70bb      	strb	r3, [r7, #2]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3317      	adds	r3, #23
 8003ac6:	78ba      	ldrb	r2, [r7, #2]
 8003ac8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3326      	adds	r3, #38	@ 0x26
 8003ada:	787a      	ldrb	r2, [r7, #1]
 8003adc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003ade:	7c3b      	ldrb	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d114      	bne.n	8003b0e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	332a      	adds	r3, #42	@ 0x2a
 8003af4:	2203      	movs	r2, #3
 8003af6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3319      	adds	r3, #25
 8003b08:	7f3a      	ldrb	r2, [r7, #28]
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e009      	b.n	8003b22 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	332a      	adds	r3, #42	@ 0x2a
 8003b1e:	2202      	movs	r2, #2
 8003b20:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b22:	787b      	ldrb	r3, [r7, #1]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	f200 8102 	bhi.w	8003d2e <HAL_HCD_HC_SubmitRequest+0x292>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b41 	.word	0x08003b41
 8003b34:	08003d19 	.word	0x08003d19
 8003b38:	08003c05 	.word	0x08003c05
 8003b3c:	08003c8f 	.word	0x08003c8f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003b40:	7c3b      	ldrb	r3, [r7, #16]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	f040 80f5 	bne.w	8003d32 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003b48:	78bb      	ldrb	r3, [r7, #2]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d12d      	bne.n	8003baa <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003b4e:	8b3b      	ldrh	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	333d      	adds	r3, #61	@ 0x3d
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	333d      	adds	r3, #61	@ 0x3d
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	332a      	adds	r3, #42	@ 0x2a
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003b92:	e0ce      	b.n	8003d32 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	332a      	adds	r3, #42	@ 0x2a
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	701a      	strb	r2, [r3, #0]
      break;
 8003ba8:	e0c3      	b.n	8003d32 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	331a      	adds	r3, #26
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	f040 80b8 	bne.w	8003d32 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	333c      	adds	r3, #60	@ 0x3c
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	332a      	adds	r3, #42	@ 0x2a
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
      break;
 8003bec:	e0a1      	b.n	8003d32 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	332a      	adds	r3, #42	@ 0x2a
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
      break;
 8003c02:	e096      	b.n	8003d32 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003c04:	78bb      	ldrb	r3, [r7, #2]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d120      	bne.n	8003c4c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	333d      	adds	r3, #61	@ 0x3d
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	332a      	adds	r3, #42	@ 0x2a
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003c34:	e07e      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	332a      	adds	r3, #42	@ 0x2a
 8003c46:	2202      	movs	r2, #2
 8003c48:	701a      	strb	r2, [r3, #0]
      break;
 8003c4a:	e073      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	333c      	adds	r3, #60	@ 0x3c
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	332a      	adds	r3, #42	@ 0x2a
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
      break;
 8003c76:	e05d      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	332a      	adds	r3, #42	@ 0x2a
 8003c88:	2202      	movs	r2, #2
 8003c8a:	701a      	strb	r2, [r3, #0]
      break;
 8003c8c:	e052      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c8e:	78bb      	ldrb	r3, [r7, #2]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d120      	bne.n	8003cd6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	333d      	adds	r3, #61	@ 0x3d
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	332a      	adds	r3, #42	@ 0x2a
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003cbe:	e039      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	332a      	adds	r3, #42	@ 0x2a
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	701a      	strb	r2, [r3, #0]
      break;
 8003cd4:	e02e      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	333c      	adds	r3, #60	@ 0x3c
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	332a      	adds	r3, #42	@ 0x2a
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
      break;
 8003d00:	e018      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	332a      	adds	r3, #42	@ 0x2a
 8003d12:	2202      	movs	r2, #2
 8003d14:	701a      	strb	r2, [r3, #0]
      break;
 8003d16:	e00d      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	332a      	adds	r3, #42	@ 0x2a
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
      break;
 8003d2c:	e002      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003d32:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	332c      	adds	r3, #44	@ 0x2c
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	8b39      	ldrh	r1, [r7, #24]
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4403      	add	r3, r0
 8003d58:	3334      	adds	r3, #52	@ 0x34
 8003d5a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	334c      	adds	r3, #76	@ 0x4c
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3338      	adds	r3, #56	@ 0x38
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	3315      	adds	r3, #21
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	334d      	adds	r3, #77	@ 0x4d
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	3310      	adds	r3, #16
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	1d19      	adds	r1, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	799b      	ldrb	r3, [r3, #6]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f003 fe16 	bl	80079f8 <USB_HC_StartXfer>
 8003dcc:	4603      	mov	r3, r0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop

08003dd8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f003 fb04 	bl	80073fc <USB_GetMode>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	f040 80fb 	bne.w	8003ff2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f003 fac7 	bl	8007394 <USB_ReadInterrupts>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80f1 	beq.w	8003ff0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 fabe 	bl	8007394 <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e22:	d104      	bne.n	8003e2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003e2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f003 faae 	bl	8007394 <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e42:	d104      	bne.n	8003e4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f003 fa9e 	bl	8007394 <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e62:	d104      	bne.n	8003e6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 fa8e 	bl	8007394 <USB_ReadInterrupts>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d103      	bne.n	8003e8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2202      	movs	r2, #2
 8003e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 fa80 	bl	8007394 <USB_ReadInterrupts>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e9e:	d120      	bne.n	8003ee2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003ea8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d113      	bne.n	8003ee2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003eba:	2110      	movs	r1, #16
 8003ebc:	6938      	ldr	r0, [r7, #16]
 8003ebe:	f003 f973 	bl	80071a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003ec2:	6938      	ldr	r0, [r7, #16]
 8003ec4:	f003 f9a2 	bl	800720c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7a5b      	ldrb	r3, [r3, #9]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d105      	bne.n	8003edc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 fb9a 	bl	8007610 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f006 fb67 	bl	800a5b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f003 fa54 	bl	8007394 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ef6:	d102      	bne.n	8003efe <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f001 fd4d 	bl	8005998 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f003 fa46 	bl	8007394 <USB_ReadInterrupts>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d106      	bne.n	8003f20 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f006 fb30 	bl	800a578 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f003 fa35 	bl	8007394 <USB_ReadInterrupts>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f34:	d139      	bne.n	8003faa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 ffd6 	bl	8007eec <USB_HC_ReadInterrupt>
 8003f40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e025      	b.n	8003f94 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d018      	beq.n	8003f8e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f72:	d106      	bne.n	8003f82 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f905 	bl	800418a <HCD_HC_IN_IRQHandler>
 8003f80:	e005      	b.n	8003f8e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 ff67 	bl	8004e5c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	795b      	ldrb	r3, [r3, #5]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d3d3      	bcc.n	8003f48 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f003 f9f0 	bl	8007394 <USB_ReadInterrupts>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d101      	bne.n	8003fc2 <HAL_HCD_IRQHandler+0x1ea>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_HCD_IRQHandler+0x1ec>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d014      	beq.n	8003ff2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0210 	bic.w	r2, r2, #16
 8003fd6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f001 fbfe 	bl	80057da <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0210 	orr.w	r2, r2, #16
 8003fec:	619a      	str	r2, [r3, #24]
 8003fee:	e000      	b.n	8003ff2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003ff0:	bf00      	nop
    }
  }
}
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_HCD_Start+0x16>
 800400a:	2302      	movs	r3, #2
 800400c:	e013      	b.n	8004036 <HAL_HCD_Start+0x3e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2101      	movs	r1, #1
 800401c:	4618      	mov	r0, r3
 800401e:	f003 fb5e 	bl	80076de <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f003 f850 	bl	80070cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_HCD_Stop+0x16>
 8004050:	2302      	movs	r3, #2
 8004052:	e00d      	b.n	8004070 <HAL_HCD_Stop+0x32>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f004 f8b1 	bl	80081c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f003 fb00 	bl	800768a <USB_ResetPort>
 800408a:	4603      	mov	r3, r0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	334c      	adds	r3, #76	@ 0x4c
 80040b0:	781b      	ldrb	r3, [r3, #0]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	3338      	adds	r3, #56	@ 0x38
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f003 fb42 	bl	800777e <USB_GetCurrentFrame>
 80040fa:	4603      	mov	r3, r0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f003 fb1d 	bl	8007750 <USB_GetHostSpeed>
 8004116:	4603      	mov	r3, r0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	331a      	adds	r3, #26
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	331b      	adds	r3, #27
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3325      	adds	r3, #37	@ 0x25
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3324      	adds	r3, #36	@ 0x24
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f003 f906 	bl	80073ba <USB_ReadChInterrupts>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d11a      	bne.n	80041ee <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c4:	461a      	mov	r2, r3
 80041c6:	2304      	movs	r3, #4
 80041c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	334d      	adds	r3, #77	@ 0x4d
 80041da:	2207      	movs	r2, #7
 80041dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f003 fe91 	bl	8007f0e <USB_HC_Halt>
 80041ec:	e09e      	b.n	800432c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 f8df 	bl	80073ba <USB_ReadChInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004206:	d11b      	bne.n	8004240 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800421a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334d      	adds	r3, #77	@ 0x4d
 800422c:	2208      	movs	r2, #8
 800422e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f003 fe68 	bl	8007f0e <USB_HC_Halt>
 800423e:	e075      	b.n	800432c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f003 f8b6 	bl	80073ba <USB_ReadChInterrupts>
 800424e:	4603      	mov	r3, r0
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d11a      	bne.n	800428e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4413      	add	r3, r2
 8004260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004264:	461a      	mov	r2, r3
 8004266:	2308      	movs	r3, #8
 8004268:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334d      	adds	r3, #77	@ 0x4d
 800427a:	2206      	movs	r2, #6
 800427c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f003 fe41 	bl	8007f0e <USB_HC_Halt>
 800428c:	e04e      	b.n	800432c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f003 f88f 	bl	80073ba <USB_ReadChInterrupts>
 800429c:	4603      	mov	r3, r0
 800429e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a6:	d11b      	bne.n	80042e0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b4:	461a      	mov	r2, r3
 80042b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	@ 0x4d
 80042cc:	2209      	movs	r2, #9
 80042ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f003 fe18 	bl	8007f0e <USB_HC_Halt>
 80042de:	e025      	b.n	800432c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 f866 	bl	80073ba <USB_ReadChInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f4:	2b80      	cmp	r3, #128	@ 0x80
 80042f6:	d119      	bne.n	800432c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004304:	461a      	mov	r2, r3
 8004306:	2380      	movs	r3, #128	@ 0x80
 8004308:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	334d      	adds	r3, #77	@ 0x4d
 800431a:	2207      	movs	r2, #7
 800431c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f003 fdf1 	bl	8007f0e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f003 f840 	bl	80073ba <USB_ReadChInterrupts>
 800433a:	4603      	mov	r3, r0
 800433c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004344:	d112      	bne.n	800436c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f003 fddd 	bl	8007f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004360:	461a      	mov	r2, r3
 8004362:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004366:	6093      	str	r3, [r2, #8]
 8004368:	f000 bd75 	b.w	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f003 f820 	bl	80073ba <USB_ReadChInterrupts>
 800437a:	4603      	mov	r3, r0
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	f040 8128 	bne.w	80045d6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	2320      	movs	r3, #32
 8004396:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	331b      	adds	r3, #27
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d119      	bne.n	80043e2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	331b      	adds	r3, #27
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	0151      	lsls	r1, r2, #5
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	440a      	add	r2, r1
 80043d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	799b      	ldrb	r3, [r3, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01b      	beq.n	8004422 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	3330      	adds	r3, #48	@ 0x30
 80043fa:	6819      	ldr	r1, [r3, #0]
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4413      	add	r3, r2
 8004404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	1ac9      	subs	r1, r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4403      	add	r3, r0
 800441e:	3338      	adds	r3, #56	@ 0x38
 8004420:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	334d      	adds	r3, #77	@ 0x4d
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3344      	adds	r3, #68	@ 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004456:	461a      	mov	r2, r3
 8004458:	2301      	movs	r3, #1
 800445a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	3326      	adds	r3, #38	@ 0x26
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	3326      	adds	r3, #38	@ 0x26
 8004482:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004484:	2b02      	cmp	r3, #2
 8004486:	d110      	bne.n	80044aa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f003 fd3c 	bl	8007f0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a2:	461a      	mov	r2, r3
 80044a4:	2310      	movs	r3, #16
 80044a6:	6093      	str	r3, [r2, #8]
 80044a8:	e03d      	b.n	8004526 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	3326      	adds	r3, #38	@ 0x26
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d00a      	beq.n	80044d6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	3326      	adds	r3, #38	@ 0x26
 80044d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d127      	bne.n	8004526 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	0151      	lsls	r1, r2, #5
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	440a      	add	r2, r1
 80044ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044f4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	334c      	adds	r3, #76	@ 0x4c
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	334c      	adds	r3, #76	@ 0x4c
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f006 f853 	bl	800a5cc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	799b      	ldrb	r3, [r3, #6]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d13b      	bne.n	80045a6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3338      	adds	r3, #56	@ 0x38
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4403      	add	r3, r0
 800454e:	3328      	adds	r3, #40	@ 0x28
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	440b      	add	r3, r1
 8004554:	1e59      	subs	r1, r3, #1
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4403      	add	r3, r0
 8004564:	3328      	adds	r3, #40	@ 0x28
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	fbb1 f3f3 	udiv	r3, r1, r3
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8470 	beq.w	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	333c      	adds	r3, #60	@ 0x3c
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	f083 0301 	eor.w	r3, r3, #1
 800458e:	b2d8      	uxtb	r0, r3
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	333c      	adds	r3, #60	@ 0x3c
 800459e:	4602      	mov	r2, r0
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	f000 bc58 	b.w	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	333c      	adds	r3, #60	@ 0x3c
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	f083 0301 	eor.w	r3, r3, #1
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	333c      	adds	r3, #60	@ 0x3c
 80045ce:	4602      	mov	r2, r0
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	f000 bc40 	b.w	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f002 feeb 	bl	80073ba <USB_ReadChInterrupts>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d131      	bne.n	8004652 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fa:	461a      	mov	r2, r3
 80045fc:	2320      	movs	r3, #32
 80045fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	331a      	adds	r3, #26
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	f040 841f 	bne.w	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	331b      	adds	r3, #27
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	334d      	adds	r3, #77	@ 0x4d
 800463c:	2203      	movs	r2, #3
 800463e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f003 fc60 	bl	8007f0e <USB_HC_Halt>
 800464e:	f000 bc02 	b.w	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f002 fead 	bl	80073ba <USB_ReadChInterrupts>
 8004660:	4603      	mov	r3, r0
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	f040 8305 	bne.w	8004c76 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004678:	461a      	mov	r2, r3
 800467a:	2302      	movs	r3, #2
 800467c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	334d      	adds	r3, #77	@ 0x4d
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d114      	bne.n	80046be <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	334d      	adds	r3, #77	@ 0x4d
 80046a4:	2202      	movs	r2, #2
 80046a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80046a8:	78fa      	ldrb	r2, [r7, #3]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	334c      	adds	r3, #76	@ 0x4c
 80046b8:	2201      	movs	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	e2cc      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	334d      	adds	r3, #77	@ 0x4d
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d114      	bne.n	80046fe <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	334d      	adds	r3, #77	@ 0x4d
 80046e4:	2202      	movs	r2, #2
 80046e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	334c      	adds	r3, #76	@ 0x4c
 80046f8:	2205      	movs	r2, #5
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e2ac      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	334d      	adds	r3, #77	@ 0x4d
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b07      	cmp	r3, #7
 8004712:	d00b      	beq.n	800472c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	334d      	adds	r3, #77	@ 0x4d
 8004724:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004726:	2b09      	cmp	r3, #9
 8004728:	f040 80a6 	bne.w	8004878 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	334d      	adds	r3, #77	@ 0x4d
 800473c:	2202      	movs	r2, #2
 800473e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3344      	adds	r3, #68	@ 0x44
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4403      	add	r3, r0
 8004760:	3344      	adds	r3, #68	@ 0x44
 8004762:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3344      	adds	r3, #68	@ 0x44
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d943      	bls.n	8004802 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3344      	adds	r3, #68	@ 0x44
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	331a      	adds	r3, #26
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d123      	bne.n	80047ec <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	331b      	adds	r3, #27
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	331c      	adds	r3, #28
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ea:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	334c      	adds	r3, #76	@ 0x4c
 80047fc:	2204      	movs	r2, #4
 80047fe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004800:	e229      	b.n	8004c56 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	334c      	adds	r3, #76	@ 0x4c
 8004812:	2202      	movs	r2, #2
 8004814:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	3326      	adds	r3, #38	@ 0x26
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	3326      	adds	r3, #38	@ 0x26
 800483c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800483e:	2b02      	cmp	r3, #2
 8004840:	f040 8209 	bne.w	8004c56 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800485a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004862:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004870:	461a      	mov	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004876:	e1ee      	b.n	8004c56 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	334d      	adds	r3, #77	@ 0x4d
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b05      	cmp	r3, #5
 800488c:	f040 80c8 	bne.w	8004a20 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	334d      	adds	r3, #77	@ 0x4d
 80048a0:	2202      	movs	r2, #2
 80048a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	331b      	adds	r3, #27
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	f040 81ce 	bne.w	8004c58 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3326      	adds	r3, #38	@ 0x26
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d16b      	bne.n	80049aa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3348      	adds	r3, #72	@ 0x48
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	1c59      	adds	r1, r3, #1
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4403      	add	r3, r0
 80048f2:	3348      	adds	r3, #72	@ 0x48
 80048f4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	3348      	adds	r3, #72	@ 0x48
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d943      	bls.n	8004994 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	3348      	adds	r3, #72	@ 0x48
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	331b      	adds	r3, #27
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	3344      	adds	r3, #68	@ 0x44
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d809      	bhi.n	800495e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	331c      	adds	r3, #28
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4413      	add	r3, r2
 8004966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	440a      	add	r2, r1
 8004974:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800497c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	334c      	adds	r3, #76	@ 0x4c
 800498e:	2204      	movs	r2, #4
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e014      	b.n	80049be <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	334c      	adds	r3, #76	@ 0x4c
 80049a4:	2202      	movs	r2, #2
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e009      	b.n	80049be <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	334c      	adds	r3, #76	@ 0x4c
 80049ba:	2202      	movs	r2, #2
 80049bc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	3326      	adds	r3, #38	@ 0x26
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	3326      	adds	r3, #38	@ 0x26
 80049e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	f040 8136 	bne.w	8004c58 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a02:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a0a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e11b      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	334d      	adds	r3, #77	@ 0x4d
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	f040 8081 	bne.w	8004b3a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	334d      	adds	r3, #77	@ 0x4d
 8004a48:	2202      	movs	r2, #2
 8004a4a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	331b      	adds	r3, #27
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	f040 80fa 	bne.w	8004c58 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	334c      	adds	r3, #76	@ 0x4c
 8004a74:	2202      	movs	r2, #2
 8004a76:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	78fa      	ldrb	r2, [r7, #3]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a96:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ad2:	f023 0320 	bic.w	r3, r3, #32
 8004ad6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3326      	adds	r3, #38	@ 0x26
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00b      	beq.n	8004b06 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	3326      	adds	r3, #38	@ 0x26
 8004afe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	f040 80a9 	bne.w	8004c58 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b1c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b24:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e08e      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	334d      	adds	r3, #77	@ 0x4d
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d143      	bne.n	8004bd8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	334d      	adds	r3, #77	@ 0x4d
 8004b60:	2202      	movs	r2, #2
 8004b62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b64:	78fa      	ldrb	r2, [r7, #3]
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	334c      	adds	r3, #76	@ 0x4c
 8004b74:	2202      	movs	r2, #2
 8004b76:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	3326      	adds	r3, #38	@ 0x26
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3326      	adds	r3, #38	@ 0x26
 8004b9e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d159      	bne.n	8004c58 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bc2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	e03f      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	334d      	adds	r3, #77	@ 0x4d
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d126      	bne.n	8004c3c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	334d      	adds	r3, #77	@ 0x4d
 8004bfe:	2202      	movs	r2, #2
 8004c00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	3344      	adds	r3, #68	@ 0x44
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	1c59      	adds	r1, r3, #1
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4403      	add	r3, r0
 8004c22:	3344      	adds	r3, #68	@ 0x44
 8004c24:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	334c      	adds	r3, #76	@ 0x4c
 8004c36:	2204      	movs	r2, #4
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	e00d      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	334d      	adds	r3, #77	@ 0x4d
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	f000 8100 	beq.w	8004e54 <HCD_HC_IN_IRQHandler+0xcca>
 8004c54:	e000      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c56:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	334c      	adds	r3, #76	@ 0x4c
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f005 fcac 	bl	800a5cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c74:	e0ef      	b.n	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f002 fb9b 	bl	80073ba <USB_ReadChInterrupts>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8a:	2b40      	cmp	r3, #64	@ 0x40
 8004c8c:	d12f      	bne.n	8004cee <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2340      	movs	r3, #64	@ 0x40
 8004c9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	334d      	adds	r3, #77	@ 0x4d
 8004cb0:	2205      	movs	r2, #5
 8004cb2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	331a      	adds	r3, #26
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3344      	adds	r3, #68	@ 0x44
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f003 f911 	bl	8007f0e <USB_HC_Halt>
 8004cec:	e0b3      	b.n	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f002 fb5f 	bl	80073ba <USB_ReadChInterrupts>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b10      	cmp	r3, #16
 8004d04:	f040 80a7 	bne.w	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	3326      	adds	r3, #38	@ 0x26
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d11b      	bne.n	8004d56 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3344      	adds	r3, #68	@ 0x44
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	334d      	adds	r3, #77	@ 0x4d
 8004d42:	2204      	movs	r2, #4
 8004d44:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f003 f8dd 	bl	8007f0e <USB_HC_Halt>
 8004d54:	e03f      	b.n	8004dd6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3326      	adds	r3, #38	@ 0x26
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	3326      	adds	r3, #38	@ 0x26
 8004d7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d129      	bne.n	8004dd6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3344      	adds	r3, #68	@ 0x44
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	799b      	ldrb	r3, [r3, #6]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HCD_HC_IN_IRQHandler+0xc2a>
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	331b      	adds	r3, #27
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d110      	bne.n	8004dd6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	334d      	adds	r3, #77	@ 0x4d
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	4611      	mov	r1, r2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f003 f89c 	bl	8007f0e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	331b      	adds	r3, #27
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d129      	bne.n	8004e40 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	331b      	adds	r3, #27
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e1e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e3a:	f043 0320 	orr.w	r3, r3, #32
 8004e3e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2310      	movs	r3, #16
 8004e50:	6093      	str	r3, [r2, #8]
 8004e52:	e000      	b.n	8004e56 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004e54:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f002 fa9d 	bl	80073ba <USB_ReadChInterrupts>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d11b      	bne.n	8004ec2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e96:	461a      	mov	r2, r3
 8004e98:	2304      	movs	r3, #4
 8004e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	334d      	adds	r3, #77	@ 0x4d
 8004eac:	2207      	movs	r2, #7
 8004eae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f003 f828 	bl	8007f0e <USB_HC_Halt>
 8004ebe:	f000 bc89 	b.w	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f002 fa75 	bl	80073ba <USB_ReadChInterrupts>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	f040 8082 	bne.w	8004fe0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2320      	movs	r3, #32
 8004eec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	3319      	adds	r3, #25
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d124      	bne.n	8004f4e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	3319      	adds	r3, #25
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f18:	78fa      	ldrb	r2, [r7, #3]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	334c      	adds	r3, #76	@ 0x4c
 8004f28:	2202      	movs	r2, #2
 8004f2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	334d      	adds	r3, #77	@ 0x4d
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f002 ffe0 	bl	8007f0e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	331a      	adds	r3, #26
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	f040 8437 	bne.w	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	331b      	adds	r3, #27
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f040 842b 	bne.w	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3326      	adds	r3, #38	@ 0x26
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d009      	beq.n	8004fa8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	331b      	adds	r3, #27
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	334d      	adds	r3, #77	@ 0x4d
 8004fb8:	2203      	movs	r2, #3
 8004fba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f002 ffa2 	bl	8007f0e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3344      	adds	r3, #68	@ 0x44
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e3f9      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 f9e6 	bl	80073ba <USB_ReadChInterrupts>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff8:	d111      	bne.n	800501e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005006:	461a      	mov	r2, r3
 8005008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800500c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	78fa      	ldrb	r2, [r7, #3]
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f002 ff79 	bl	8007f0e <USB_HC_Halt>
 800501c:	e3da      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f002 f9c7 	bl	80073ba <USB_ReadChInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d168      	bne.n	8005108 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005036:	78fa      	ldrb	r2, [r7, #3]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3344      	adds	r3, #68	@ 0x44
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f002 f9b1 	bl	80073ba <USB_ReadChInterrupts>
 8005058:	4603      	mov	r3, r0
 800505a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505e:	2b40      	cmp	r3, #64	@ 0x40
 8005060:	d112      	bne.n	8005088 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005062:	78fa      	ldrb	r2, [r7, #3]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	3319      	adds	r3, #25
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005082:	461a      	mov	r2, r3
 8005084:	2340      	movs	r3, #64	@ 0x40
 8005086:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	331b      	adds	r3, #27
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d019      	beq.n	80050d2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800509e:	78fa      	ldrb	r2, [r7, #3]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	331b      	adds	r3, #27
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	2301      	movs	r3, #1
 80050e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	334d      	adds	r3, #77	@ 0x4d
 80050f4:	2201      	movs	r2, #1
 80050f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f002 ff04 	bl	8007f0e <USB_HC_Halt>
 8005106:	e365      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	78fa      	ldrb	r2, [r7, #3]
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f002 f952 	bl	80073ba <USB_ReadChInterrupts>
 8005116:	4603      	mov	r3, r0
 8005118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511c:	2b40      	cmp	r3, #64	@ 0x40
 800511e:	d139      	bne.n	8005194 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	334d      	adds	r3, #77	@ 0x4d
 8005130:	2205      	movs	r2, #5
 8005132:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005134:	78fa      	ldrb	r2, [r7, #3]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	331a      	adds	r3, #26
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	3319      	adds	r3, #25
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	3344      	adds	r3, #68	@ 0x44
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f002 fec7 	bl	8007f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800518c:	461a      	mov	r2, r3
 800518e:	2340      	movs	r3, #64	@ 0x40
 8005190:	6093      	str	r3, [r2, #8]
 8005192:	e31f      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f002 f90c 	bl	80073ba <USB_ReadChInterrupts>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d11a      	bne.n	80051e2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b8:	461a      	mov	r2, r3
 80051ba:	2308      	movs	r3, #8
 80051bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	334d      	adds	r3, #77	@ 0x4d
 80051ce:	2206      	movs	r2, #6
 80051d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	4611      	mov	r1, r2
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 fe97 	bl	8007f0e <USB_HC_Halt>
 80051e0:	e2f8      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 f8e5 	bl	80073ba <USB_ReadChInterrupts>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d144      	bne.n	8005284 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3344      	adds	r3, #68	@ 0x44
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	334d      	adds	r3, #77	@ 0x4d
 800521e:	2204      	movs	r2, #4
 8005220:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3319      	adds	r3, #25
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d114      	bne.n	8005262 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	3318      	adds	r3, #24
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3319      	adds	r3, #25
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	4611      	mov	r1, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f002 fe4f 	bl	8007f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527c:	461a      	mov	r2, r3
 800527e:	2310      	movs	r3, #16
 8005280:	6093      	str	r3, [r2, #8]
 8005282:	e2a7      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	4611      	mov	r1, r2
 800528c:	4618      	mov	r0, r3
 800528e:	f002 f894 	bl	80073ba <USB_ReadChInterrupts>
 8005292:	4603      	mov	r3, r0
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b80      	cmp	r3, #128	@ 0x80
 800529a:	f040 8083 	bne.w	80053a4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	799b      	ldrb	r3, [r3, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d111      	bne.n	80052ca <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	334d      	adds	r3, #77	@ 0x4d
 80052b6:	2207      	movs	r2, #7
 80052b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	78fa      	ldrb	r2, [r7, #3]
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f002 fe23 	bl	8007f0e <USB_HC_Halt>
 80052c8:	e062      	b.n	8005390 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	3344      	adds	r3, #68	@ 0x44
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1c59      	adds	r1, r3, #1
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4403      	add	r3, r0
 80052ea:	3344      	adds	r3, #68	@ 0x44
 80052ec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	3344      	adds	r3, #68	@ 0x44
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d922      	bls.n	800534a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	3344      	adds	r3, #68	@ 0x44
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	334c      	adds	r3, #76	@ 0x4c
 8005328:	2204      	movs	r2, #4
 800532a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	334c      	adds	r3, #76	@ 0x4c
 800533c:	781a      	ldrb	r2, [r3, #0]
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f005 f942 	bl	800a5cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005348:	e022      	b.n	8005390 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	334c      	adds	r3, #76	@ 0x4c
 800535a:	2202      	movs	r2, #2
 800535c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005374:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800537c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800538a:	461a      	mov	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800539c:	461a      	mov	r2, r3
 800539e:	2380      	movs	r3, #128	@ 0x80
 80053a0:	6093      	str	r3, [r2, #8]
 80053a2:	e217      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f002 f804 	bl	80073ba <USB_ReadChInterrupts>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053bc:	d11b      	bne.n	80053f6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	334d      	adds	r3, #77	@ 0x4d
 80053ce:	2209      	movs	r2, #9
 80053d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	4611      	mov	r1, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f002 fd97 	bl	8007f0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ec:	461a      	mov	r2, r3
 80053ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053f2:	6093      	str	r3, [r2, #8]
 80053f4:	e1ee      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 ffdb 	bl	80073ba <USB_ReadChInterrupts>
 8005404:	4603      	mov	r3, r0
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b02      	cmp	r3, #2
 800540c:	f040 81df 	bne.w	80057ce <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800541c:	461a      	mov	r2, r3
 800541e:	2302      	movs	r3, #2
 8005420:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	334d      	adds	r3, #77	@ 0x4d
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	f040 8093 	bne.w	8005560 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	334d      	adds	r3, #77	@ 0x4d
 800544a:	2202      	movs	r2, #2
 800544c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	334c      	adds	r3, #76	@ 0x4c
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005462:	78fa      	ldrb	r2, [r7, #3]
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	3326      	adds	r3, #38	@ 0x26
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d00b      	beq.n	8005490 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	3326      	adds	r3, #38	@ 0x26
 8005488:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800548a:	2b03      	cmp	r3, #3
 800548c:	f040 8190 	bne.w	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	799b      	ldrb	r3, [r3, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d115      	bne.n	80054c4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	333d      	adds	r3, #61	@ 0x3d
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	f083 0301 	eor.w	r3, r3, #1
 80054b0:	b2d8      	uxtb	r0, r3
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	4613      	mov	r3, r2
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	1a9b      	subs	r3, r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	333d      	adds	r3, #61	@ 0x3d
 80054c0:	4602      	mov	r2, r0
 80054c2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	799b      	ldrb	r3, [r3, #6]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	f040 8171 	bne.w	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3334      	adds	r3, #52	@ 0x34
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8165 	beq.w	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3334      	adds	r3, #52	@ 0x34
 80054f6:	6819      	ldr	r1, [r3, #0]
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4403      	add	r3, r0
 8005506:	3328      	adds	r3, #40	@ 0x28
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	440b      	add	r3, r1
 800550c:	1e59      	subs	r1, r3, #1
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4403      	add	r3, r0
 800551c:	3328      	adds	r3, #40	@ 0x28
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	fbb1 f3f3 	udiv	r3, r1, r3
 8005524:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 813f 	beq.w	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	333d      	adds	r3, #61	@ 0x3d
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	f083 0301 	eor.w	r3, r3, #1
 800554a:	b2d8      	uxtb	r0, r3
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	333d      	adds	r3, #61	@ 0x3d
 800555a:	4602      	mov	r2, r0
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e127      	b.n	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	334d      	adds	r3, #77	@ 0x4d
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d120      	bne.n	80055b8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	334d      	adds	r3, #77	@ 0x4d
 8005586:	2202      	movs	r2, #2
 8005588:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	331b      	adds	r3, #27
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	f040 8107 	bne.w	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	334c      	adds	r3, #76	@ 0x4c
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e0fb      	b.n	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	334d      	adds	r3, #77	@ 0x4d
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d13a      	bne.n	8005644 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	334d      	adds	r3, #77	@ 0x4d
 80055de:	2202      	movs	r2, #2
 80055e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	334c      	adds	r3, #76	@ 0x4c
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80055f6:	78fa      	ldrb	r2, [r7, #3]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	331b      	adds	r3, #27
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	f040 80d1 	bne.w	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	1a9b      	subs	r3, r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	331b      	adds	r3, #27
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	440a      	add	r2, r1
 8005638:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800563c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005640:	6053      	str	r3, [r2, #4]
 8005642:	e0b5      	b.n	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	334d      	adds	r3, #77	@ 0x4d
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b05      	cmp	r3, #5
 8005658:	d114      	bne.n	8005684 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	334d      	adds	r3, #77	@ 0x4d
 800566a:	2202      	movs	r2, #2
 800566c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	334c      	adds	r3, #76	@ 0x4c
 800567e:	2202      	movs	r2, #2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e095      	b.n	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005684:	78fa      	ldrb	r2, [r7, #3]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	334d      	adds	r3, #77	@ 0x4d
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b06      	cmp	r3, #6
 8005698:	d114      	bne.n	80056c4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	334d      	adds	r3, #77	@ 0x4d
 80056aa:	2202      	movs	r2, #2
 80056ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	334c      	adds	r3, #76	@ 0x4c
 80056be:	2205      	movs	r2, #5
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e075      	b.n	80057b0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	334d      	adds	r3, #77	@ 0x4d
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b07      	cmp	r3, #7
 80056d8:	d00a      	beq.n	80056f0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80056da:	78fa      	ldrb	r2, [r7, #3]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	334d      	adds	r3, #77	@ 0x4d
 80056ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056ec:	2b09      	cmp	r3, #9
 80056ee:	d170      	bne.n	80057d2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056f0:	78fa      	ldrb	r2, [r7, #3]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	334d      	adds	r3, #77	@ 0x4d
 8005700:	2202      	movs	r2, #2
 8005702:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005704:	78fa      	ldrb	r2, [r7, #3]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	3344      	adds	r3, #68	@ 0x44
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	1a9b      	subs	r3, r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4403      	add	r3, r0
 8005724:	3344      	adds	r3, #68	@ 0x44
 8005726:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	3344      	adds	r3, #68	@ 0x44
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d914      	bls.n	8005768 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	3344      	adds	r3, #68	@ 0x44
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	334c      	adds	r3, #76	@ 0x4c
 8005762:	2204      	movs	r2, #4
 8005764:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005766:	e022      	b.n	80057ae <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	334c      	adds	r3, #76	@ 0x4c
 8005778:	2202      	movs	r2, #2
 800577a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005792:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800579a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a8:	461a      	mov	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057ae:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	334c      	adds	r3, #76	@ 0x4c
 80057c0:	781a      	ldrb	r2, [r3, #0]
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f004 ff00 	bl	800a5cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80057cc:	e002      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80057d2:	bf00      	nop
  }
}
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08a      	sub	sp, #40	@ 0x28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	0c5b      	lsrs	r3, r3, #17
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800580e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d004      	beq.n	8005820 <HCD_RXQLVL_IRQHandler+0x46>
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b05      	cmp	r3, #5
 800581a:	f000 80b6 	beq.w	800598a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800581e:	e0b7      	b.n	8005990 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80b3 	beq.w	800598e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	332c      	adds	r3, #44	@ 0x2c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80a7 	beq.w	800598e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	3338      	adds	r3, #56	@ 0x38
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	18d1      	adds	r1, r2, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4403      	add	r3, r0
 8005864:	3334      	adds	r3, #52	@ 0x34
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4299      	cmp	r1, r3
 800586a:	f200 8083 	bhi.w	8005974 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	332c      	adds	r3, #44	@ 0x2c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	b292      	uxth	r2, r2
 8005888:	4619      	mov	r1, r3
 800588a:	f001 fd2b 	bl	80072e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	332c      	adds	r3, #44	@ 0x2c
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	18d1      	adds	r1, r2, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4613      	mov	r3, r2
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4403      	add	r3, r0
 80058b2:	332c      	adds	r3, #44	@ 0x2c
 80058b4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4613      	mov	r3, r2
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	1a9b      	subs	r3, r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	3338      	adds	r3, #56	@ 0x38
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	18d1      	adds	r1, r2, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4613      	mov	r3, r2
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4403      	add	r3, r0
 80058da:	3338      	adds	r3, #56	@ 0x38
 80058dc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	0cdb      	lsrs	r3, r3, #19
 80058ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4613      	mov	r3, r2
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	3328      	adds	r3, #40	@ 0x28
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4293      	cmp	r3, r2
 800590c:	d13f      	bne.n	800598e <HCD_RXQLVL_IRQHandler+0x1b4>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d03c      	beq.n	800598e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800592a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005932:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005940:	461a      	mov	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4613      	mov	r3, r2
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	333c      	adds	r3, #60	@ 0x3c
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f083 0301 	eor.w	r3, r3, #1
 800595c:	b2d8      	uxtb	r0, r3
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4613      	mov	r3, r2
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	333c      	adds	r3, #60	@ 0x3c
 800596e:	4602      	mov	r2, r0
 8005970:	701a      	strb	r2, [r3, #0]
      break;
 8005972:	e00c      	b.n	800598e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4613      	mov	r3, r2
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	334c      	adds	r3, #76	@ 0x4c
 8005984:	2204      	movs	r2, #4
 8005986:	701a      	strb	r2, [r3, #0]
      break;
 8005988:	e001      	b.n	800598e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800598a:	bf00      	nop
 800598c:	e000      	b.n	8005990 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800598e:	bf00      	nop
  }
}
 8005990:	bf00      	nop
 8005992:	3728      	adds	r7, #40	@ 0x28
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80059c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d10b      	bne.n	80059e8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d102      	bne.n	80059e0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f004 fdda 	bl	800a594 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f043 0302 	orr.w	r3, r3, #2
 80059e6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d132      	bne.n	8005a58 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f043 0308 	orr.w	r3, r3, #8
 80059f8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d126      	bne.n	8005a52 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	7a5b      	ldrb	r3, [r3, #9]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d113      	bne.n	8005a34 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005a12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a16:	d106      	bne.n	8005a26 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 fdf6 	bl	8007610 <USB_InitFSLSPClkSel>
 8005a24:	e011      	b.n	8005a4a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fdef 	bl	8007610 <USB_InitFSLSPClkSel>
 8005a32:	e00a      	b.n	8005a4a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	79db      	ldrb	r3, [r3, #7]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d106      	bne.n	8005a4a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a42:	461a      	mov	r2, r3
 8005a44:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005a48:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f004 fdcc 	bl	800a5e8 <HAL_HCD_PortEnabled_Callback>
 8005a50:	e002      	b.n	8005a58 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f004 fdd6 	bl	800a604 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d103      	bne.n	8005a6a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f043 0320 	orr.w	r3, r3, #32
 8005a68:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a70:	461a      	mov	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6013      	str	r3, [r2, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e12b      	b.n	8005cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fb ff2e 	bl	8001908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2224      	movs	r2, #36	@ 0x24
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ae4:	f000 fd80 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 8005ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4a81      	ldr	r2, [pc, #516]	@ (8005cf4 <HAL_I2C_Init+0x274>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d807      	bhi.n	8005b04 <HAL_I2C_Init+0x84>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a80      	ldr	r2, [pc, #512]	@ (8005cf8 <HAL_I2C_Init+0x278>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	bf94      	ite	ls
 8005afc:	2301      	movls	r3, #1
 8005afe:	2300      	movhi	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e006      	b.n	8005b12 <HAL_I2C_Init+0x92>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a7d      	ldr	r2, [pc, #500]	@ (8005cfc <HAL_I2C_Init+0x27c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	bf94      	ite	ls
 8005b0c:	2301      	movls	r3, #1
 8005b0e:	2300      	movhi	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e0e7      	b.n	8005cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a78      	ldr	r2, [pc, #480]	@ (8005d00 <HAL_I2C_Init+0x280>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	0c9b      	lsrs	r3, r3, #18
 8005b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a6a      	ldr	r2, [pc, #424]	@ (8005cf4 <HAL_I2C_Init+0x274>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d802      	bhi.n	8005b54 <HAL_I2C_Init+0xd4>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3301      	adds	r3, #1
 8005b52:	e009      	b.n	8005b68 <HAL_I2C_Init+0xe8>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	4a69      	ldr	r2, [pc, #420]	@ (8005d04 <HAL_I2C_Init+0x284>)
 8005b60:	fba2 2303 	umull	r2, r3, r2, r3
 8005b64:	099b      	lsrs	r3, r3, #6
 8005b66:	3301      	adds	r3, #1
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	495c      	ldr	r1, [pc, #368]	@ (8005cf4 <HAL_I2C_Init+0x274>)
 8005b84:	428b      	cmp	r3, r1
 8005b86:	d819      	bhi.n	8005bbc <HAL_I2C_Init+0x13c>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1e59      	subs	r1, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b96:	1c59      	adds	r1, r3, #1
 8005b98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b9c:	400b      	ands	r3, r1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_I2C_Init+0x138>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1e59      	subs	r1, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb6:	e051      	b.n	8005c5c <HAL_I2C_Init+0x1dc>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	e04f      	b.n	8005c5c <HAL_I2C_Init+0x1dc>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d111      	bne.n	8005be8 <HAL_I2C_Init+0x168>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1e58      	subs	r0, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6859      	ldr	r1, [r3, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	440b      	add	r3, r1
 8005bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e012      	b.n	8005c0e <HAL_I2C_Init+0x18e>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1e58      	subs	r0, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	0099      	lsls	r1, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bf0c      	ite	eq
 8005c08:	2301      	moveq	r3, #1
 8005c0a:	2300      	movne	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_I2C_Init+0x196>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e022      	b.n	8005c5c <HAL_I2C_Init+0x1dc>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10e      	bne.n	8005c3c <HAL_I2C_Init+0x1bc>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1e58      	subs	r0, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6859      	ldr	r1, [r3, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	440b      	add	r3, r1
 8005c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c30:	3301      	adds	r3, #1
 8005c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c3a:	e00f      	b.n	8005c5c <HAL_I2C_Init+0x1dc>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1e58      	subs	r0, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6859      	ldr	r1, [r3, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	0099      	lsls	r1, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	6809      	ldr	r1, [r1, #0]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69da      	ldr	r2, [r3, #28]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6911      	ldr	r1, [r2, #16]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68d2      	ldr	r2, [r2, #12]
 8005c96:	4311      	orrs	r1, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	000186a0 	.word	0x000186a0
 8005cf8:	001e847f 	.word	0x001e847f
 8005cfc:	003d08ff 	.word	0x003d08ff
 8005d00:	431bde83 	.word	0x431bde83
 8005d04:	10624dd3 	.word	0x10624dd3

08005d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e267      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d075      	beq.n	8005e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d26:	4b88      	ldr	r3, [pc, #544]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d00c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d32:	4b85      	ldr	r3, [pc, #532]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d112      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d3e:	4b82      	ldr	r3, [pc, #520]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05b      	beq.n	8005e10 <HAL_RCC_OscConfig+0x108>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d157      	bne.n	8005e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e242      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x74>
 8005d6e:	4b76      	ldr	r3, [pc, #472]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a75      	ldr	r2, [pc, #468]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x98>
 8005d86:	4b70      	ldr	r3, [pc, #448]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b6d      	ldr	r3, [pc, #436]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6c      	ldr	r2, [pc, #432]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005da0:	4b69      	ldr	r3, [pc, #420]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a68      	ldr	r2, [pc, #416]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b66      	ldr	r3, [pc, #408]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a65      	ldr	r2, [pc, #404]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fb ff8e 	bl	8001ce0 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fb ff8a 	bl	8001ce0 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	@ 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e207      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b5b      	ldr	r3, [pc, #364]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xc0>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de8:	f7fb ff7a 	bl	8001ce0 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fb ff76 	bl	8001ce0 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	@ 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1f3      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e02:	4b51      	ldr	r3, [pc, #324]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0xe8>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d063      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2a:	4b47      	ldr	r3, [pc, #284]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d11c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e36:	4b44      	ldr	r3, [pc, #272]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d116      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e42:	4b41      	ldr	r3, [pc, #260]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e1c7      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4937      	ldr	r1, [pc, #220]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6e:	e03a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e78:	4b34      	ldr	r3, [pc, #208]	@ (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fb ff2f 	bl	8001ce0 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e86:	f7fb ff2b 	bl	8001ce0 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e1a8      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e98:	4b2b      	ldr	r3, [pc, #172]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea4:	4b28      	ldr	r3, [pc, #160]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4925      	ldr	r1, [pc, #148]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	600b      	str	r3, [r1, #0]
 8005eb8:	e015      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eba:	4b24      	ldr	r3, [pc, #144]	@ (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fb ff0e 	bl	8001ce0 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec8:	f7fb ff0a 	bl	8001ce0 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e187      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eda:	4b1b      	ldr	r3, [pc, #108]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d036      	beq.n	8005f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efa:	4b15      	ldr	r3, [pc, #84]	@ (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fb feee 	bl	8001ce0 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f08:	f7fb feea 	bl	8001ce0 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e167      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0x200>
 8005f26:	e01b      	b.n	8005f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f28:	4b09      	ldr	r3, [pc, #36]	@ (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2e:	f7fb fed7 	bl	8001ce0 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	e00e      	b.n	8005f54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fb fed3 	bl	8001ce0 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d907      	bls.n	8005f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e150      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	42470000 	.word	0x42470000
 8005f50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	4b88      	ldr	r3, [pc, #544]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ea      	bne.n	8005f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8097 	beq.w	800609c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f72:	4b81      	ldr	r3, [pc, #516]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	4b7d      	ldr	r3, [pc, #500]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	4a7c      	ldr	r2, [pc, #496]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b77      	ldr	r3, [pc, #476]	@ (800617c <HAL_RCC_OscConfig+0x474>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d118      	bne.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005faa:	4b74      	ldr	r3, [pc, #464]	@ (800617c <HAL_RCC_OscConfig+0x474>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a73      	ldr	r2, [pc, #460]	@ (800617c <HAL_RCC_OscConfig+0x474>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb6:	f7fb fe93 	bl	8001ce0 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbe:	f7fb fe8f 	bl	8001ce0 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e10c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800617c <HAL_RCC_OscConfig+0x474>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x2ea>
 8005fe4:	4b64      	ldr	r3, [pc, #400]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe8:	4a63      	ldr	r2, [pc, #396]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ff0:	e01c      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x30c>
 8005ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006000:	f043 0304 	orr.w	r3, r3, #4
 8006004:	6713      	str	r3, [r2, #112]	@ 0x70
 8006006:	4b5c      	ldr	r3, [pc, #368]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600a:	4a5b      	ldr	r2, [pc, #364]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6713      	str	r3, [r2, #112]	@ 0x70
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8006014:	4b58      	ldr	r3, [pc, #352]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006018:	4a57      	ldr	r2, [pc, #348]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006020:	4b55      	ldr	r3, [pc, #340]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006024:	4a54      	ldr	r2, [pc, #336]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006026:	f023 0304 	bic.w	r3, r3, #4
 800602a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006034:	f7fb fe54 	bl	8001ce0 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603c:	f7fb fe50 	bl	8001ce0 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e0cb      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006052:	4b49      	ldr	r3, [pc, #292]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ee      	beq.n	800603c <HAL_RCC_OscConfig+0x334>
 800605e:	e014      	b.n	800608a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006060:	f7fb fe3e 	bl	8001ce0 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006066:	e00a      	b.n	800607e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fb fe3a 	bl	8001ce0 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0b5      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607e:	4b3e      	ldr	r3, [pc, #248]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1ee      	bne.n	8006068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006090:	4b39      	ldr	r3, [pc, #228]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006094:	4a38      	ldr	r2, [pc, #224]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800609a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80a1 	beq.w	80061e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060a6:	4b34      	ldr	r3, [pc, #208]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d05c      	beq.n	800616c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d141      	bne.n	800613e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ba:	4b31      	ldr	r3, [pc, #196]	@ (8006180 <HAL_RCC_OscConfig+0x478>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7fb fe0e 	bl	8001ce0 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c8:	f7fb fe0a 	bl	8001ce0 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e087      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	4b27      	ldr	r3, [pc, #156]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	019b      	lsls	r3, r3, #6
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	3b01      	subs	r3, #1
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	061b      	lsls	r3, r3, #24
 800610a:	491b      	ldr	r1, [pc, #108]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006110:	4b1b      	ldr	r3, [pc, #108]	@ (8006180 <HAL_RCC_OscConfig+0x478>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006116:	f7fb fde3 	bl	8001ce0 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800611e:	f7fb fddf 	bl	8001ce0 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e05c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x416>
 800613c:	e054      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613e:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <HAL_RCC_OscConfig+0x478>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7fb fdcc 	bl	8001ce0 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614c:	f7fb fdc8 	bl	8001ce0 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e045      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x444>
 800616a:	e03d      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e038      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000
 8006180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006184:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <HAL_RCC_OscConfig+0x4ec>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d028      	beq.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619c:	429a      	cmp	r2, r3
 800619e:	d121      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d11a      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061bc:	4293      	cmp	r3, r2
 80061be:	d111      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d001      	beq.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40023800 	.word	0x40023800

080061f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0cc      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800620c:	4b68      	ldr	r3, [pc, #416]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90c      	bls.n	8006234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b65      	ldr	r3, [pc, #404]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006222:	4b63      	ldr	r3, [pc, #396]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0b8      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d020      	beq.n	8006282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800624c:	4b59      	ldr	r3, [pc, #356]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a58      	ldr	r2, [pc, #352]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006264:	4b53      	ldr	r3, [pc, #332]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a52      	ldr	r2, [pc, #328]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800626e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006270:	4b50      	ldr	r3, [pc, #320]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	494d      	ldr	r1, [pc, #308]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	4313      	orrs	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d044      	beq.n	8006318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d119      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d003      	beq.n	80062b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b6:	4b3f      	ldr	r3, [pc, #252]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e06f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c6:	4b3b      	ldr	r3, [pc, #236]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e067      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062d6:	4b37      	ldr	r3, [pc, #220]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f023 0203 	bic.w	r2, r3, #3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4934      	ldr	r1, [pc, #208]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e8:	f7fb fcfa 	bl	8001ce0 <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f0:	f7fb fcf6 	bl	8001ce0 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e04f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	4b2b      	ldr	r3, [pc, #172]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 020c 	and.w	r2, r3, #12
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	429a      	cmp	r2, r3
 8006316:	d1eb      	bne.n	80062f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006318:	4b25      	ldr	r3, [pc, #148]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d20c      	bcs.n	8006340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006326:	4b22      	ldr	r3, [pc, #136]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632e:	4b20      	ldr	r3, [pc, #128]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e032      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800634c:	4b19      	ldr	r3, [pc, #100]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4916      	ldr	r1, [pc, #88]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800636a:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	490e      	ldr	r1, [pc, #56]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800637e:	f000 f821 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 8006382:	4602      	mov	r2, r0
 8006384:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	490a      	ldr	r1, [pc, #40]	@ (80063b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006390:	5ccb      	ldrb	r3, [r1, r3]
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	4a09      	ldr	r2, [pc, #36]	@ (80063bc <HAL_RCC_ClockConfig+0x1c4>)
 8006398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800639a:	4b09      	ldr	r3, [pc, #36]	@ (80063c0 <HAL_RCC_ClockConfig+0x1c8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fb fc5a 	bl	8001c58 <HAL_InitTick>

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023c00 	.word	0x40023c00
 80063b4:	40023800 	.word	0x40023800
 80063b8:	0800bd0c 	.word	0x0800bd0c
 80063bc:	20000000 	.word	0x20000000
 80063c0:	20000004 	.word	0x20000004

080063c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c8:	b094      	sub	sp, #80	@ 0x50
 80063ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063dc:	4b79      	ldr	r3, [pc, #484]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d00d      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x40>
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	f200 80e1 	bhi.w	80065b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x34>
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d003      	beq.n	80063fe <HAL_RCC_GetSysClockFreq+0x3a>
 80063f6:	e0db      	b.n	80065b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063f8:	4b73      	ldr	r3, [pc, #460]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80063fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063fc:	e0db      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063fe:	4b73      	ldr	r3, [pc, #460]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x208>)
 8006400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006402:	e0d8      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006404:	4b6f      	ldr	r3, [pc, #444]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800640c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800640e:	4b6d      	ldr	r3, [pc, #436]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d063      	beq.n	80064e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641a:	4b6a      	ldr	r3, [pc, #424]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	2200      	movs	r2, #0
 8006422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006424:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	633b      	str	r3, [r7, #48]	@ 0x30
 800642e:	2300      	movs	r3, #0
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
 8006432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006436:	4622      	mov	r2, r4
 8006438:	462b      	mov	r3, r5
 800643a:	f04f 0000 	mov.w	r0, #0
 800643e:	f04f 0100 	mov.w	r1, #0
 8006442:	0159      	lsls	r1, r3, #5
 8006444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006448:	0150      	lsls	r0, r2, #5
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4621      	mov	r1, r4
 8006450:	1a51      	subs	r1, r2, r1
 8006452:	6139      	str	r1, [r7, #16]
 8006454:	4629      	mov	r1, r5
 8006456:	eb63 0301 	sbc.w	r3, r3, r1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006468:	4659      	mov	r1, fp
 800646a:	018b      	lsls	r3, r1, #6
 800646c:	4651      	mov	r1, sl
 800646e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006472:	4651      	mov	r1, sl
 8006474:	018a      	lsls	r2, r1, #6
 8006476:	4651      	mov	r1, sl
 8006478:	ebb2 0801 	subs.w	r8, r2, r1
 800647c:	4659      	mov	r1, fp
 800647e:	eb63 0901 	sbc.w	r9, r3, r1
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800648e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006496:	4690      	mov	r8, r2
 8006498:	4699      	mov	r9, r3
 800649a:	4623      	mov	r3, r4
 800649c:	eb18 0303 	adds.w	r3, r8, r3
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	462b      	mov	r3, r5
 80064a4:	eb49 0303 	adc.w	r3, r9, r3
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064b6:	4629      	mov	r1, r5
 80064b8:	024b      	lsls	r3, r1, #9
 80064ba:	4621      	mov	r1, r4
 80064bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064c0:	4621      	mov	r1, r4
 80064c2:	024a      	lsls	r2, r1, #9
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ca:	2200      	movs	r2, #0
 80064cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064d4:	f7fa fb16 	bl	8000b04 <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4613      	mov	r3, r2
 80064de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e0:	e058      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e2:	4b38      	ldr	r3, [pc, #224]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	2200      	movs	r2, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	4611      	mov	r1, r2
 80064ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	2300      	movs	r3, #0
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	f04f 0000 	mov.w	r0, #0
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	0159      	lsls	r1, r3, #5
 800650a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800650e:	0150      	lsls	r0, r2, #5
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4641      	mov	r1, r8
 8006516:	ebb2 0a01 	subs.w	sl, r2, r1
 800651a:	4649      	mov	r1, r9
 800651c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800652c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006534:	ebb2 040a 	subs.w	r4, r2, sl
 8006538:	eb63 050b 	sbc.w	r5, r3, fp
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	00eb      	lsls	r3, r5, #3
 8006546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800654a:	00e2      	lsls	r2, r4, #3
 800654c:	4614      	mov	r4, r2
 800654e:	461d      	mov	r5, r3
 8006550:	4643      	mov	r3, r8
 8006552:	18e3      	adds	r3, r4, r3
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	464b      	mov	r3, r9
 8006558:	eb45 0303 	adc.w	r3, r5, r3
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800656a:	4629      	mov	r1, r5
 800656c:	028b      	lsls	r3, r1, #10
 800656e:	4621      	mov	r1, r4
 8006570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006574:	4621      	mov	r1, r4
 8006576:	028a      	lsls	r2, r1, #10
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657e:	2200      	movs	r2, #0
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	61fa      	str	r2, [r7, #28]
 8006584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006588:	f7fa fabc 	bl	8000b04 <__aeabi_uldivmod>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4613      	mov	r3, r2
 8006592:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006594:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	0c1b      	lsrs	r3, r3, #16
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	3301      	adds	r3, #1
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80065a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065ae:	e002      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065b0:	4b05      	ldr	r3, [pc, #20]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3750      	adds	r7, #80	@ 0x50
 80065bc:	46bd      	mov	sp, r7
 80065be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
 80065c8:	00f42400 	.word	0x00f42400
 80065cc:	007a1200 	.word	0x007a1200

080065d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065d4:	4b03      	ldr	r3, [pc, #12]	@ (80065e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000000 	.word	0x20000000

080065e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065ec:	f7ff fff0 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b05      	ldr	r3, [pc, #20]	@ (8006608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	0a9b      	lsrs	r3, r3, #10
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	4903      	ldr	r1, [pc, #12]	@ (800660c <HAL_RCC_GetPCLK1Freq+0x24>)
 80065fe:	5ccb      	ldrb	r3, [r1, r3]
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40023800 	.word	0x40023800
 800660c:	0800bd1c 	.word	0x0800bd1c

08006610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e07b      	b.n	800671a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d108      	bne.n	800663c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006632:	d009      	beq.n	8006648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	61da      	str	r2, [r3, #28]
 800663a:	e005      	b.n	8006648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fb f998 	bl	8001998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800667e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066cc:	ea42 0103 	orr.w	r1, r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	f003 0104 	and.w	r1, r3, #4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	f003 0210 	and.w	r2, r3, #16
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006708:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e041      	b.n	80067b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fb f96d 	bl	8001a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f000 fa7f 	bl	8006c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d001      	beq.n	80067d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e046      	b.n	8006866 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a23      	ldr	r2, [pc, #140]	@ (8006874 <HAL_TIM_Base_Start+0xb4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d022      	beq.n	8006830 <HAL_TIM_Base_Start+0x70>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f2:	d01d      	beq.n	8006830 <HAL_TIM_Base_Start+0x70>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006878 <HAL_TIM_Base_Start+0xb8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d018      	beq.n	8006830 <HAL_TIM_Base_Start+0x70>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1e      	ldr	r2, [pc, #120]	@ (800687c <HAL_TIM_Base_Start+0xbc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <HAL_TIM_Base_Start+0x70>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1c      	ldr	r2, [pc, #112]	@ (8006880 <HAL_TIM_Base_Start+0xc0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00e      	beq.n	8006830 <HAL_TIM_Base_Start+0x70>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a1b      	ldr	r2, [pc, #108]	@ (8006884 <HAL_TIM_Base_Start+0xc4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d009      	beq.n	8006830 <HAL_TIM_Base_Start+0x70>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a19      	ldr	r2, [pc, #100]	@ (8006888 <HAL_TIM_Base_Start+0xc8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_TIM_Base_Start+0x70>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a18      	ldr	r2, [pc, #96]	@ (800688c <HAL_TIM_Base_Start+0xcc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d111      	bne.n	8006854 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b06      	cmp	r3, #6
 8006840:	d010      	beq.n	8006864 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0201 	orr.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006852:	e007      	b.n	8006864 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40010000 	.word	0x40010000
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40010400 	.word	0x40010400
 8006888:	40014000 	.word	0x40014000
 800688c:	40001800 	.word	0x40001800

08006890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d020      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01b      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0202 	mvn.w	r2, #2
 80068c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f9a3 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 80068e0:	e005      	b.n	80068ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f995 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f9a6 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d020      	beq.n	8006940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01b      	beq.n	8006940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0204 	mvn.w	r2, #4
 8006910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f97d 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 800692c:	e005      	b.n	800693a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f96f 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f980 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d020      	beq.n	800698c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01b      	beq.n	800698c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0208 	mvn.w	r2, #8
 800695c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2204      	movs	r2, #4
 8006962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f957 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 8006978:	e005      	b.n	8006986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f949 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f95a 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b00      	cmp	r3, #0
 8006994:	d020      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01b      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0210 	mvn.w	r2, #16
 80069a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2208      	movs	r2, #8
 80069ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f931 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f923 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f934 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00c      	beq.n	80069fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0201 	mvn.w	r2, #1
 80069f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f901 	bl	8006bfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00c      	beq.n	8006a20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fae8 	bl	8006ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00c      	beq.n	8006a44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f905 	bl	8006c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00c      	beq.n	8006a68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d007      	beq.n	8006a68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0220 	mvn.w	r2, #32
 8006a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 faba 	bl	8006fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_TIM_ConfigClockSource+0x1c>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e0b4      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x186>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac4:	d03e      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0xd4>
 8006ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aca:	f200 8087 	bhi.w	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad2:	f000 8086 	beq.w	8006be2 <HAL_TIM_ConfigClockSource+0x172>
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ada:	d87f      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006adc:	2b70      	cmp	r3, #112	@ 0x70
 8006ade:	d01a      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0xa6>
 8006ae0:	2b70      	cmp	r3, #112	@ 0x70
 8006ae2:	d87b      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006ae4:	2b60      	cmp	r3, #96	@ 0x60
 8006ae6:	d050      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x11a>
 8006ae8:	2b60      	cmp	r3, #96	@ 0x60
 8006aea:	d877      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006aec:	2b50      	cmp	r3, #80	@ 0x50
 8006aee:	d03c      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0xfa>
 8006af0:	2b50      	cmp	r3, #80	@ 0x50
 8006af2:	d873      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006af4:	2b40      	cmp	r3, #64	@ 0x40
 8006af6:	d058      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x13a>
 8006af8:	2b40      	cmp	r3, #64	@ 0x40
 8006afa:	d86f      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b30      	cmp	r3, #48	@ 0x30
 8006afe:	d064      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15a>
 8006b00:	2b30      	cmp	r3, #48	@ 0x30
 8006b02:	d86b      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d060      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15a>
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d867      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d05c      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15a>
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d05a      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15a>
 8006b14:	e062      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b26:	f000 f9bd 	bl	8006ea4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	609a      	str	r2, [r3, #8]
      break;
 8006b42:	e04f      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b54:	f000 f9a6 	bl	8006ea4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b66:	609a      	str	r2, [r3, #8]
      break;
 8006b68:	e03c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b76:	461a      	mov	r2, r3
 8006b78:	f000 f91a 	bl	8006db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2150      	movs	r1, #80	@ 0x50
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f973 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006b88:	e02c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b96:	461a      	mov	r2, r3
 8006b98:	f000 f939 	bl	8006e0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2160      	movs	r1, #96	@ 0x60
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 f963 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e01c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f000 f8fa 	bl	8006db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2140      	movs	r1, #64	@ 0x40
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 f953 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006bc8:	e00c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f000 f94a 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006bda:	e003      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      break;
 8006be0:	e000      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a43      	ldr	r2, [pc, #268]	@ (8006d84 <TIM_Base_SetConfig+0x120>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d013      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c82:	d00f      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a40      	ldr	r2, [pc, #256]	@ (8006d88 <TIM_Base_SetConfig+0x124>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8006d8c <TIM_Base_SetConfig+0x128>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a3e      	ldr	r2, [pc, #248]	@ (8006d90 <TIM_Base_SetConfig+0x12c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8006d94 <TIM_Base_SetConfig+0x130>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d108      	bne.n	8006cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a32      	ldr	r2, [pc, #200]	@ (8006d84 <TIM_Base_SetConfig+0x120>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d02b      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc4:	d027      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8006d88 <TIM_Base_SetConfig+0x124>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d023      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8006d8c <TIM_Base_SetConfig+0x128>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01f      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8006d90 <TIM_Base_SetConfig+0x12c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d01b      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8006d94 <TIM_Base_SetConfig+0x130>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d017      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d98 <TIM_Base_SetConfig+0x134>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8006d9c <TIM_Base_SetConfig+0x138>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00f      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a29      	ldr	r2, [pc, #164]	@ (8006da0 <TIM_Base_SetConfig+0x13c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00b      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a28      	ldr	r2, [pc, #160]	@ (8006da4 <TIM_Base_SetConfig+0x140>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d007      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a27      	ldr	r2, [pc, #156]	@ (8006da8 <TIM_Base_SetConfig+0x144>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_Base_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a26      	ldr	r2, [pc, #152]	@ (8006dac <TIM_Base_SetConfig+0x148>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d108      	bne.n	8006d28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a0e      	ldr	r2, [pc, #56]	@ (8006d84 <TIM_Base_SetConfig+0x120>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d003      	beq.n	8006d56 <TIM_Base_SetConfig+0xf2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a10      	ldr	r2, [pc, #64]	@ (8006d94 <TIM_Base_SetConfig+0x130>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d103      	bne.n	8006d5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f043 0204 	orr.w	r2, r3, #4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40010400 	.word	0x40010400
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40014400 	.word	0x40014400
 8006da0:	40014800 	.word	0x40014800
 8006da4:	40001800 	.word	0x40001800
 8006da8:	40001c00 	.word	0x40001c00
 8006dac:	40002000 	.word	0x40002000

08006db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 030a 	bic.w	r3, r3, #10
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b087      	sub	sp, #28
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	f023 0210 	bic.w	r2, r3, #16
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	031b      	lsls	r3, r3, #12
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f043 0307 	orr.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e05a      	b.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a21      	ldr	r2, [pc, #132]	@ (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d022      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f48:	d01d      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d018      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1a      	ldr	r2, [pc, #104]	@ (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00e      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a18      	ldr	r2, [pc, #96]	@ (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d009      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a17      	ldr	r2, [pc, #92]	@ (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a15      	ldr	r2, [pc, #84]	@ (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d10c      	bne.n	8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	40000c00 	.word	0x40000c00
 8006fd0:	40010400 	.word	0x40010400
 8006fd4:	40014000 	.word	0x40014000
 8006fd8:	40001800 	.word	0x40001800

08006fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007004:	b084      	sub	sp, #16
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	f107 001c 	add.w	r0, r7, #28
 8007012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007016:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800701a:	2b01      	cmp	r3, #1
 800701c:	d123      	bne.n	8007066 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007046:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800704a:	2b01      	cmp	r3, #1
 800704c:	d105      	bne.n	800705a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9dc 	bl	8007418 <USB_CoreReset>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	e01b      	b.n	800709e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9d0 	bl	8007418 <USB_CoreReset>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800707c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007090:	e005      	b.n	800709e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007096:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800709e:	7fbb      	ldrb	r3, [r7, #30]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d10b      	bne.n	80070bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f043 0206 	orr.w	r2, r3, #6
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f043 0220 	orr.w	r2, r3, #32
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070c8:	b004      	add	sp, #16
 80070ca:	4770      	bx	lr

080070cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f043 0201 	orr.w	r2, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f023 0201 	bic.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d115      	bne.n	800715e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800713e:	200a      	movs	r0, #10
 8007140:	f7fa fdda 	bl	8001cf8 <HAL_Delay>
      ms += 10U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	330a      	adds	r3, #10
 8007148:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f956 	bl	80073fc <USB_GetMode>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d01e      	beq.n	8007194 <USB_SetCurrentMode+0x84>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2bc7      	cmp	r3, #199	@ 0xc7
 800715a:	d9f0      	bls.n	800713e <USB_SetCurrentMode+0x2e>
 800715c:	e01a      	b.n	8007194 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d115      	bne.n	8007190 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007170:	200a      	movs	r0, #10
 8007172:	f7fa fdc1 	bl	8001cf8 <HAL_Delay>
      ms += 10U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	330a      	adds	r3, #10
 800717a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f93d 	bl	80073fc <USB_GetMode>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <USB_SetCurrentMode+0x84>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2bc7      	cmp	r3, #199	@ 0xc7
 800718c:	d9f0      	bls.n	8007170 <USB_SetCurrentMode+0x60>
 800718e:	e001      	b.n	8007194 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e005      	b.n	80071a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2bc8      	cmp	r3, #200	@ 0xc8
 8007198:	d101      	bne.n	800719e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071c2:	d901      	bls.n	80071c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e01b      	b.n	8007200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	daf2      	bge.n	80071b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	019b      	lsls	r3, r3, #6
 80071d8:	f043 0220 	orr.w	r2, r3, #32
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071ec:	d901      	bls.n	80071f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e006      	b.n	8007200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d0f0      	beq.n	80071e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007224:	d901      	bls.n	800722a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e018      	b.n	800725c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	daf2      	bge.n	8007218 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2210      	movs	r2, #16
 800723a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3301      	adds	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007248:	d901      	bls.n	800724e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e006      	b.n	800725c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0310 	and.w	r3, r3, #16
 8007256:	2b10      	cmp	r3, #16
 8007258:	d0f0      	beq.n	800723c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007268:	b480      	push	{r7}
 800726a:	b089      	sub	sp, #36	@ 0x24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4611      	mov	r1, r2
 8007274:	461a      	mov	r2, r3
 8007276:	460b      	mov	r3, r1
 8007278:	71fb      	strb	r3, [r7, #7]
 800727a:	4613      	mov	r3, r2
 800727c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007286:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d123      	bne.n	80072d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800728e:	88bb      	ldrh	r3, [r7, #4]
 8007290:	3303      	adds	r3, #3
 8007292:	089b      	lsrs	r3, r3, #2
 8007294:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	e018      	b.n	80072ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	031a      	lsls	r2, r3, #12
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a8:	461a      	mov	r2, r3
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	3301      	adds	r3, #1
 80072ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	3301      	adds	r3, #1
 80072c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	3301      	adds	r3, #1
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d3e2      	bcc.n	800729c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3724      	adds	r7, #36	@ 0x24
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b08b      	sub	sp, #44	@ 0x2c
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	089b      	lsrs	r3, r3, #2
 80072fe:	b29b      	uxth	r3, r3
 8007300:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800730a:	2300      	movs	r3, #0
 800730c:	623b      	str	r3, [r7, #32]
 800730e:	e014      	b.n	800733a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	601a      	str	r2, [r3, #0]
    pDest++;
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	3301      	adds	r3, #1
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	3301      	adds	r3, #1
 8007326:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	3301      	adds	r3, #1
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	3301      	adds	r3, #1
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	3301      	adds	r3, #1
 8007338:	623b      	str	r3, [r7, #32]
 800733a:	6a3a      	ldr	r2, [r7, #32]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	429a      	cmp	r2, r3
 8007340:	d3e6      	bcc.n	8007310 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007342:	8bfb      	ldrh	r3, [r7, #30]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01e      	beq.n	8007386 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007352:	461a      	mov	r2, r3
 8007354:	f107 0310 	add.w	r3, r7, #16
 8007358:	6812      	ldr	r2, [r2, #0]
 800735a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	fa22 f303 	lsr.w	r3, r2, r3
 8007368:	b2da      	uxtb	r2, r3
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	701a      	strb	r2, [r3, #0]
      i++;
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	3301      	adds	r3, #1
 8007372:	623b      	str	r3, [r7, #32]
      pDest++;
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	3301      	adds	r3, #1
 8007378:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800737a:	8bfb      	ldrh	r3, [r7, #30]
 800737c:	3b01      	subs	r3, #1
 800737e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007380:	8bfb      	ldrh	r3, [r7, #30]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1ea      	bne.n	800735c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007388:	4618      	mov	r0, r3
 800738a:	372c      	adds	r7, #44	@ 0x2c
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4013      	ands	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4013      	ands	r3, r2
 80073ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073ee:	68bb      	ldr	r3, [r7, #8]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f003 0301 	and.w	r3, r3, #1
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007430:	d901      	bls.n	8007436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e022      	b.n	800747c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	daf2      	bge.n	8007424 <USB_CoreReset+0xc>

  count = 10U;
 800743e:	230a      	movs	r3, #10
 8007440:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007442:	e002      	b.n	800744a <USB_CoreReset+0x32>
  {
    count--;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3b01      	subs	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f9      	bne.n	8007444 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f043 0201 	orr.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007468:	d901      	bls.n	800746e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e006      	b.n	800747c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b01      	cmp	r3, #1
 8007478:	d0f0      	beq.n	800745c <USB_CoreReset+0x44>

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007488:	b084      	sub	sp, #16
 800748a:	b580      	push	{r7, lr}
 800748c:	b086      	sub	sp, #24
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074a8:	461a      	mov	r2, r3
 80074aa:	2300      	movs	r3, #0
 80074ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d119      	bne.n	8007512 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80074de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10a      	bne.n	80074fc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074f4:	f043 0304 	orr.w	r3, r3, #4
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	e014      	b.n	8007526 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800750a:	f023 0304 	bic.w	r3, r3, #4
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	e009      	b.n	8007526 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007520:	f023 0304 	bic.w	r3, r3, #4
 8007524:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007526:	2110      	movs	r1, #16
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff fe3d 	bl	80071a8 <USB_FlushTxFifo>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff fe67 	bl	800720c <USB_FlushRxFifo>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007548:	2300      	movs	r3, #0
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	e015      	b.n	800757a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800755a:	461a      	mov	r2, r3
 800755c:	f04f 33ff 	mov.w	r3, #4294967295
 8007560:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800756e:	461a      	mov	r2, r3
 8007570:	2300      	movs	r3, #0
 8007572:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3301      	adds	r3, #1
 8007578:	613b      	str	r3, [r7, #16]
 800757a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800757e:	461a      	mov	r2, r3
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	4293      	cmp	r3, r2
 8007584:	d3e3      	bcc.n	800754e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a18      	ldr	r2, [pc, #96]	@ (80075f8 <USB_HostInit+0x170>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d10b      	bne.n	80075b4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075a2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a15      	ldr	r2, [pc, #84]	@ (80075fc <USB_HostInit+0x174>)
 80075a8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a14      	ldr	r2, [pc, #80]	@ (8007600 <USB_HostInit+0x178>)
 80075ae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80075b2:	e009      	b.n	80075c8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2280      	movs	r2, #128	@ 0x80
 80075b8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a11      	ldr	r2, [pc, #68]	@ (8007604 <USB_HostInit+0x17c>)
 80075be:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a11      	ldr	r2, [pc, #68]	@ (8007608 <USB_HostInit+0x180>)
 80075c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d105      	bne.n	80075dc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f043 0210 	orr.w	r2, r3, #16
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699a      	ldr	r2, [r3, #24]
 80075e0:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <USB_HostInit+0x184>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075f4:	b004      	add	sp, #16
 80075f6:	4770      	bx	lr
 80075f8:	40040000 	.word	0x40040000
 80075fc:	01000200 	.word	0x01000200
 8007600:	00e00300 	.word	0x00e00300
 8007604:	00600080 	.word	0x00600080
 8007608:	004000e0 	.word	0x004000e0
 800760c:	a3200008 	.word	0xa3200008

08007610 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800762e:	f023 0303 	bic.w	r3, r3, #3
 8007632:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007648:	4313      	orrs	r3, r2
 800764a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d107      	bne.n	8007662 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007658:	461a      	mov	r2, r3
 800765a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800765e:	6053      	str	r3, [r2, #4]
 8007660:	e00c      	b.n	800767c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d107      	bne.n	8007678 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800766e:	461a      	mov	r2, r3
 8007670:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007674:	6053      	str	r3, [r2, #4]
 8007676:	e001      	b.n	800767c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80076aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80076ba:	2064      	movs	r0, #100	@ 0x64
 80076bc:	f7fa fb1c 	bl	8001cf8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80076ce:	200a      	movs	r0, #10
 80076d0:	f7fa fb12 	bl	8001cf8 <HAL_Delay>

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007702:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d109      	bne.n	8007722 <USB_DriveVbus+0x44>
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d106      	bne.n	8007722 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800771c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007720:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800772c:	d109      	bne.n	8007742 <USB_DriveVbus+0x64>
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800773c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007740:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	0c5b      	lsrs	r3, r3, #17
 800776e:	f003 0303 	and.w	r3, r3, #3
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	b29b      	uxth	r3, r3
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	70fb      	strb	r3, [r7, #3]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70bb      	strb	r3, [r7, #2]
 80077b6:	4613      	mov	r3, r2
 80077b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ce:	461a      	mov	r2, r3
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295
 80077d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80077d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d87c      	bhi.n	80078d8 <USB_HC_Init+0x138>
 80077de:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <USB_HC_Init+0x44>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	0800789b 	.word	0x0800789b
 80077ec:	080077f5 	.word	0x080077f5
 80077f0:	0800785d 	.word	0x0800785d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007800:	461a      	mov	r2, r3
 8007802:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007806:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007808:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da10      	bge.n	8007832 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	440a      	add	r2, r1
 8007826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800782a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800782e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007830:	e055      	b.n	80078de <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a6f      	ldr	r2, [pc, #444]	@ (80079f4 <USB_HC_Init+0x254>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d151      	bne.n	80078de <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	4413      	add	r3, r2
 8007842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	0151      	lsls	r1, r2, #5
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	440a      	add	r2, r1
 8007850:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007854:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007858:	60d3      	str	r3, [r2, #12]
      break;
 800785a:	e040      	b.n	80078de <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	4413      	add	r3, r2
 8007864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007868:	461a      	mov	r2, r3
 800786a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800786e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007870:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007874:	2b00      	cmp	r3, #0
 8007876:	da34      	bge.n	80078e2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	440a      	add	r2, r1
 800788e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007896:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007898:	e023      	b.n	80078e2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a6:	461a      	mov	r2, r3
 80078a8:	f240 2325 	movw	r3, #549	@ 0x225
 80078ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	da17      	bge.n	80078e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	78fa      	ldrb	r2, [r7, #3]
 80078c6:	0151      	lsls	r1, r2, #5
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	440a      	add	r2, r1
 80078cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078d0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80078d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80078d6:	e006      	b.n	80078e6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	77fb      	strb	r3, [r7, #31]
      break;
 80078dc:	e004      	b.n	80078e8 <USB_HC_Init+0x148>
      break;
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <USB_HC_Init+0x148>
      break;
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <USB_HC_Init+0x148>
      break;
 80078e6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f4:	461a      	mov	r2, r3
 80078f6:	2300      	movs	r3, #0
 80078f8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	0151      	lsls	r1, r2, #5
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	440a      	add	r2, r1
 8007910:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007914:	f043 0302 	orr.w	r3, r3, #2
 8007918:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	2101      	movs	r1, #1
 800792a:	fa01 f303 	lsl.w	r3, r1, r3
 800792e:	6939      	ldr	r1, [r7, #16]
 8007930:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007934:	4313      	orrs	r3, r2
 8007936:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007944:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007948:	2b00      	cmp	r3, #0
 800794a:	da03      	bge.n	8007954 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800794c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e001      	b.n	8007958 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fef9 	bl	8007750 <USB_GetHostSpeed>
 800795e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007960:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007964:	2b02      	cmp	r3, #2
 8007966:	d106      	bne.n	8007976 <USB_HC_Init+0x1d6>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d003      	beq.n	8007976 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800796e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e001      	b.n	800797a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800797a:	787b      	ldrb	r3, [r7, #1]
 800797c:	059b      	lsls	r3, r3, #22
 800797e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007982:	78bb      	ldrb	r3, [r7, #2]
 8007984:	02db      	lsls	r3, r3, #11
 8007986:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800798a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800798c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007990:	049b      	lsls	r3, r3, #18
 8007992:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007996:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007998:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800799a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800799e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80079b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079b8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80079ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d003      	beq.n	80079ca <USB_HC_Init+0x22a>
 80079c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10f      	bne.n	80079ea <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	0151      	lsls	r1, r2, #5
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	440a      	add	r2, r1
 80079e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40040000 	.word	0x40040000

080079f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08c      	sub	sp, #48	@ 0x30
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	4613      	mov	r3, r2
 8007a04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007a10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a14:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4a5d      	ldr	r2, [pc, #372]	@ (8007b90 <USB_HC_StartXfer+0x198>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d12f      	bne.n	8007a7e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d11c      	bne.n	8007a5e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	7c9b      	ldrb	r3, [r3, #18]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <USB_HC_StartXfer+0x3c>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	7c9b      	ldrb	r3, [r3, #18]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d124      	bne.n	8007a7e <USB_HC_StartXfer+0x86>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	799b      	ldrb	r3, [r3, #6]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d120      	bne.n	8007a7e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	0151      	lsls	r1, r2, #5
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	440a      	add	r2, r1
 8007a52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a5a:	60d3      	str	r3, [r2, #12]
 8007a5c:	e00f      	b.n	8007a7e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	791b      	ldrb	r3, [r3, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10b      	bne.n	8007a7e <USB_HC_StartXfer+0x86>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d107      	bne.n	8007a7e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	785b      	ldrb	r3, [r3, #1]
 8007a72:	4619      	mov	r1, r3
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fb6b 	bl	8008150 <USB_DoPing>
        return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e232      	b.n	8007ee4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	799b      	ldrb	r3, [r3, #6]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d158      	bne.n	8007b38 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007a86:	2301      	movs	r3, #1
 8007a88:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	78db      	ldrb	r3, [r3, #3]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d007      	beq.n	8007aa2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	8a92      	ldrh	r2, [r2, #20]
 8007a98:	fb03 f202 	mul.w	r2, r3, r2
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	61da      	str	r2, [r3, #28]
 8007aa0:	e07c      	b.n	8007b9c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	7c9b      	ldrb	r3, [r3, #18]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d130      	bne.n	8007b0c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	2bbc      	cmp	r3, #188	@ 0xbc
 8007ab0:	d918      	bls.n	8007ae4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	8a9b      	ldrh	r3, [r3, #20]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	69da      	ldr	r2, [r3, #28]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d003      	beq.n	8007ad4 <USB_HC_StartXfer+0xdc>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d103      	bne.n	8007adc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	60da      	str	r2, [r3, #12]
 8007ada:	e05f      	b.n	8007b9c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	60da      	str	r2, [r3, #12]
 8007ae2:	e05b      	b.n	8007b9c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	6a1a      	ldr	r2, [r3, #32]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d007      	beq.n	8007b04 <USB_HC_StartXfer+0x10c>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d003      	beq.n	8007b04 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2204      	movs	r2, #4
 8007b00:	60da      	str	r2, [r3, #12]
 8007b02:	e04b      	b.n	8007b9c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2203      	movs	r2, #3
 8007b08:	60da      	str	r2, [r3, #12]
 8007b0a:	e047      	b.n	8007b9c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d10d      	bne.n	8007b2e <USB_HC_StartXfer+0x136>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	8a92      	ldrh	r2, [r2, #20]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d907      	bls.n	8007b2e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	8a92      	ldrh	r2, [r2, #20]
 8007b24:	fb03 f202 	mul.w	r2, r3, r2
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	61da      	str	r2, [r3, #28]
 8007b2c:	e036      	b.n	8007b9c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	61da      	str	r2, [r3, #28]
 8007b36:	e031      	b.n	8007b9c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d018      	beq.n	8007b72 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	8a92      	ldrh	r2, [r2, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	8a92      	ldrh	r2, [r2, #20]
 8007b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b54:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007b56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007b58:	8b7b      	ldrh	r3, [r7, #26]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d90b      	bls.n	8007b76 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007b5e:	8b7b      	ldrh	r3, [r7, #26]
 8007b60:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	8a92      	ldrh	r2, [r2, #20]
 8007b68:	fb03 f202 	mul.w	r2, r3, r2
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	61da      	str	r2, [r3, #28]
 8007b70:	e001      	b.n	8007b76 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007b72:	2301      	movs	r3, #1
 8007b74:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	78db      	ldrb	r3, [r3, #3]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	8a92      	ldrh	r2, [r2, #20]
 8007b84:	fb03 f202 	mul.w	r2, r3, r2
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	61da      	str	r2, [r3, #28]
 8007b8c:	e006      	b.n	8007b9c <USB_HC_StartXfer+0x1a4>
 8007b8e:	bf00      	nop
 8007b90:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	6a1a      	ldr	r2, [r3, #32]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ba4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ba6:	04d9      	lsls	r1, r3, #19
 8007ba8:	4ba3      	ldr	r3, [pc, #652]	@ (8007e38 <USB_HC_StartXfer+0x440>)
 8007baa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	7d9b      	ldrb	r3, [r3, #22]
 8007bb2:	075b      	lsls	r3, r3, #29
 8007bb4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bb8:	69f9      	ldr	r1, [r7, #28]
 8007bba:	0148      	lsls	r0, r1, #5
 8007bbc:	6a39      	ldr	r1, [r7, #32]
 8007bbe:	4401      	add	r1, r0
 8007bc0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bc4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bc6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	6999      	ldr	r1, [r3, #24]
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bde:	460a      	mov	r2, r1
 8007be0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	2300      	movne	r3, #0
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	6a3a      	ldr	r2, [r7, #32]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	7e7b      	ldrb	r3, [r7, #25]
 8007c2a:	075b      	lsls	r3, r3, #29
 8007c2c:	69f9      	ldr	r1, [r7, #28]
 8007c2e:	0148      	lsls	r0, r1, #5
 8007c30:	6a39      	ldr	r1, [r7, #32]
 8007c32:	4401      	add	r1, r0
 8007c34:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	799b      	ldrb	r3, [r3, #6]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	f040 80c3 	bne.w	8007dcc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	7c5b      	ldrb	r3, [r3, #17]
 8007c4a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c50:	4313      	orrs	r3, r2
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	6a3a      	ldr	r2, [r7, #32]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c62:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	6a3a      	ldr	r2, [r7, #32]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	79db      	ldrb	r3, [r3, #7]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d123      	bne.n	8007cd4 <USB_HC_StartXfer+0x2dc>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	78db      	ldrb	r3, [r3, #3]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d11f      	bne.n	8007cd4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	6a3a      	ldr	r2, [r7, #32]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cb2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	6a3a      	ldr	r2, [r7, #32]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	7c9b      	ldrb	r3, [r3, #18]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d003      	beq.n	8007ce4 <USB_HC_StartXfer+0x2ec>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	7c9b      	ldrb	r3, [r3, #18]
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d117      	bne.n	8007d14 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d113      	bne.n	8007d14 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	78db      	ldrb	r3, [r3, #3]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d10f      	bne.n	8007d14 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	0151      	lsls	r1, r2, #5
 8007d06:	6a3a      	ldr	r2, [r7, #32]
 8007d08:	440a      	add	r2, r1
 8007d0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d12:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	7c9b      	ldrb	r3, [r3, #18]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d162      	bne.n	8007de2 <USB_HC_StartXfer+0x3ea>
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	78db      	ldrb	r3, [r3, #3]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d15e      	bne.n	8007de2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d858      	bhi.n	8007de0 <USB_HC_StartXfer+0x3e8>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <USB_HC_StartXfer+0x33c>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d45 	.word	0x08007d45
 8007d38:	08007d67 	.word	0x08007d67
 8007d3c:	08007d89 	.word	0x08007d89
 8007d40:	08007dab 	.word	0x08007dab
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	69fa      	ldr	r2, [r7, #28]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	6a3a      	ldr	r2, [r7, #32]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d62:	6053      	str	r3, [r2, #4]
          break;
 8007d64:	e03d      	b.n	8007de2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	0151      	lsls	r1, r2, #5
 8007d78:	6a3a      	ldr	r2, [r7, #32]
 8007d7a:	440a      	add	r2, r1
 8007d7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d80:	f043 030e 	orr.w	r3, r3, #14
 8007d84:	6053      	str	r3, [r2, #4]
          break;
 8007d86:	e02c      	b.n	8007de2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007da2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007da6:	6053      	str	r3, [r2, #4]
          break;
 8007da8:	e01b      	b.n	8007de2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	0151      	lsls	r1, r2, #5
 8007dbc:	6a3a      	ldr	r2, [r7, #32]
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dc8:	6053      	str	r3, [r2, #4]
          break;
 8007dca:	e00a      	b.n	8007de2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd8:	461a      	mov	r2, r3
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6053      	str	r3, [r2, #4]
 8007dde:	e000      	b.n	8007de2 <USB_HC_StartXfer+0x3ea>
          break;
 8007de0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007df8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	78db      	ldrb	r3, [r3, #3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e08:	613b      	str	r3, [r7, #16]
 8007e0a:	e003      	b.n	8007e14 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e12:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e1a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e28:	461a      	mov	r2, r3
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e055      	b.n	8007ee4 <USB_HC_StartXfer+0x4ec>
 8007e38:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	78db      	ldrb	r3, [r3, #3]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d14e      	bne.n	8007ee2 <USB_HC_StartXfer+0x4ea>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d04a      	beq.n	8007ee2 <USB_HC_StartXfer+0x4ea>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	79db      	ldrb	r3, [r3, #7]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d146      	bne.n	8007ee2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	7c9b      	ldrb	r3, [r3, #18]
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d831      	bhi.n	8007ec0 <USB_HC_StartXfer+0x4c8>
 8007e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <USB_HC_StartXfer+0x46c>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007e99 	.word	0x08007e99
 8007e6c:	08007e75 	.word	0x08007e75
 8007e70:	08007e99 	.word	0x08007e99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	3303      	adds	r3, #3
 8007e7a:	089b      	lsrs	r3, r3, #2
 8007e7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e7e:	8afa      	ldrh	r2, [r7, #22]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d91c      	bls.n	8007ec4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f043 0220 	orr.w	r2, r3, #32
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e96:	e015      	b.n	8007ec4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	3303      	adds	r3, #3
 8007e9e:	089b      	lsrs	r3, r3, #2
 8007ea0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ea2:	8afa      	ldrh	r2, [r7, #22]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d90a      	bls.n	8007ec8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ebe:	e003      	b.n	8007ec8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007ec0:	bf00      	nop
 8007ec2:	e002      	b.n	8007eca <USB_HC_StartXfer+0x4d2>
        break;
 8007ec4:	bf00      	nop
 8007ec6:	e000      	b.n	8007eca <USB_HC_StartXfer+0x4d2>
        break;
 8007ec8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6999      	ldr	r1, [r3, #24]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	785a      	ldrb	r2, [r3, #1]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2000      	movs	r0, #0
 8007eda:	9000      	str	r0, [sp, #0]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff f9c3 	bl	8007268 <USB_WritePacket>
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3728      	adds	r7, #40	@ 0x28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	b29b      	uxth	r3, r3
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b089      	sub	sp, #36	@ 0x24
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	0c9b      	lsrs	r3, r3, #18
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	0fdb      	lsrs	r3, r3, #31
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	0fdb      	lsrs	r3, r3, #31
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d10d      	bne.n	8007f90 <USB_HC_Halt+0x82>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <USB_HC_Halt+0x82>
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d002      	beq.n	8007f8c <USB_HC_Halt+0x7e>
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d101      	bne.n	8007f90 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e0d8      	b.n	8008142 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <USB_HC_Halt+0x8e>
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d173      	bne.n	8008084 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d14a      	bne.n	800805e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d133      	bne.n	800803c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ff2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	440a      	add	r2, r1
 800800a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800800e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008012:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	3301      	adds	r3, #1
 8008018:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008020:	d82e      	bhi.n	8008080 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008038:	d0ec      	beq.n	8008014 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800803a:	e081      	b.n	8008140 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	4413      	add	r3, r2
 8008044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	440a      	add	r2, r1
 8008052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008056:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800805a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800805c:	e070      	b.n	8008140 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	440a      	add	r2, r1
 8008074:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800807c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800807e:	e05f      	b.n	8008140 <USB_HC_Halt+0x232>
            break;
 8008080:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008082:	e05d      	b.n	8008140 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	440a      	add	r2, r1
 800809a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800809e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d133      	bne.n	800811c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	0151      	lsls	r1, r2, #5
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	440a      	add	r2, r1
 80080ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	0151      	lsls	r1, r2, #5
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	440a      	add	r2, r1
 80080ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008100:	d81d      	bhi.n	800813e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008118:	d0ec      	beq.n	80080f4 <USB_HC_Halt+0x1e6>
 800811a:	e011      	b.n	8008140 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	440a      	add	r2, r1
 8008132:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008136:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	e000      	b.n	8008140 <USB_HC_Halt+0x232>
          break;
 800813e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3724      	adds	r7, #36	@ 0x24
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008164:	2301      	movs	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	04da      	lsls	r2, r3, #19
 800816c:	4b15      	ldr	r3, [pc, #84]	@ (80081c4 <USB_DoPing+0x74>)
 800816e:	4013      	ands	r3, r2
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	0151      	lsls	r1, r2, #5
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	440a      	add	r2, r1
 8008178:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800817c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008180:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008198:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ae:	461a      	mov	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	1ff80000 	.word	0x1ff80000

080081c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7fe ff86 	bl	80070ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081e2:	2110      	movs	r1, #16
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7fe ffdf 	bl	80071a8 <USB_FlushTxFifo>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff f809 	bl	800720c <USB_FlushRxFifo>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008204:	2300      	movs	r3, #0
 8008206:	61bb      	str	r3, [r7, #24]
 8008208:	e01f      	b.n	800824a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	4413      	add	r3, r2
 8008212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008220:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008228:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008230:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	4413      	add	r3, r2
 800823a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800823e:	461a      	mov	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	3301      	adds	r3, #1
 8008248:	61bb      	str	r3, [r7, #24]
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	2b0f      	cmp	r3, #15
 800824e:	d9dc      	bls.n	800820a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008250:	2300      	movs	r3, #0
 8008252:	61bb      	str	r3, [r7, #24]
 8008254:	e034      	b.n	80082c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800826c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008274:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800827c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	4413      	add	r3, r2
 8008286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800828a:	461a      	mov	r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3301      	adds	r3, #1
 8008294:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800829c:	d80c      	bhi.n	80082b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082b4:	d0ec      	beq.n	8008290 <USB_StopHost+0xc8>
 80082b6:	e000      	b.n	80082ba <USB_StopHost+0xf2>
        break;
 80082b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	3301      	adds	r3, #1
 80082be:	61bb      	str	r3, [r7, #24]
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2b0f      	cmp	r3, #15
 80082c4:	d9c7      	bls.n	8008256 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082cc:	461a      	mov	r2, r3
 80082ce:	f04f 33ff 	mov.w	r3, #4294967295
 80082d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f04f 32ff 	mov.w	r2, #4294967295
 80082da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7fe fef5 	bl	80070cc <USB_EnableGlobalInt>

  return ret;
 80082e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80082ec:	b590      	push	{r4, r7, lr}
 80082ee:	b089      	sub	sp, #36	@ 0x24
 80082f0:	af04      	add	r7, sp, #16
 80082f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80082f4:	2301      	movs	r3, #1
 80082f6:	2202      	movs	r2, #2
 80082f8:	2102      	movs	r1, #2
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fc83 	bl	8008c06 <USBH_FindInterface>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	2bff      	cmp	r3, #255	@ 0xff
 8008308:	d002      	beq.n	8008310 <USBH_CDC_InterfaceInit+0x24>
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d901      	bls.n	8008314 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008310:	2302      	movs	r3, #2
 8008312:	e13d      	b.n	8008590 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fc58 	bl	8008bce <USBH_SelectInterface>
 800831e:	4603      	mov	r3, r0
 8008320:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008328:	2302      	movs	r3, #2
 800832a:	e131      	b.n	8008590 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008332:	2050      	movs	r0, #80	@ 0x50
 8008334:	f002 fb6a 	bl	800aa0c <malloc>
 8008338:	4603      	mov	r3, r0
 800833a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800834c:	2302      	movs	r3, #2
 800834e:	e11f      	b.n	8008590 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008350:	2250      	movs	r2, #80	@ 0x50
 8008352:	2100      	movs	r1, #0
 8008354:	68b8      	ldr	r0, [r7, #8]
 8008356:	f002 fc17 	bl	800ab88 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	211a      	movs	r1, #26
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	4413      	add	r3, r2
 8008366:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	b25b      	sxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	da15      	bge.n	800839e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	211a      	movs	r1, #26
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	4413      	add	r3, r2
 800837e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008382:	781a      	ldrb	r2, [r3, #0]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	211a      	movs	r1, #26
 800838e:	fb01 f303 	mul.w	r3, r1, r3
 8008392:	4413      	add	r3, r2
 8008394:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008398:	881a      	ldrh	r2, [r3, #0]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 ffc4 	bl	800a332 <USBH_AllocPipe>
 80083aa:	4603      	mov	r3, r0
 80083ac:	461a      	mov	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	7819      	ldrb	r1, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	7858      	ldrb	r0, [r3, #1]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	8952      	ldrh	r2, [r2, #10]
 80083ca:	9202      	str	r2, [sp, #8]
 80083cc:	2203      	movs	r2, #3
 80083ce:	9201      	str	r2, [sp, #4]
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	4623      	mov	r3, r4
 80083d4:	4602      	mov	r2, r0
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 ff7c 	bl	800a2d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2200      	movs	r2, #0
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f002 fa8b 	bl	800a900 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80083ea:	2300      	movs	r3, #0
 80083ec:	2200      	movs	r2, #0
 80083ee:	210a      	movs	r1, #10
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc08 	bl	8008c06 <USBH_FindInterface>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2bff      	cmp	r3, #255	@ 0xff
 80083fe:	d002      	beq.n	8008406 <USBH_CDC_InterfaceInit+0x11a>
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d901      	bls.n	800840a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008406:	2302      	movs	r3, #2
 8008408:	e0c2      	b.n	8008590 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	211a      	movs	r1, #26
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	4413      	add	r3, r2
 8008416:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	b25b      	sxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	da16      	bge.n	8008450 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	211a      	movs	r1, #26
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	4413      	add	r3, r2
 800842e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	211a      	movs	r1, #26
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	4413      	add	r3, r2
 8008444:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008448:	881a      	ldrh	r2, [r3, #0]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	835a      	strh	r2, [r3, #26]
 800844e:	e015      	b.n	800847c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	211a      	movs	r1, #26
 8008456:	fb01 f303 	mul.w	r3, r1, r3
 800845a:	4413      	add	r3, r2
 800845c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008460:	781a      	ldrb	r2, [r3, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	211a      	movs	r1, #26
 800846c:	fb01 f303 	mul.w	r3, r1, r3
 8008470:	4413      	add	r3, r2
 8008472:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008476:	881a      	ldrh	r2, [r3, #0]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	211a      	movs	r1, #26
 8008482:	fb01 f303 	mul.w	r3, r1, r3
 8008486:	4413      	add	r3, r2
 8008488:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	b25b      	sxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	da16      	bge.n	80084c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	211a      	movs	r1, #26
 800849a:	fb01 f303 	mul.w	r3, r1, r3
 800849e:	4413      	add	r3, r2
 80084a0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	211a      	movs	r1, #26
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80084ba:	881a      	ldrh	r2, [r3, #0]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	835a      	strh	r2, [r3, #26]
 80084c0:	e015      	b.n	80084ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	211a      	movs	r1, #26
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	4413      	add	r3, r2
 80084ce:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	211a      	movs	r1, #26
 80084de:	fb01 f303 	mul.w	r3, r1, r3
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	7b9b      	ldrb	r3, [r3, #14]
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 ff1c 	bl	800a332 <USBH_AllocPipe>
 80084fa:	4603      	mov	r3, r0
 80084fc:	461a      	mov	r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	7bdb      	ldrb	r3, [r3, #15]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 ff12 	bl	800a332 <USBH_AllocPipe>
 800850e:	4603      	mov	r3, r0
 8008510:	461a      	mov	r2, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	7b59      	ldrb	r1, [r3, #13]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	7b98      	ldrb	r0, [r3, #14]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	8b12      	ldrh	r2, [r2, #24]
 800852e:	9202      	str	r2, [sp, #8]
 8008530:	2202      	movs	r2, #2
 8008532:	9201      	str	r2, [sp, #4]
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	4623      	mov	r3, r4
 8008538:	4602      	mov	r2, r0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 feca 	bl	800a2d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	7b19      	ldrb	r1, [r3, #12]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	7bd8      	ldrb	r0, [r3, #15]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	8b52      	ldrh	r2, [r2, #26]
 8008558:	9202      	str	r2, [sp, #8]
 800855a:	2202      	movs	r2, #2
 800855c:	9201      	str	r2, [sp, #4]
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4623      	mov	r3, r4
 8008562:	4602      	mov	r2, r0
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 feb5 	bl	800a2d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	7b5b      	ldrb	r3, [r3, #13]
 8008576:	2200      	movs	r2, #0
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f002 f9c0 	bl	800a900 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	7b1b      	ldrb	r3, [r3, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f002 f9b9 	bl	800a900 <USBH_LL_SetToggle>

  return USBH_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	bd90      	pop	{r4, r7, pc}

08008598 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00e      	beq.n	80085d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 feaa 	bl	800a312 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fed5 	bl	800a374 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	7b1b      	ldrb	r3, [r3, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00e      	beq.n	80085f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	7b1b      	ldrb	r3, [r3, #12]
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 fe97 	bl	800a312 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	7b1b      	ldrb	r3, [r3, #12]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 fec2 	bl	800a374 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	7b5b      	ldrb	r3, [r3, #13]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00e      	beq.n	800861c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	7b5b      	ldrb	r3, [r3, #13]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 fe84 	bl	800a312 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	7b5b      	ldrb	r3, [r3, #13]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 feaf 	bl	800a374 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	4618      	mov	r0, r3
 8008632:	f002 f9f3 	bl	800aa1c <free>
    phost->pActiveClass->pData = 0U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800863c:	2200      	movs	r2, #0
 800863e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3340      	adds	r3, #64	@ 0x40
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f8b1 	bl	80087ca <GetLineCoding>
 8008668:	4603      	mov	r3, r0
 800866a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d105      	bne.n	800867e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008678:	2102      	movs	r1, #2
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800867e:	7afb      	ldrb	r3, [r7, #11]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008690:	2301      	movs	r3, #1
 8008692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d877      	bhi.n	800879c <USBH_CDC_Process+0x114>
 80086ac:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <USBH_CDC_Process+0x2c>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086c9 	.word	0x080086c9
 80086b8:	080086cf 	.word	0x080086cf
 80086bc:	080086ff 	.word	0x080086ff
 80086c0:	08008773 	.word	0x08008773
 80086c4:	08008781 	.word	0x08008781
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
      break;
 80086cc:	e06d      	b.n	80087aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f897 	bl	8008808 <SetLineCoding>
 80086da:	4603      	mov	r3, r0
 80086dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80086ec:	e058      	b.n	80087a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d055      	beq.n	80087a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2204      	movs	r2, #4
 80086f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80086fc:	e050      	b.n	80087a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	3340      	adds	r3, #64	@ 0x40
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f860 	bl	80087ca <GetLineCoding>
 800870a:	4603      	mov	r3, r0
 800870c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d126      	bne.n	8008762 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008726:	791b      	ldrb	r3, [r3, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	d13b      	bne.n	80087a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008736:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008738:	429a      	cmp	r2, r3
 800873a:	d133      	bne.n	80087a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008746:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008748:	429a      	cmp	r2, r3
 800874a:	d12b      	bne.n	80087a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008754:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008756:	429a      	cmp	r2, r3
 8008758:	d124      	bne.n	80087a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f958 	bl	8008a10 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008760:	e020      	b.n	80087a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d01d      	beq.n	80087a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2204      	movs	r2, #4
 800876c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008770:	e018      	b.n	80087a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f867 	bl	8008846 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f8da 	bl	8008932 <CDC_ProcessReception>
      break;
 800877e:	e014      	b.n	80087aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008780:	2100      	movs	r1, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 f81e 	bl	80097c4 <USBH_ClrFeature>
 8008788:	4603      	mov	r3, r0
 800878a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800879a:	e005      	b.n	80087a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800879c:	bf00      	nop
 800879e:	e004      	b.n	80087aa <USBH_CDC_Process+0x122>
      break;
 80087a0:	bf00      	nop
 80087a2:	e002      	b.n	80087aa <USBH_CDC_Process+0x122>
      break;
 80087a4:	bf00      	nop
 80087a6:	e000      	b.n	80087aa <USBH_CDC_Process+0x122>
      break;
 80087a8:	bf00      	nop

  }

  return status;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	22a1      	movs	r2, #161	@ 0xa1
 80087d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2221      	movs	r2, #33	@ 0x21
 80087de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2207      	movs	r2, #7
 80087f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2207      	movs	r2, #7
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fb17 	bl	8009e2c <USBH_CtlReq>
 80087fe:	4603      	mov	r3, r0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2221      	movs	r2, #33	@ 0x21
 8008816:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2207      	movs	r2, #7
 800882e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2207      	movs	r2, #7
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 faf8 	bl	8009e2c <USBH_CtlReq>
 800883c:	4603      	mov	r3, r0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b086      	sub	sp, #24
 800884a:	af02      	add	r7, sp, #8
 800884c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008858:	2300      	movs	r3, #0
 800885a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008862:	2b01      	cmp	r3, #1
 8008864:	d002      	beq.n	800886c <CDC_ProcessTransmission+0x26>
 8008866:	2b02      	cmp	r3, #2
 8008868:	d023      	beq.n	80088b2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800886a:	e05e      	b.n	800892a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	8b12      	ldrh	r2, [r2, #24]
 8008874:	4293      	cmp	r3, r2
 8008876:	d90b      	bls.n	8008890 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	69d9      	ldr	r1, [r3, #28]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8b1a      	ldrh	r2, [r3, #24]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	7b5b      	ldrb	r3, [r3, #13]
 8008884:	2001      	movs	r0, #1
 8008886:	9000      	str	r0, [sp, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 fce0 	bl	800a24e <USBH_BulkSendData>
 800888e:	e00b      	b.n	80088a8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	7b5b      	ldrb	r3, [r3, #13]
 800889e:	2001      	movs	r0, #1
 80088a0:	9000      	str	r0, [sp, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 fcd3 	bl	800a24e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80088b0:	e03b      	b.n	800892a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	7b5b      	ldrb	r3, [r3, #13]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 fff7 	bl	800a8ac <USBH_LL_GetURBState>
 80088be:	4603      	mov	r3, r0
 80088c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80088c2:	7afb      	ldrb	r3, [r7, #11]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d128      	bne.n	800891a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	8b12      	ldrh	r2, [r2, #24]
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d90e      	bls.n	80088f2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	8b12      	ldrh	r2, [r2, #24]
 80088dc:	1a9a      	subs	r2, r3, r2
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	8b12      	ldrh	r2, [r2, #24]
 80088ea:	441a      	add	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	61da      	str	r2, [r3, #28]
 80088f0:	e002      	b.n	80088f8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d004      	beq.n	800890a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008908:	e00e      	b.n	8008928 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f868 	bl	80089e8 <USBH_CDC_TransmitCallback>
      break;
 8008918:	e006      	b.n	8008928 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800891a:	7afb      	ldrb	r3, [r7, #11]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d103      	bne.n	8008928 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008928:	bf00      	nop
  }
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b086      	sub	sp, #24
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008944:	2300      	movs	r3, #0
 8008946:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800894e:	2b03      	cmp	r3, #3
 8008950:	d002      	beq.n	8008958 <CDC_ProcessReception+0x26>
 8008952:	2b04      	cmp	r3, #4
 8008954:	d00e      	beq.n	8008974 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8008956:	e043      	b.n	80089e0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	6a19      	ldr	r1, [r3, #32]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	8b5a      	ldrh	r2, [r3, #26]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	7b1b      	ldrb	r3, [r3, #12]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 fc97 	bl	800a298 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2204      	movs	r2, #4
 800896e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008972:	e035      	b.n	80089e0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	7b1b      	ldrb	r3, [r3, #12]
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 ff96 	bl	800a8ac <USBH_LL_GetURBState>
 8008980:	4603      	mov	r3, r0
 8008982:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008984:	7cfb      	ldrb	r3, [r7, #19]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d129      	bne.n	80089de <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	7b1b      	ldrb	r3, [r3, #12]
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 fef9 	bl	800a788 <USBH_LL_GetLastXferSize>
 8008996:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d016      	beq.n	80089d0 <CDC_ProcessReception+0x9e>
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	8b5b      	ldrh	r3, [r3, #26]
 80089a6:	461a      	mov	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d110      	bne.n	80089d0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1ad2      	subs	r2, r2, r3
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	6a1a      	ldr	r2, [r3, #32]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	441a      	add	r2, r3
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2203      	movs	r2, #3
 80089ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80089ce:	e006      	b.n	80089de <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f80f 	bl	80089fc <USBH_CDC_ReceiveCallback>
      break;
 80089de:	bf00      	nop
  }
}
 80089e0:	bf00      	nop
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e029      	b.n	8008a90 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	79fa      	ldrb	r2, [r7, #7]
 8008a40:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 f81f 	bl	8008a98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f001 fdc9 	bl	800a620 <USBH_LL_Init>

  return USBH_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e009      	b.n	8008aba <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	33e0      	adds	r3, #224	@ 0xe0
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	d9f2      	bls.n	8008aa6 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e009      	b.n	8008ada <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae0:	d3f1      	bcc.n	8008ac6 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2240      	movs	r2, #64	@ 0x40
 8008b06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	331c      	adds	r3, #28
 8008b32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b36:	2100      	movs	r1, #0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f002 f825 	bl	800ab88 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 f81c 	bl	800ab88 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008b56:	2212      	movs	r2, #18
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f002 f814 	bl	800ab88 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b66:	223e      	movs	r2, #62	@ 0x3e
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f002 f80c 	bl	800ab88 <memset>

  return USBH_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d016      	beq.n	8008bbc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10e      	bne.n	8008bb6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b9e:	1c59      	adds	r1, r3, #1
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	33de      	adds	r3, #222	@ 0xde
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
 8008bb4:	e004      	b.n	8008bc0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	73fb      	strb	r3, [r7, #15]
 8008bba:	e001      	b.n	8008bc0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008be4:	78fa      	ldrb	r2, [r7, #3]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d204      	bcs.n	8008bf4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	78fa      	ldrb	r2, [r7, #3]
 8008bee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008bf2:	e001      	b.n	8008bf8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b087      	sub	sp, #28
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	4608      	mov	r0, r1
 8008c10:	4611      	mov	r1, r2
 8008c12:	461a      	mov	r2, r3
 8008c14:	4603      	mov	r3, r0
 8008c16:	70fb      	strb	r3, [r7, #3]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70bb      	strb	r3, [r7, #2]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c2e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c30:	e025      	b.n	8008c7e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	221a      	movs	r2, #26
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4413      	add	r3, r2
 8008c40:	3302      	adds	r3, #2
 8008c42:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	795b      	ldrb	r3, [r3, #5]
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d002      	beq.n	8008c54 <USBH_FindInterface+0x4e>
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	2bff      	cmp	r3, #255	@ 0xff
 8008c52:	d111      	bne.n	8008c78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c58:	78ba      	ldrb	r2, [r7, #2]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d002      	beq.n	8008c64 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c5e:	78bb      	ldrb	r3, [r7, #2]
 8008c60:	2bff      	cmp	r3, #255	@ 0xff
 8008c62:	d109      	bne.n	8008c78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c68:	787a      	ldrb	r2, [r7, #1]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d002      	beq.n	8008c74 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c6e:	787b      	ldrb	r3, [r7, #1]
 8008c70:	2bff      	cmp	r3, #255	@ 0xff
 8008c72:	d101      	bne.n	8008c78 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	e006      	b.n	8008c86 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d9d6      	bls.n	8008c32 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c84:	23ff      	movs	r3, #255	@ 0xff
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 fcfc 	bl	800a698 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 fe15 	bl	800a8d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d102      	bne.n	8008cd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b0b      	cmp	r3, #11
 8008cde:	f200 81bc 	bhi.w	800905a <USBH_Process+0x3a6>
 8008ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce8 <USBH_Process+0x34>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d19 	.word	0x08008d19
 8008cec:	08008d4b 	.word	0x08008d4b
 8008cf0:	08008db5 	.word	0x08008db5
 8008cf4:	08008ff5 	.word	0x08008ff5
 8008cf8:	0800905b 	.word	0x0800905b
 8008cfc:	08008e55 	.word	0x08008e55
 8008d00:	08008f9b 	.word	0x08008f9b
 8008d04:	08008e8b 	.word	0x08008e8b
 8008d08:	08008eab 	.word	0x08008eab
 8008d0c:	08008ec9 	.word	0x08008ec9
 8008d10:	08008f0d 	.word	0x08008f0d
 8008d14:	08008fdd 	.word	0x08008fdd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 819c 	beq.w	800905e <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008d2c:	20c8      	movs	r0, #200	@ 0xc8
 8008d2e:	f001 fe1a 	bl	800a966 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 fd0d 	bl	800a752 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008d48:	e189      	b.n	800905e <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d107      	bne.n	8008d66 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2202      	movs	r2, #2
 8008d62:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008d64:	e18a      	b.n	800907c <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d70:	d914      	bls.n	8008d9c <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d78:	3301      	adds	r3, #1
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d903      	bls.n	8008d94 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	220d      	movs	r2, #13
 8008d90:	701a      	strb	r2, [r3, #0]
      break;
 8008d92:	e173      	b.n	800907c <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
      break;
 8008d9a:	e16f      	b.n	800907c <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008da2:	f103 020a 	add.w	r2, r3, #10
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008dac:	200a      	movs	r0, #10
 8008dae:	f001 fdda 	bl	800a966 <USBH_Delay>
      break;
 8008db2:	e163      	b.n	800907c <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008dc4:	2104      	movs	r1, #4
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008dca:	2064      	movs	r0, #100	@ 0x64
 8008dcc:	f001 fdcb 	bl	800a966 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 fc97 	bl	800a704 <USBH_LL_GetSpeed>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2205      	movs	r2, #5
 8008de4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008de6:	2100      	movs	r1, #0
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 faa2 	bl	800a332 <USBH_AllocPipe>
 8008dee:	4603      	mov	r3, r0
 8008df0:	461a      	mov	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008df6:	2180      	movs	r1, #128	@ 0x80
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 fa9a 	bl	800a332 <USBH_AllocPipe>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	461a      	mov	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7919      	ldrb	r1, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008e1a:	9202      	str	r2, [sp, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	9201      	str	r2, [sp, #4]
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	4603      	mov	r3, r0
 8008e24:	2280      	movs	r2, #128	@ 0x80
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 fa54 	bl	800a2d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	7959      	ldrb	r1, [r3, #5]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e40:	9202      	str	r2, [sp, #8]
 8008e42:	2200      	movs	r2, #0
 8008e44:	9201      	str	r2, [sp, #4]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 fa41 	bl	800a2d4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008e52:	e113      	b.n	800907c <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f917 	bl	8009088 <USBH_HandleEnum>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f040 80fd 	bne.w	8009062 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d103      	bne.n	8008e82 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2208      	movs	r2, #8
 8008e7e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008e80:	e0ef      	b.n	8009062 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2207      	movs	r2, #7
 8008e86:	701a      	strb	r2, [r3, #0]
      break;
 8008e88:	e0eb      	b.n	8009062 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80e8 	beq.w	8009066 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8008ea8:	e0dd      	b.n	8009066 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fc3f 	bl	8009736 <USBH_SetCfg>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f040 80d5 	bne.w	800906a <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2209      	movs	r2, #9
 8008ec4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008ec6:	e0d0      	b.n	800906a <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d016      	beq.n	8008f04 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fc4f 	bl	800977c <USBH_SetFeature>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d103      	bne.n	8008ef2 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	220a      	movs	r2, #10
 8008eee:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008ef0:	e0bd      	b.n	800906e <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	f040 80b9 	bne.w	800906e <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	220a      	movs	r2, #10
 8008f00:	701a      	strb	r2, [r3, #0]
      break;
 8008f02:	e0b4      	b.n	800906e <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	220a      	movs	r2, #10
 8008f08:	701a      	strb	r2, [r3, #0]
      break;
 8008f0a:	e0b0      	b.n	800906e <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 80ad 	beq.w	8009072 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
 8008f24:	e016      	b.n	8008f54 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008f26:	7bfa      	ldrb	r2, [r7, #15]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	32de      	adds	r2, #222	@ 0xde
 8008f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f30:	791a      	ldrb	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d108      	bne.n	8008f4e <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008f3c:	7bfa      	ldrb	r2, [r7, #15]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	32de      	adds	r2, #222	@ 0xde
 8008f42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008f4c:	e005      	b.n	8008f5a <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	3301      	adds	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0e5      	beq.n	8008f26 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d016      	beq.n	8008f92 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4798      	blx	r3
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2206      	movs	r2, #6
 8008f7a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f82:	2103      	movs	r1, #3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008f88:	e073      	b.n	8009072 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	220d      	movs	r2, #13
 8008f8e:	701a      	strb	r2, [r3, #0]
      break;
 8008f90:	e06f      	b.n	8009072 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	220d      	movs	r2, #13
 8008f96:	701a      	strb	r2, [r3, #0]
      break;
 8008f98:	e06b      	b.n	8009072 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d017      	beq.n	8008fd4 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	4798      	blx	r3
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	220b      	movs	r2, #11
 8008fc0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008fc2:	e058      	b.n	8009076 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d154      	bne.n	8009076 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	220d      	movs	r2, #13
 8008fd0:	701a      	strb	r2, [r3, #0]
      break;
 8008fd2:	e050      	b.n	8009076 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	220d      	movs	r2, #13
 8008fd8:	701a      	strb	r2, [r3, #0]
      break;
 8008fda:	e04c      	b.n	8009076 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d049      	beq.n	800907a <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	4798      	blx	r3
      }
      break;
 8008ff2:	e042      	b.n	800907a <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fd4b 	bl	8008a98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d009      	beq.n	8009020 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d005      	beq.n	8009036 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009030:	2105      	movs	r1, #5
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b01      	cmp	r3, #1
 8009040:	d107      	bne.n	8009052 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff fe21 	bl	8008c92 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009050:	e014      	b.n	800907c <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fb20 	bl	800a698 <USBH_LL_Start>
      break;
 8009058:	e010      	b.n	800907c <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800905a:	bf00      	nop
 800905c:	e00e      	b.n	800907c <USBH_Process+0x3c8>
      break;
 800905e:	bf00      	nop
 8009060:	e00c      	b.n	800907c <USBH_Process+0x3c8>
      break;
 8009062:	bf00      	nop
 8009064:	e00a      	b.n	800907c <USBH_Process+0x3c8>
    break;
 8009066:	bf00      	nop
 8009068:	e008      	b.n	800907c <USBH_Process+0x3c8>
      break;
 800906a:	bf00      	nop
 800906c:	e006      	b.n	800907c <USBH_Process+0x3c8>
      break;
 800906e:	bf00      	nop
 8009070:	e004      	b.n	800907c <USBH_Process+0x3c8>
      break;
 8009072:	bf00      	nop
 8009074:	e002      	b.n	800907c <USBH_Process+0x3c8>
      break;
 8009076:	bf00      	nop
 8009078:	e000      	b.n	800907c <USBH_Process+0x3c8>
      break;
 800907a:	bf00      	nop
  }
  return USBH_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop

08009088 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af04      	add	r7, sp, #16
 800908e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009094:	2301      	movs	r3, #1
 8009096:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	2b07      	cmp	r3, #7
 800909e:	f200 81bd 	bhi.w	800941c <USBH_HandleEnum+0x394>
 80090a2:	a201      	add	r2, pc, #4	@ (adr r2, 80090a8 <USBH_HandleEnum+0x20>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090c9 	.word	0x080090c9
 80090ac:	08009183 	.word	0x08009183
 80090b0:	080091ed 	.word	0x080091ed
 80090b4:	08009277 	.word	0x08009277
 80090b8:	080092e1 	.word	0x080092e1
 80090bc:	08009351 	.word	0x08009351
 80090c0:	08009397 	.word	0x08009397
 80090c4:	080093dd 	.word	0x080093dd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80090c8:	2108      	movs	r1, #8
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa50 	bl	8009570 <USBH_Get_DevDesc>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d12e      	bne.n	8009138 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7919      	ldrb	r1, [r3, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090fe:	9202      	str	r2, [sp, #8]
 8009100:	2200      	movs	r2, #0
 8009102:	9201      	str	r2, [sp, #4]
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	4603      	mov	r3, r0
 8009108:	2280      	movs	r2, #128	@ 0x80
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f8e2 	bl	800a2d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	7959      	ldrb	r1, [r3, #5]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009124:	9202      	str	r2, [sp, #8]
 8009126:	2200      	movs	r2, #0
 8009128:	9201      	str	r2, [sp, #4]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	4603      	mov	r3, r0
 800912e:	2200      	movs	r2, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 f8cf 	bl	800a2d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009136:	e173      	b.n	8009420 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	2b03      	cmp	r3, #3
 800913c:	f040 8170 	bne.w	8009420 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009146:	3301      	adds	r3, #1
 8009148:	b2da      	uxtb	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009156:	2b03      	cmp	r3, #3
 8009158:	d903      	bls.n	8009162 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	220d      	movs	r2, #13
 800915e:	701a      	strb	r2, [r3, #0]
      break;
 8009160:	e15e      	b.n	8009420 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	795b      	ldrb	r3, [r3, #5]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 f903 	bl	800a374 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	791b      	ldrb	r3, [r3, #4]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 f8fd 	bl	800a374 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	701a      	strb	r2, [r3, #0]
      break;
 8009180:	e14e      	b.n	8009420 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009182:	2112      	movs	r1, #18
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f9f3 	bl	8009570 <USBH_Get_DevDesc>
 800918a:	4603      	mov	r3, r0
 800918c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800919a:	e143      	b.n	8009424 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b03      	cmp	r3, #3
 80091a0:	f040 8140 	bne.w	8009424 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091aa:	3301      	adds	r3, #1
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d903      	bls.n	80091c6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	220d      	movs	r2, #13
 80091c2:	701a      	strb	r2, [r3, #0]
      break;
 80091c4:	e12e      	b.n	8009424 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	795b      	ldrb	r3, [r3, #5]
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 f8d1 	bl	800a374 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	791b      	ldrb	r3, [r3, #4]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 f8cb 	bl	800a374 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
      break;
 80091ea:	e11b      	b.n	8009424 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80091ec:	2101      	movs	r1, #1
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa7d 	bl	80096ee <USBH_SetAddress>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d130      	bne.n	8009260 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80091fe:	2002      	movs	r0, #2
 8009200:	f001 fbb1 	bl	800a966 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2203      	movs	r2, #3
 8009210:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7919      	ldrb	r1, [r3, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009226:	9202      	str	r2, [sp, #8]
 8009228:	2200      	movs	r2, #0
 800922a:	9201      	str	r2, [sp, #4]
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	4603      	mov	r3, r0
 8009230:	2280      	movs	r2, #128	@ 0x80
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 f84e 	bl	800a2d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	7959      	ldrb	r1, [r3, #5]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800924c:	9202      	str	r2, [sp, #8]
 800924e:	2200      	movs	r2, #0
 8009250:	9201      	str	r2, [sp, #4]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	4603      	mov	r3, r0
 8009256:	2200      	movs	r2, #0
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 f83b 	bl	800a2d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800925e:	e0e3      	b.n	8009428 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b03      	cmp	r3, #3
 8009264:	f040 80e0 	bne.w	8009428 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	220d      	movs	r2, #13
 800926c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	705a      	strb	r2, [r3, #1]
      break;
 8009274:	e0d8      	b.n	8009428 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009276:	2109      	movs	r1, #9
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f9a5 	bl	80095c8 <USBH_Get_CfgDesc>
 800927e:	4603      	mov	r3, r0
 8009280:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d103      	bne.n	8009290 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2204      	movs	r2, #4
 800928c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800928e:	e0cd      	b.n	800942c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b03      	cmp	r3, #3
 8009294:	f040 80ca 	bne.w	800942c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800929e:	3301      	adds	r3, #1
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d903      	bls.n	80092ba <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	220d      	movs	r2, #13
 80092b6:	701a      	strb	r2, [r3, #0]
      break;
 80092b8:	e0b8      	b.n	800942c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	795b      	ldrb	r3, [r3, #5]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f001 f857 	bl	800a374 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	791b      	ldrb	r3, [r3, #4]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 f851 	bl	800a374 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
      break;
 80092de:	e0a5      	b.n	800942c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f96d 	bl	80095c8 <USBH_Get_CfgDesc>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d103      	bne.n	8009300 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2205      	movs	r2, #5
 80092fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092fe:	e097      	b.n	8009430 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	2b03      	cmp	r3, #3
 8009304:	f040 8094 	bne.w	8009430 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800930e:	3301      	adds	r3, #1
 8009310:	b2da      	uxtb	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800931e:	2b03      	cmp	r3, #3
 8009320:	d903      	bls.n	800932a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	220d      	movs	r2, #13
 8009326:	701a      	strb	r2, [r3, #0]
      break;
 8009328:	e082      	b.n	8009430 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	795b      	ldrb	r3, [r3, #5]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 f81f 	bl	800a374 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	791b      	ldrb	r3, [r3, #4]
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 f819 	bl	800a374 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	701a      	strb	r2, [r3, #0]
      break;
 800934e:	e06f      	b.n	8009430 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009356:	2b00      	cmp	r3, #0
 8009358:	d019      	beq.n	800938e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009366:	23ff      	movs	r3, #255	@ 0xff
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f957 	bl	800961c <USBH_Get_StringDesc>
 800936e:	4603      	mov	r3, r0
 8009370:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d103      	bne.n	8009380 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2206      	movs	r2, #6
 800937c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800937e:	e059      	b.n	8009434 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b03      	cmp	r3, #3
 8009384:	d156      	bne.n	8009434 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2206      	movs	r2, #6
 800938a:	705a      	strb	r2, [r3, #1]
      break;
 800938c:	e052      	b.n	8009434 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2206      	movs	r2, #6
 8009392:	705a      	strb	r2, [r3, #1]
      break;
 8009394:	e04e      	b.n	8009434 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800939c:	2b00      	cmp	r3, #0
 800939e:	d019      	beq.n	80093d4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80093ac:	23ff      	movs	r3, #255	@ 0xff
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f934 	bl	800961c <USBH_Get_StringDesc>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d103      	bne.n	80093c6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2207      	movs	r2, #7
 80093c2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80093c4:	e038      	b.n	8009438 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d135      	bne.n	8009438 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2207      	movs	r2, #7
 80093d0:	705a      	strb	r2, [r3, #1]
      break;
 80093d2:	e031      	b.n	8009438 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2207      	movs	r2, #7
 80093d8:	705a      	strb	r2, [r3, #1]
      break;
 80093da:	e02d      	b.n	8009438 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d017      	beq.n	8009416 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093f2:	23ff      	movs	r3, #255	@ 0xff
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f911 	bl	800961c <USBH_Get_StringDesc>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009408:	e018      	b.n	800943c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	2b03      	cmp	r3, #3
 800940e:	d115      	bne.n	800943c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
      break;
 8009414:	e012      	b.n	800943c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
      break;
 800941a:	e00f      	b.n	800943c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800941c:	bf00      	nop
 800941e:	e00e      	b.n	800943e <USBH_HandleEnum+0x3b6>
      break;
 8009420:	bf00      	nop
 8009422:	e00c      	b.n	800943e <USBH_HandleEnum+0x3b6>
      break;
 8009424:	bf00      	nop
 8009426:	e00a      	b.n	800943e <USBH_HandleEnum+0x3b6>
      break;
 8009428:	bf00      	nop
 800942a:	e008      	b.n	800943e <USBH_HandleEnum+0x3b6>
      break;
 800942c:	bf00      	nop
 800942e:	e006      	b.n	800943e <USBH_HandleEnum+0x3b6>
      break;
 8009430:	bf00      	nop
 8009432:	e004      	b.n	800943e <USBH_HandleEnum+0x3b6>
      break;
 8009434:	bf00      	nop
 8009436:	e002      	b.n	800943e <USBH_HandleEnum+0x3b6>
      break;
 8009438:	bf00      	nop
 800943a:	e000      	b.n	800943e <USBH_HandleEnum+0x3b6>
      break;
 800943c:	bf00      	nop
  }
  return Status;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800945a:	bf00      	nop
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f804 	bl	800948a <USBH_HandleSof>
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b0b      	cmp	r3, #11
 800949a:	d10a      	bne.n	80094b2 <USBH_HandleSof+0x28>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d005      	beq.n	80094b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	4798      	blx	r3
  }
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 80094ca:	bf00      	nop
}
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80094ee:	bf00      	nop
}
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 f8c0 	bl	800a6ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	791b      	ldrb	r3, [r3, #4]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 ff0d 	bl	800a374 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	795b      	ldrb	r3, [r3, #5]
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 ff07 	bl	800a374 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af02      	add	r7, sp, #8
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800957c:	887b      	ldrh	r3, [r7, #2]
 800957e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009582:	d901      	bls.n	8009588 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009584:	2303      	movs	r3, #3
 8009586:	e01b      	b.n	80095c0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800958e:	887b      	ldrh	r3, [r7, #2]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4613      	mov	r3, r2
 8009594:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009598:	2100      	movs	r1, #0
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f872 	bl	8009684 <USBH_GetDescriptor>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d109      	bne.n	80095be <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80095b0:	887a      	ldrh	r2, [r7, #2]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f929 	bl	800980c <USBH_ParseDevDesc>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	331c      	adds	r3, #28
 80095d8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80095da:	887b      	ldrh	r3, [r7, #2]
 80095dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095e0:	d901      	bls.n	80095e6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e016      	b.n	8009614 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80095e6:	887b      	ldrh	r3, [r7, #2]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f846 	bl	8009684 <USBH_GetDescriptor>
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d107      	bne.n	8009612 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009602:	887b      	ldrh	r3, [r7, #2]
 8009604:	461a      	mov	r2, r3
 8009606:	68b9      	ldr	r1, [r7, #8]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f9af 	bl	800996c <USBH_ParseCfgDesc>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af02      	add	r7, sp, #8
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	607a      	str	r2, [r7, #4]
 8009626:	461a      	mov	r2, r3
 8009628:	460b      	mov	r3, r1
 800962a:	72fb      	strb	r3, [r7, #11]
 800962c:	4613      	mov	r3, r2
 800962e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009630:	893b      	ldrh	r3, [r7, #8]
 8009632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009636:	d802      	bhi.n	800963e <USBH_Get_StringDesc+0x22>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800963e:	2303      	movs	r3, #3
 8009640:	e01c      	b.n	800967c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009642:	7afb      	ldrb	r3, [r7, #11]
 8009644:	b29b      	uxth	r3, r3
 8009646:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800964a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009652:	893b      	ldrh	r3, [r7, #8]
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	460b      	mov	r3, r1
 8009658:	2100      	movs	r1, #0
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 f812 	bl	8009684 <USBH_GetDescriptor>
 8009660:	4603      	mov	r3, r0
 8009662:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d107      	bne.n	800967a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009670:	893a      	ldrh	r2, [r7, #8]
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fb8c 	bl	8009d92 <USBH_ParseStringDesc>
  }

  return status;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	607b      	str	r3, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	72fb      	strb	r3, [r7, #11]
 8009692:	4613      	mov	r3, r2
 8009694:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	789b      	ldrb	r3, [r3, #2]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d11c      	bne.n	80096d8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2206      	movs	r2, #6
 80096ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	893a      	ldrh	r2, [r7, #8]
 80096b4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80096b6:	893b      	ldrh	r3, [r7, #8]
 80096b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80096bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096c0:	d104      	bne.n	80096cc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f240 4209 	movw	r2, #1033	@ 0x409
 80096c8:	829a      	strh	r2, [r3, #20]
 80096ca:	e002      	b.n	80096d2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8b3a      	ldrh	r2, [r7, #24]
 80096d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80096d8:	8b3b      	ldrh	r3, [r7, #24]
 80096da:	461a      	mov	r2, r3
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fba4 	bl	8009e2c <USBH_CtlReq>
 80096e4:	4603      	mov	r3, r0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	460b      	mov	r3, r1
 80096f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	789b      	ldrb	r3, [r3, #2]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d10f      	bne.n	8009722 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2205      	movs	r2, #5
 800970c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	b29a      	uxth	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009722:	2200      	movs	r2, #0
 8009724:	2100      	movs	r1, #0
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fb80 	bl	8009e2c <USBH_CtlReq>
 800972c:	4603      	mov	r3, r0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	789b      	ldrb	r3, [r3, #2]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d10e      	bne.n	8009768 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2209      	movs	r2, #9
 8009754:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	887a      	ldrh	r2, [r7, #2]
 800975a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009768:	2200      	movs	r2, #0
 800976a:	2100      	movs	r1, #0
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fb5d 	bl	8009e2c <USBH_CtlReq>
 8009772:	4603      	mov	r3, r0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	789b      	ldrb	r3, [r3, #2]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d10f      	bne.n	80097b0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2203      	movs	r2, #3
 800979a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	b29a      	uxth	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80097b0:	2200      	movs	r2, #0
 80097b2:	2100      	movs	r1, #0
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fb39 	bl	8009e2c <USBH_CtlReq>
 80097ba:	4603      	mov	r3, r0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	789b      	ldrb	r3, [r3, #2]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d10f      	bne.n	80097f8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80097f8:	2200      	movs	r2, #0
 80097fa:	2100      	movs	r1, #0
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fb15 	bl	8009e2c <USBH_CtlReq>
 8009802:	4603      	mov	r3, r0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009820:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800982c:	2302      	movs	r3, #2
 800982e:	e094      	b.n	800995a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	781a      	ldrb	r2, [r3, #0]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	785a      	ldrb	r2, [r3, #1]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	3302      	adds	r3, #2
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	3303      	adds	r3, #3
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	b29b      	uxth	r3, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	b29a      	uxth	r2, r3
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	791a      	ldrb	r2, [r3, #4]
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	795a      	ldrb	r2, [r3, #5]
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	799a      	ldrb	r2, [r3, #6]
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	79da      	ldrb	r2, [r3, #7]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009880:	2b00      	cmp	r3, #0
 8009882:	d004      	beq.n	800988e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800988a:	2b01      	cmp	r3, #1
 800988c:	d11b      	bne.n	80098c6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	79db      	ldrb	r3, [r3, #7]
 8009892:	2b20      	cmp	r3, #32
 8009894:	dc0f      	bgt.n	80098b6 <USBH_ParseDevDesc+0xaa>
 8009896:	2b08      	cmp	r3, #8
 8009898:	db0f      	blt.n	80098ba <USBH_ParseDevDesc+0xae>
 800989a:	3b08      	subs	r3, #8
 800989c:	4a32      	ldr	r2, [pc, #200]	@ (8009968 <USBH_ParseDevDesc+0x15c>)
 800989e:	fa22 f303 	lsr.w	r3, r2, r3
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bf14      	ite	ne
 80098aa:	2301      	movne	r3, #1
 80098ac:	2300      	moveq	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d106      	bne.n	80098c2 <USBH_ParseDevDesc+0xb6>
 80098b4:	e001      	b.n	80098ba <USBH_ParseDevDesc+0xae>
 80098b6:	2b40      	cmp	r3, #64	@ 0x40
 80098b8:	d003      	beq.n	80098c2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2208      	movs	r2, #8
 80098be:	71da      	strb	r2, [r3, #7]
        break;
 80098c0:	e000      	b.n	80098c4 <USBH_ParseDevDesc+0xb8>
        break;
 80098c2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80098c4:	e00e      	b.n	80098e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d107      	bne.n	80098e0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	79db      	ldrb	r3, [r3, #7]
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	d005      	beq.n	80098e4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	2208      	movs	r2, #8
 80098dc:	71da      	strb	r2, [r3, #7]
 80098de:	e001      	b.n	80098e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80098e0:	2303      	movs	r3, #3
 80098e2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80098e4:	88fb      	ldrh	r3, [r7, #6]
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	d936      	bls.n	8009958 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	3308      	adds	r3, #8
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	461a      	mov	r2, r3
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	3309      	adds	r3, #9
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	021b      	lsls	r3, r3, #8
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4313      	orrs	r3, r2
 80098fe:	b29a      	uxth	r2, r3
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	330a      	adds	r3, #10
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	330b      	adds	r3, #11
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	b29b      	uxth	r3, r3
 8009916:	4313      	orrs	r3, r2
 8009918:	b29a      	uxth	r2, r3
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	330c      	adds	r3, #12
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	461a      	mov	r2, r3
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	330d      	adds	r3, #13
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	b29b      	uxth	r3, r3
 8009930:	4313      	orrs	r3, r2
 8009932:	b29a      	uxth	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	7b9a      	ldrb	r2, [r3, #14]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	7bda      	ldrb	r2, [r3, #15]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	7c1a      	ldrb	r2, [r3, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	7c5a      	ldrb	r2, [r3, #17]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009958:	7dfb      	ldrb	r3, [r7, #23]
}
 800995a:	4618      	mov	r0, r3
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	01000101 	.word	0x01000101

0800996c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08c      	sub	sp, #48	@ 0x30
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009980:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800999a:	2302      	movs	r3, #2
 800999c:	e0de      	b.n	8009b5c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80099a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	d002      	beq.n	80099b0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	2209      	movs	r2, #9
 80099ae:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	781a      	ldrb	r2, [r3, #0]
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	785a      	ldrb	r2, [r3, #1]
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	3302      	adds	r3, #2
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	3303      	adds	r3, #3
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	021b      	lsls	r3, r3, #8
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	4313      	orrs	r3, r2
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099da:	bf28      	it	cs
 80099dc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	791a      	ldrb	r2, [r3, #4]
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	795a      	ldrb	r2, [r3, #5]
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	799a      	ldrb	r2, [r3, #6]
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	79da      	ldrb	r2, [r3, #7]
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	7a1a      	ldrb	r2, [r3, #8]
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	2b09      	cmp	r3, #9
 8009a12:	f240 80a1 	bls.w	8009b58 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8009a16:	2309      	movs	r3, #9
 8009a18:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a1e:	e085      	b.n	8009b2c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a20:	f107 0316 	add.w	r3, r7, #22
 8009a24:	4619      	mov	r1, r3
 8009a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a28:	f000 f9e6 	bl	8009df8 <USBH_GetNextDesc>
 8009a2c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d17a      	bne.n	8009b2c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b09      	cmp	r3, #9
 8009a3c:	d002      	beq.n	8009a44 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	2209      	movs	r2, #9
 8009a42:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a48:	221a      	movs	r2, #26
 8009a4a:	fb02 f303 	mul.w	r3, r2, r3
 8009a4e:	3308      	adds	r3, #8
 8009a50:	6a3a      	ldr	r2, [r7, #32]
 8009a52:	4413      	add	r3, r2
 8009a54:	3302      	adds	r3, #2
 8009a56:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a5a:	69f8      	ldr	r0, [r7, #28]
 8009a5c:	f000 f882 	bl	8009b64 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a6a:	e043      	b.n	8009af4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a6c:	f107 0316 	add.w	r3, r7, #22
 8009a70:	4619      	mov	r1, r3
 8009a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a74:	f000 f9c0 	bl	8009df8 <USBH_GetNextDesc>
 8009a78:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7c:	785b      	ldrb	r3, [r3, #1]
 8009a7e:	2b05      	cmp	r3, #5
 8009a80:	d138      	bne.n	8009af4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	795b      	ldrb	r3, [r3, #5]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d113      	bne.n	8009ab2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d003      	beq.n	8009a9a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	799b      	ldrb	r3, [r3, #6]
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d10b      	bne.n	8009ab2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	79db      	ldrb	r3, [r3, #7]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <USBH_ParseCfgDesc+0x14e>
 8009aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2b09      	cmp	r3, #9
 8009aa8:	d007      	beq.n	8009aba <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aac:	2209      	movs	r2, #9
 8009aae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ab0:	e003      	b.n	8009aba <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab4:	2207      	movs	r2, #7
 8009ab6:	701a      	strb	r2, [r3, #0]
 8009ab8:	e000      	b.n	8009abc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009aba:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ac0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ac4:	3201      	adds	r2, #1
 8009ac6:	00d2      	lsls	r2, r2, #3
 8009ac8:	211a      	movs	r1, #26
 8009aca:	fb01 f303 	mul.w	r3, r1, r3
 8009ace:	4413      	add	r3, r2
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	6a3a      	ldr	r2, [r7, #32]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009ada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009adc:	69b9      	ldr	r1, [r7, #24]
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 f86f 	bl	8009bc2 <USBH_ParseEPDesc>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009aea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009aee:	3301      	adds	r3, #1
 8009af0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009af4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d80a      	bhi.n	8009b12 <USBH_ParseCfgDesc+0x1a6>
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	791b      	ldrb	r3, [r3, #4]
 8009b00:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d204      	bcs.n	8009b12 <USBH_ParseCfgDesc+0x1a6>
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	885a      	ldrh	r2, [r3, #2]
 8009b0c:	8afb      	ldrh	r3, [r7, #22]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d8ac      	bhi.n	8009a6c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	791b      	ldrb	r3, [r3, #4]
 8009b16:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d201      	bcs.n	8009b22 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e01c      	b.n	8009b5c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8009b22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b26:	3301      	adds	r3, #1
 8009b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d805      	bhi.n	8009b40 <USBH_ParseCfgDesc+0x1d4>
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	885a      	ldrh	r2, [r3, #2]
 8009b38:	8afb      	ldrh	r3, [r7, #22]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	f63f af70 	bhi.w	8009a20 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	791b      	ldrb	r3, [r3, #4]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	bf28      	it	cs
 8009b48:	2302      	movcs	r3, #2
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d201      	bcs.n	8009b58 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e001      	b.n	8009b5c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8009b58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3730      	adds	r7, #48	@ 0x30
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781a      	ldrb	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	785a      	ldrb	r2, [r3, #1]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	789a      	ldrb	r2, [r3, #2]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	78da      	ldrb	r2, [r3, #3]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	791a      	ldrb	r2, [r3, #4]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	795a      	ldrb	r2, [r3, #5]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	799a      	ldrb	r2, [r3, #6]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	79da      	ldrb	r2, [r3, #7]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	7a1a      	ldrb	r2, [r3, #8]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	721a      	strb	r2, [r3, #8]
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b087      	sub	sp, #28
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	781a      	ldrb	r2, [r3, #0]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	785a      	ldrb	r2, [r3, #1]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	789a      	ldrb	r2, [r3, #2]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	78da      	ldrb	r2, [r3, #3]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3305      	adds	r3, #5
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	799a      	ldrb	r2, [r3, #6]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	889b      	ldrh	r3, [r3, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d009      	beq.n	8009c30 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c24:	d804      	bhi.n	8009c30 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c2e:	d901      	bls.n	8009c34 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009c30:	2303      	movs	r3, #3
 8009c32:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d136      	bne.n	8009cac <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	78db      	ldrb	r3, [r3, #3]
 8009c42:	f003 0303 	and.w	r3, r3, #3
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d108      	bne.n	8009c5c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	889b      	ldrh	r3, [r3, #4]
 8009c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c52:	f240 8097 	bls.w	8009d84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c56:	2303      	movs	r3, #3
 8009c58:	75fb      	strb	r3, [r7, #23]
 8009c5a:	e093      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	78db      	ldrb	r3, [r3, #3]
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d107      	bne.n	8009c78 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	889b      	ldrh	r3, [r3, #4]
 8009c6c:	2b40      	cmp	r3, #64	@ 0x40
 8009c6e:	f240 8089 	bls.w	8009d84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c72:	2303      	movs	r3, #3
 8009c74:	75fb      	strb	r3, [r7, #23]
 8009c76:	e085      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	78db      	ldrb	r3, [r3, #3]
 8009c7c:	f003 0303 	and.w	r3, r3, #3
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d005      	beq.n	8009c90 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	78db      	ldrb	r3, [r3, #3]
 8009c88:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d10a      	bne.n	8009ca6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	799b      	ldrb	r3, [r3, #6]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <USBH_ParseEPDesc+0xde>
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	799b      	ldrb	r3, [r3, #6]
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d970      	bls.n	8009d82 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ca4:	e06d      	b.n	8009d82 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	75fb      	strb	r3, [r7, #23]
 8009caa:	e06b      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d13c      	bne.n	8009d30 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	78db      	ldrb	r3, [r3, #3]
 8009cba:	f003 0303 	and.w	r3, r3, #3
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d005      	beq.n	8009cce <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	78db      	ldrb	r3, [r3, #3]
 8009cc6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d106      	bne.n	8009cdc <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	889b      	ldrh	r3, [r3, #4]
 8009cd2:	2b40      	cmp	r3, #64	@ 0x40
 8009cd4:	d956      	bls.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009cda:	e053      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	78db      	ldrb	r3, [r3, #3]
 8009ce0:	f003 0303 	and.w	r3, r3, #3
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d10e      	bne.n	8009d06 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	799b      	ldrb	r3, [r3, #6]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d007      	beq.n	8009d00 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009cf4:	2b10      	cmp	r3, #16
 8009cf6:	d803      	bhi.n	8009d00 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009cfc:	2b40      	cmp	r3, #64	@ 0x40
 8009cfe:	d941      	bls.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d00:	2303      	movs	r3, #3
 8009d02:	75fb      	strb	r3, [r7, #23]
 8009d04:	e03e      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	78db      	ldrb	r3, [r3, #3]
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d10b      	bne.n	8009d2a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	799b      	ldrb	r3, [r3, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <USBH_ParseEPDesc+0x162>
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	889b      	ldrh	r3, [r3, #4]
 8009d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d22:	d32f      	bcc.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d24:	2303      	movs	r3, #3
 8009d26:	75fb      	strb	r3, [r7, #23]
 8009d28:	e02c      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	75fb      	strb	r3, [r7, #23]
 8009d2e:	e029      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d120      	bne.n	8009d7c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	78db      	ldrb	r3, [r3, #3]
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	889b      	ldrh	r3, [r3, #4]
 8009d4a:	2b08      	cmp	r3, #8
 8009d4c:	d01a      	beq.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	75fb      	strb	r3, [r7, #23]
 8009d52:	e017      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	78db      	ldrb	r3, [r3, #3]
 8009d58:	f003 0303 	and.w	r3, r3, #3
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d10a      	bne.n	8009d76 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	799b      	ldrb	r3, [r3, #6]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <USBH_ParseEPDesc+0x1ae>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	889b      	ldrh	r3, [r3, #4]
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d909      	bls.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d70:	2303      	movs	r3, #3
 8009d72:	75fb      	strb	r3, [r7, #23]
 8009d74:	e006      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009d76:	2303      	movs	r3, #3
 8009d78:	75fb      	strb	r3, [r7, #23]
 8009d7a:	e003      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	75fb      	strb	r3, [r7, #23]
 8009d80:	e000      	b.n	8009d84 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d82:	bf00      	nop
  }

  return status;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b087      	sub	sp, #28
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	60b9      	str	r1, [r7, #8]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	3301      	adds	r3, #1
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d120      	bne.n	8009dec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	1e9a      	subs	r2, r3, #2
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	4293      	cmp	r3, r2
 8009db4:	bf28      	it	cs
 8009db6:	4613      	movcs	r3, r2
 8009db8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3302      	adds	r3, #2
 8009dbe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	82fb      	strh	r3, [r7, #22]
 8009dc4:	e00b      	b.n	8009dde <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009dc6:	8afb      	ldrh	r3, [r7, #22]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4413      	add	r3, r2
 8009dcc:	781a      	ldrb	r2, [r3, #0]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009dd8:	8afb      	ldrh	r3, [r7, #22]
 8009dda:	3302      	adds	r3, #2
 8009ddc:	82fb      	strh	r3, [r7, #22]
 8009dde:	8afa      	ldrh	r2, [r7, #22]
 8009de0:	8abb      	ldrh	r3, [r7, #20]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d3ef      	bcc.n	8009dc6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]
  }
}
 8009dec:	bf00      	nop
 8009dee:	371c      	adds	r7, #28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	7812      	ldrb	r2, [r2, #0]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	789b      	ldrb	r3, [r3, #2]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d002      	beq.n	8009e4c <USBH_CtlReq+0x20>
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d00f      	beq.n	8009e6a <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8009e4a:	e027      	b.n	8009e9c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	88fa      	ldrh	r2, [r7, #6]
 8009e56:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2202      	movs	r2, #2
 8009e62:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009e64:	2301      	movs	r3, #1
 8009e66:	75fb      	strb	r3, [r7, #23]
      break;
 8009e68:	e018      	b.n	8009e9c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f81c 	bl	8009ea8 <USBH_HandleControl>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <USBH_CtlReq+0x54>
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d106      	bne.n	8009e8e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2201      	movs	r2, #1
 8009e84:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	761a      	strb	r2, [r3, #24]
      break;
 8009e8c:	e005      	b.n	8009e9a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d102      	bne.n	8009e9a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2201      	movs	r2, #1
 8009e98:	709a      	strb	r2, [r3, #2]
      break;
 8009e9a:	bf00      	nop
  }
  return status;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af02      	add	r7, sp, #8
 8009eae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	7e1b      	ldrb	r3, [r3, #24]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	2b0a      	cmp	r3, #10
 8009ec0:	f200 8157 	bhi.w	800a172 <USBH_HandleControl+0x2ca>
 8009ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ecc <USBH_HandleControl+0x24>)
 8009ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eca:	bf00      	nop
 8009ecc:	08009ef9 	.word	0x08009ef9
 8009ed0:	08009f13 	.word	0x08009f13
 8009ed4:	08009f7d 	.word	0x08009f7d
 8009ed8:	08009fa3 	.word	0x08009fa3
 8009edc:	08009fdd 	.word	0x08009fdd
 8009ee0:	0800a007 	.word	0x0800a007
 8009ee4:	0800a059 	.word	0x0800a059
 8009ee8:	0800a07b 	.word	0x0800a07b
 8009eec:	0800a0b7 	.word	0x0800a0b7
 8009ef0:	0800a0dd 	.word	0x0800a0dd
 8009ef4:	0800a11b 	.word	0x0800a11b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f103 0110 	add.w	r1, r3, #16
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	795b      	ldrb	r3, [r3, #5]
 8009f02:	461a      	mov	r2, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f945 	bl	800a194 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	761a      	strb	r2, [r3, #24]
      break;
 8009f10:	e13a      	b.n	800a188 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	795b      	ldrb	r3, [r3, #5]
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fcc7 	bl	800a8ac <USBH_LL_GetURBState>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d11e      	bne.n	8009f66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	7c1b      	ldrb	r3, [r3, #16]
 8009f2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	8adb      	ldrh	r3, [r3, #22]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009f3a:	7b7b      	ldrb	r3, [r7, #13]
 8009f3c:	2b80      	cmp	r3, #128	@ 0x80
 8009f3e:	d103      	bne.n	8009f48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2203      	movs	r2, #3
 8009f44:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009f46:	e116      	b.n	800a176 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	761a      	strb	r2, [r3, #24]
      break;
 8009f4e:	e112      	b.n	800a176 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8009f50:	7b7b      	ldrb	r3, [r7, #13]
 8009f52:	2b80      	cmp	r3, #128	@ 0x80
 8009f54:	d103      	bne.n	8009f5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2209      	movs	r2, #9
 8009f5a:	761a      	strb	r2, [r3, #24]
      break;
 8009f5c:	e10b      	b.n	800a176 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2207      	movs	r2, #7
 8009f62:	761a      	strb	r2, [r3, #24]
      break;
 8009f64:	e107      	b.n	800a176 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d003      	beq.n	8009f74 <USBH_HandleControl+0xcc>
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	f040 8101 	bne.w	800a176 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	220b      	movs	r2, #11
 8009f78:	761a      	strb	r2, [r3, #24]
      break;
 8009f7a:	e0fc      	b.n	800a176 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6899      	ldr	r1, [r3, #8]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	899a      	ldrh	r2, [r3, #12]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	791b      	ldrb	r3, [r3, #4]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f93c 	bl	800a212 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	761a      	strb	r2, [r3, #24]
      break;
 8009fa0:	e0f2      	b.n	800a188 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	791b      	ldrb	r3, [r3, #4]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc7f 	bl	800a8ac <USBH_LL_GetURBState>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009fb2:	7bbb      	ldrb	r3, [r7, #14]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d103      	bne.n	8009fc0 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2209      	movs	r2, #9
 8009fbc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009fbe:	e0dc      	b.n	800a17a <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8009fc0:	7bbb      	ldrb	r3, [r7, #14]
 8009fc2:	2b05      	cmp	r3, #5
 8009fc4:	d102      	bne.n	8009fcc <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8009fca:	e0d6      	b.n	800a17a <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	f040 80d3 	bne.w	800a17a <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	220b      	movs	r2, #11
 8009fd8:	761a      	strb	r2, [r3, #24]
      break;
 8009fda:	e0ce      	b.n	800a17a <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6899      	ldr	r1, [r3, #8]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	899a      	ldrh	r2, [r3, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	795b      	ldrb	r3, [r3, #5]
 8009fe8:	2001      	movs	r0, #1
 8009fea:	9000      	str	r0, [sp, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f8eb 	bl	800a1c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2206      	movs	r2, #6
 800a002:	761a      	strb	r2, [r3, #24]
      break;
 800a004:	e0c0      	b.n	800a188 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	795b      	ldrb	r3, [r3, #5]
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fc4d 	bl	800a8ac <USBH_LL_GetURBState>
 800a012:	4603      	mov	r3, r0
 800a014:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a016:	7bbb      	ldrb	r3, [r7, #14]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d103      	bne.n	800a024 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2207      	movs	r2, #7
 800a020:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a022:	e0ac      	b.n	800a17e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b05      	cmp	r3, #5
 800a028:	d105      	bne.n	800a036 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	220c      	movs	r2, #12
 800a02e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a030:	2303      	movs	r3, #3
 800a032:	73fb      	strb	r3, [r7, #15]
      break;
 800a034:	e0a3      	b.n	800a17e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d103      	bne.n	800a044 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2205      	movs	r2, #5
 800a040:	761a      	strb	r2, [r3, #24]
      break;
 800a042:	e09c      	b.n	800a17e <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	2b04      	cmp	r3, #4
 800a048:	f040 8099 	bne.w	800a17e <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	220b      	movs	r2, #11
 800a050:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a052:	2302      	movs	r3, #2
 800a054:	73fb      	strb	r3, [r7, #15]
      break;
 800a056:	e092      	b.n	800a17e <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	791b      	ldrb	r3, [r3, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	2100      	movs	r1, #0
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f8d6 	bl	800a212 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2208      	movs	r2, #8
 800a076:	761a      	strb	r2, [r3, #24]

      break;
 800a078:	e086      	b.n	800a188 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	791b      	ldrb	r3, [r3, #4]
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fc13 	bl	800a8ac <USBH_LL_GetURBState>
 800a086:	4603      	mov	r3, r0
 800a088:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d105      	bne.n	800a09c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	220d      	movs	r2, #13
 800a094:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a09a:	e072      	b.n	800a182 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d103      	bne.n	800a0aa <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	220b      	movs	r2, #11
 800a0a6:	761a      	strb	r2, [r3, #24]
      break;
 800a0a8:	e06b      	b.n	800a182 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800a0aa:	7bbb      	ldrb	r3, [r7, #14]
 800a0ac:	2b05      	cmp	r3, #5
 800a0ae:	d168      	bne.n	800a182 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b4:	e065      	b.n	800a182 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	795b      	ldrb	r3, [r3, #5]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	9200      	str	r2, [sp, #0]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f880 	bl	800a1c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	220a      	movs	r2, #10
 800a0d8:	761a      	strb	r2, [r3, #24]
      break;
 800a0da:	e055      	b.n	800a188 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	795b      	ldrb	r3, [r3, #5]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fbe2 	bl	800a8ac <USBH_LL_GetURBState>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d105      	bne.n	800a0fe <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	220d      	movs	r2, #13
 800a0fa:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a0fc:	e043      	b.n	800a186 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
 800a100:	2b02      	cmp	r3, #2
 800a102:	d103      	bne.n	800a10c <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2209      	movs	r2, #9
 800a108:	761a      	strb	r2, [r3, #24]
      break;
 800a10a:	e03c      	b.n	800a186 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d139      	bne.n	800a186 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	220b      	movs	r2, #11
 800a116:	761a      	strb	r2, [r3, #24]
      break;
 800a118:	e035      	b.n	800a186 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	7e5b      	ldrb	r3, [r3, #25]
 800a11e:	3301      	adds	r3, #1
 800a120:	b2da      	uxtb	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	765a      	strb	r2, [r3, #25]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	7e5b      	ldrb	r3, [r3, #25]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d806      	bhi.n	800a13c <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a13a:	e025      	b.n	800a188 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a142:	2106      	movs	r1, #6
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	795b      	ldrb	r3, [r3, #5]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f90d 	bl	800a374 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	791b      	ldrb	r3, [r3, #4]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f907 	bl	800a374 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a16c:	2302      	movs	r3, #2
 800a16e:	73fb      	strb	r3, [r7, #15]
      break;
 800a170:	e00a      	b.n	800a188 <USBH_HandleControl+0x2e0>

    default:
      break;
 800a172:	bf00      	nop
 800a174:	e008      	b.n	800a188 <USBH_HandleControl+0x2e0>
      break;
 800a176:	bf00      	nop
 800a178:	e006      	b.n	800a188 <USBH_HandleControl+0x2e0>
      break;
 800a17a:	bf00      	nop
 800a17c:	e004      	b.n	800a188 <USBH_HandleControl+0x2e0>
      break;
 800a17e:	bf00      	nop
 800a180:	e002      	b.n	800a188 <USBH_HandleControl+0x2e0>
      break;
 800a182:	bf00      	nop
 800a184:	e000      	b.n	800a188 <USBH_HandleControl+0x2e0>
      break;
 800a186:	bf00      	nop
  }

  return status;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop

0800a194 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af04      	add	r7, sp, #16
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1a2:	79f9      	ldrb	r1, [r7, #7]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	9302      	str	r3, [sp, #8]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 fb46 	bl	800a84a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af04      	add	r7, sp, #16
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	80fb      	strh	r3, [r7, #6]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1ec:	7979      	ldrb	r1, [r7, #5]
 800a1ee:	7e3b      	ldrb	r3, [r7, #24]
 800a1f0:	9303      	str	r3, [sp, #12]
 800a1f2:	88fb      	ldrh	r3, [r7, #6]
 800a1f4:	9302      	str	r3, [sp, #8]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	2300      	movs	r3, #0
 800a200:	2200      	movs	r2, #0
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 fb21 	bl	800a84a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b088      	sub	sp, #32
 800a216:	af04      	add	r7, sp, #16
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	4611      	mov	r1, r2
 800a21e:	461a      	mov	r2, r3
 800a220:	460b      	mov	r3, r1
 800a222:	80fb      	strh	r3, [r7, #6]
 800a224:	4613      	mov	r3, r2
 800a226:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a228:	7979      	ldrb	r1, [r7, #5]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	9302      	str	r3, [sp, #8]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	2301      	movs	r3, #1
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	2300      	movs	r3, #0
 800a23c:	2201      	movs	r2, #1
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 fb03 	bl	800a84a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a244:	2300      	movs	r3, #0

}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b088      	sub	sp, #32
 800a252:	af04      	add	r7, sp, #16
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	4611      	mov	r1, r2
 800a25a:	461a      	mov	r2, r3
 800a25c:	460b      	mov	r3, r1
 800a25e:	80fb      	strh	r3, [r7, #6]
 800a260:	4613      	mov	r3, r2
 800a262:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a272:	7979      	ldrb	r1, [r7, #5]
 800a274:	7e3b      	ldrb	r3, [r7, #24]
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	88fb      	ldrh	r3, [r7, #6]
 800a27a:	9302      	str	r3, [sp, #8]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	2301      	movs	r3, #1
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2302      	movs	r3, #2
 800a286:	2200      	movs	r2, #0
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fade 	bl	800a84a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af04      	add	r7, sp, #16
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	80fb      	strh	r3, [r7, #6]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2ae:	7979      	ldrb	r1, [r7, #5]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9303      	str	r3, [sp, #12]
 800a2b4:	88fb      	ldrh	r3, [r7, #6]
 800a2b6:	9302      	str	r3, [sp, #8]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	9301      	str	r3, [sp, #4]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 fac0 	bl	800a84a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af04      	add	r7, sp, #16
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	70fb      	strb	r3, [r7, #3]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70bb      	strb	r3, [r7, #2]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a2ee:	7878      	ldrb	r0, [r7, #1]
 800a2f0:	78ba      	ldrb	r2, [r7, #2]
 800a2f2:	78f9      	ldrb	r1, [r7, #3]
 800a2f4:	8b3b      	ldrh	r3, [r7, #24]
 800a2f6:	9302      	str	r3, [sp, #8]
 800a2f8:	7d3b      	ldrb	r3, [r7, #20]
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	7c3b      	ldrb	r3, [r7, #16]
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	4603      	mov	r3, r0
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fa53 	bl	800a7ae <USBH_LL_OpenPipe>

  return USBH_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	460b      	mov	r3, r1
 800a31c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a31e:	78fb      	ldrb	r3, [r7, #3]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa72 	bl	800a80c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b084      	sub	sp, #16
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	460b      	mov	r3, r1
 800a33c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f836 	bl	800a3b0 <USBH_GetFreePipe>
 800a344:	4603      	mov	r3, r0
 800a346:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a348:	89fb      	ldrh	r3, [r7, #14]
 800a34a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a34e:	4293      	cmp	r3, r2
 800a350:	d00a      	beq.n	800a368 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	89fb      	ldrh	r3, [r7, #14]
 800a356:	f003 030f 	and.w	r3, r3, #15
 800a35a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	33e0      	adds	r3, #224	@ 0xe0
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a368:	89fb      	ldrh	r3, [r7, #14]
 800a36a:	b2db      	uxtb	r3, r3
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a380:	78fb      	ldrb	r3, [r7, #3]
 800a382:	2b0f      	cmp	r3, #15
 800a384:	d80d      	bhi.n	800a3a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	33e0      	adds	r3, #224	@ 0xe0
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	78fb      	ldrb	r3, [r7, #3]
 800a394:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	33e0      	adds	r3, #224	@ 0xe0
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	440b      	add	r3, r1
 800a3a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
 800a3c0:	e00f      	b.n	800a3e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	33e0      	adds	r3, #224	@ 0xe0
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d102      	bne.n	800a3dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	e007      	b.n	800a3ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	73fb      	strb	r3, [r7, #15]
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	2b0f      	cmp	r3, #15
 800a3e6:	d9ec      	bls.n	800a3c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a3e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	490e      	ldr	r1, [pc, #56]	@ (800a438 <MX_USB_HOST_Init+0x40>)
 800a400:	480e      	ldr	r0, [pc, #56]	@ (800a43c <MX_USB_HOST_Init+0x44>)
 800a402:	f7fe fb0f 	bl	8008a24 <USBH_Init>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a40c:	f7f7 f989 	bl	8001722 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a410:	490b      	ldr	r1, [pc, #44]	@ (800a440 <MX_USB_HOST_Init+0x48>)
 800a412:	480a      	ldr	r0, [pc, #40]	@ (800a43c <MX_USB_HOST_Init+0x44>)
 800a414:	f7fe fbb1 	bl	8008b7a <USBH_RegisterClass>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a41e:	f7f7 f980 	bl	8001722 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a422:	4806      	ldr	r0, [pc, #24]	@ (800a43c <MX_USB_HOST_Init+0x44>)
 800a424:	f7fe fc35 	bl	8008c92 <USBH_Start>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a42e:	f7f7 f978 	bl	8001722 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a432:	bf00      	nop
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	0800a459 	.word	0x0800a459
 800a43c:	20000584 	.word	0x20000584
 800a440:	2000000c 	.word	0x2000000c

0800a444 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a448:	4802      	ldr	r0, [pc, #8]	@ (800a454 <MX_USB_HOST_Process+0x10>)
 800a44a:	f7fe fc33 	bl	8008cb4 <USBH_Process>
}
 800a44e:	bf00      	nop
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000584 	.word	0x20000584

0800a458 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	3b01      	subs	r3, #1
 800a468:	2b04      	cmp	r3, #4
 800a46a:	d819      	bhi.n	800a4a0 <USBH_UserProcess+0x48>
 800a46c:	a201      	add	r2, pc, #4	@ (adr r2, 800a474 <USBH_UserProcess+0x1c>)
 800a46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a472:	bf00      	nop
 800a474:	0800a4a1 	.word	0x0800a4a1
 800a478:	0800a491 	.word	0x0800a491
 800a47c:	0800a4a1 	.word	0x0800a4a1
 800a480:	0800a499 	.word	0x0800a499
 800a484:	0800a489 	.word	0x0800a489
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a488:	4b09      	ldr	r3, [pc, #36]	@ (800a4b0 <USBH_UserProcess+0x58>)
 800a48a:	2203      	movs	r2, #3
 800a48c:	701a      	strb	r2, [r3, #0]
  break;
 800a48e:	e008      	b.n	800a4a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a490:	4b07      	ldr	r3, [pc, #28]	@ (800a4b0 <USBH_UserProcess+0x58>)
 800a492:	2202      	movs	r2, #2
 800a494:	701a      	strb	r2, [r3, #0]
  break;
 800a496:	e004      	b.n	800a4a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a498:	4b05      	ldr	r3, [pc, #20]	@ (800a4b0 <USBH_UserProcess+0x58>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	701a      	strb	r2, [r3, #0]
  break;
 800a49e:	e000      	b.n	800a4a2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a4a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000095c 	.word	0x2000095c

0800a4b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08a      	sub	sp, #40	@ 0x28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4bc:	f107 0314 	add.w	r3, r7, #20
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	605a      	str	r2, [r3, #4]
 800a4c6:	609a      	str	r2, [r3, #8]
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4d4:	d147      	bne.n	800a566 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	4b25      	ldr	r3, [pc, #148]	@ (800a570 <HAL_HCD_MspInit+0xbc>)
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4de:	4a24      	ldr	r2, [pc, #144]	@ (800a570 <HAL_HCD_MspInit+0xbc>)
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
 800a4e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a4e6:	4b22      	ldr	r3, [pc, #136]	@ (800a570 <HAL_HCD_MspInit+0xbc>)
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	613b      	str	r3, [r7, #16]
 800a4f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a4f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a500:	f107 0314 	add.w	r3, r7, #20
 800a504:	4619      	mov	r1, r3
 800a506:	481b      	ldr	r0, [pc, #108]	@ (800a574 <HAL_HCD_MspInit+0xc0>)
 800a508:	f7f8 ffb8 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a50c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a512:	2302      	movs	r3, #2
 800a514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a516:	2300      	movs	r3, #0
 800a518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a51a:	2300      	movs	r3, #0
 800a51c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a51e:	230a      	movs	r3, #10
 800a520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a522:	f107 0314 	add.w	r3, r7, #20
 800a526:	4619      	mov	r1, r3
 800a528:	4812      	ldr	r0, [pc, #72]	@ (800a574 <HAL_HCD_MspInit+0xc0>)
 800a52a:	f7f8 ffa7 	bl	800347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a52e:	4b10      	ldr	r3, [pc, #64]	@ (800a570 <HAL_HCD_MspInit+0xbc>)
 800a530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a532:	4a0f      	ldr	r2, [pc, #60]	@ (800a570 <HAL_HCD_MspInit+0xbc>)
 800a534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a538:	6353      	str	r3, [r2, #52]	@ 0x34
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	4b0c      	ldr	r3, [pc, #48]	@ (800a570 <HAL_HCD_MspInit+0xbc>)
 800a540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a542:	4a0b      	ldr	r2, [pc, #44]	@ (800a570 <HAL_HCD_MspInit+0xbc>)
 800a544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a548:	6453      	str	r3, [r2, #68]	@ 0x44
 800a54a:	4b09      	ldr	r3, [pc, #36]	@ (800a570 <HAL_HCD_MspInit+0xbc>)
 800a54c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a54e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a556:	2200      	movs	r2, #0
 800a558:	2100      	movs	r1, #0
 800a55a:	2043      	movs	r0, #67	@ 0x43
 800a55c:	f7f8 f947 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a560:	2043      	movs	r0, #67	@ 0x43
 800a562:	f7f8 f960 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a566:	bf00      	nop
 800a568:	3728      	adds	r7, #40	@ 0x28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	40023800 	.word	0x40023800
 800a574:	40020000 	.word	0x40020000

0800a578 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe ff6d 	bl	8009466 <USBH_LL_IncTimer>
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe ffa9 	bl	80094fa <USBH_LL_Connect>
}
 800a5a8:	bf00      	nop
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe ffb2 	bl	8009528 <USBH_LL_Disconnect>
}
 800a5c4:	bf00      	nop
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	70fb      	strb	r3, [r7, #3]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe ff5f 	bl	80094ba <USBH_LL_PortEnabled>
}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe ff5f 	bl	80094d6 <USBH_LL_PortDisabled>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d12a      	bne.n	800a688 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a632:	4a18      	ldr	r2, [pc, #96]	@ (800a694 <USBH_LL_Init+0x74>)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a15      	ldr	r2, [pc, #84]	@ (800a694 <USBH_LL_Init+0x74>)
 800a63e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a642:	4b14      	ldr	r3, [pc, #80]	@ (800a694 <USBH_LL_Init+0x74>)
 800a644:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a648:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a64a:	4b12      	ldr	r3, [pc, #72]	@ (800a694 <USBH_LL_Init+0x74>)
 800a64c:	2208      	movs	r2, #8
 800a64e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a650:	4b10      	ldr	r3, [pc, #64]	@ (800a694 <USBH_LL_Init+0x74>)
 800a652:	2201      	movs	r2, #1
 800a654:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a656:	4b0f      	ldr	r3, [pc, #60]	@ (800a694 <USBH_LL_Init+0x74>)
 800a658:	2200      	movs	r2, #0
 800a65a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a65c:	4b0d      	ldr	r3, [pc, #52]	@ (800a694 <USBH_LL_Init+0x74>)
 800a65e:	2202      	movs	r2, #2
 800a660:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a662:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <USBH_LL_Init+0x74>)
 800a664:	2200      	movs	r2, #0
 800a666:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a668:	480a      	ldr	r0, [pc, #40]	@ (800a694 <USBH_LL_Init+0x74>)
 800a66a:	f7f9 f8d5 	bl	8003818 <HAL_HCD_Init>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d001      	beq.n	800a678 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a674:	f7f7 f855 	bl	8001722 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a678:	4806      	ldr	r0, [pc, #24]	@ (800a694 <USBH_LL_Init+0x74>)
 800a67a:	f7f9 fd35 	bl	80040e8 <HAL_HCD_GetCurrentFrame>
 800a67e:	4603      	mov	r3, r0
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7fe fee0 	bl	8009448 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000960 	.word	0x20000960

0800a698 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7f9 fca2 	bl	8003ff8 <HAL_HCD_Start>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 f95e 	bl	800a97c <USBH_Get_USB_Status>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7f9 fcaa 	bl	800403e <HAL_HCD_Stop>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 f943 	bl	800a97c <USBH_Get_USB_Status>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a70c:	2301      	movs	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a716:	4618      	mov	r0, r3
 800a718:	f7f9 fcf4 	bl	8004104 <HAL_HCD_GetCurrentSpeed>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d00c      	beq.n	800a73c <USBH_LL_GetSpeed+0x38>
 800a722:	2b02      	cmp	r3, #2
 800a724:	d80d      	bhi.n	800a742 <USBH_LL_GetSpeed+0x3e>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <USBH_LL_GetSpeed+0x2c>
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d003      	beq.n	800a736 <USBH_LL_GetSpeed+0x32>
 800a72e:	e008      	b.n	800a742 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
    break;
 800a734:	e008      	b.n	800a748 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a736:	2301      	movs	r3, #1
 800a738:	73fb      	strb	r3, [r7, #15]
    break;
 800a73a:	e005      	b.n	800a748 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a73c:	2302      	movs	r3, #2
 800a73e:	73fb      	strb	r3, [r7, #15]
    break;
 800a740:	e002      	b.n	800a748 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a742:	2301      	movs	r3, #1
 800a744:	73fb      	strb	r3, [r7, #15]
    break;
 800a746:	bf00      	nop
  }
  return  speed;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f9 fc85 	bl	8004078 <HAL_HCD_ResetPort>
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f901 	bl	800a97c <USBH_Get_USB_Status>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a79a:	78fa      	ldrb	r2, [r7, #3]
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7f9 fc8d 	bl	80040be <HAL_HCD_HC_GetXferCount>
 800a7a4:	4603      	mov	r3, r0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a7ae:	b590      	push	{r4, r7, lr}
 800a7b0:	b089      	sub	sp, #36	@ 0x24
 800a7b2:	af04      	add	r7, sp, #16
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	4608      	mov	r0, r1
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	4603      	mov	r3, r0
 800a7be:	70fb      	strb	r3, [r7, #3]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70bb      	strb	r3, [r7, #2]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a7d6:	787c      	ldrb	r4, [r7, #1]
 800a7d8:	78ba      	ldrb	r2, [r7, #2]
 800a7da:	78f9      	ldrb	r1, [r7, #3]
 800a7dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	4623      	mov	r3, r4
 800a7ee:	f7f9 f87a 	bl	80038e6 <HAL_HCD_HC_Init>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f8bf 	bl	800a97c <USBH_Get_USB_Status>
 800a7fe:	4603      	mov	r3, r0
 800a800:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a802:	7bbb      	ldrb	r3, [r7, #14]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd90      	pop	{r4, r7, pc}

0800a80c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	4611      	mov	r1, r2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f9 f913 	bl	8003a56 <HAL_HCD_HC_Halt>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	4618      	mov	r0, r3
 800a838:	f000 f8a0 	bl	800a97c <USBH_Get_USB_Status>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a840:	7bbb      	ldrb	r3, [r7, #14]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a84a:	b590      	push	{r4, r7, lr}
 800a84c:	b089      	sub	sp, #36	@ 0x24
 800a84e:	af04      	add	r7, sp, #16
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	4608      	mov	r0, r1
 800a854:	4611      	mov	r1, r2
 800a856:	461a      	mov	r2, r3
 800a858:	4603      	mov	r3, r0
 800a85a:	70fb      	strb	r3, [r7, #3]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70bb      	strb	r3, [r7, #2]
 800a860:	4613      	mov	r3, r2
 800a862:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a872:	787c      	ldrb	r4, [r7, #1]
 800a874:	78ba      	ldrb	r2, [r7, #2]
 800a876:	78f9      	ldrb	r1, [r7, #3]
 800a878:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a87c:	9303      	str	r3, [sp, #12]
 800a87e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a880:	9302      	str	r3, [sp, #8]
 800a882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a884:	9301      	str	r3, [sp, #4]
 800a886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	4623      	mov	r3, r4
 800a88e:	f7f9 f905 	bl	8003a9c <HAL_HCD_HC_SubmitRequest>
 800a892:	4603      	mov	r3, r0
 800a894:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a896:	7bfb      	ldrb	r3, [r7, #15]
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f86f 	bl	800a97c <USBH_Get_USB_Status>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd90      	pop	{r4, r7, pc}

0800a8ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a8be:	78fa      	ldrb	r2, [r7, #3]
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7f9 fbe6 	bl	8004094 <HAL_HCD_HC_GetURBState>
 800a8c8:	4603      	mov	r3, r0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d103      	bne.n	800a8f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a8e8:	78fb      	ldrb	r3, [r7, #3]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 f872 	bl	800a9d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a8f0:	20c8      	movs	r0, #200	@ 0xc8
 800a8f2:	f7f7 fa01 	bl	8001cf8 <HAL_Delay>
  return USBH_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	460b      	mov	r3, r1
 800a90a:	70fb      	strb	r3, [r7, #3]
 800a90c:	4613      	mov	r3, r2
 800a90e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a916:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a918:	78fa      	ldrb	r2, [r7, #3]
 800a91a:	68f9      	ldr	r1, [r7, #12]
 800a91c:	4613      	mov	r3, r2
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	1a9b      	subs	r3, r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	440b      	add	r3, r1
 800a926:	3317      	adds	r3, #23
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00a      	beq.n	800a944 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a92e:	78fa      	ldrb	r2, [r7, #3]
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	4613      	mov	r3, r2
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	1a9b      	subs	r3, r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	440b      	add	r3, r1
 800a93c:	333c      	adds	r3, #60	@ 0x3c
 800a93e:	78ba      	ldrb	r2, [r7, #2]
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	e009      	b.n	800a958 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a944:	78fa      	ldrb	r2, [r7, #3]
 800a946:	68f9      	ldr	r1, [r7, #12]
 800a948:	4613      	mov	r3, r2
 800a94a:	011b      	lsls	r3, r3, #4
 800a94c:	1a9b      	subs	r3, r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	440b      	add	r3, r1
 800a952:	333d      	adds	r3, #61	@ 0x3d
 800a954:	78ba      	ldrb	r2, [r7, #2]
 800a956:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f7 f9c2 	bl	8001cf8 <HAL_Delay>
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d817      	bhi.n	800a9c0 <USBH_Get_USB_Status+0x44>
 800a990:	a201      	add	r2, pc, #4	@ (adr r2, 800a998 <USBH_Get_USB_Status+0x1c>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9a9 	.word	0x0800a9a9
 800a99c:	0800a9af 	.word	0x0800a9af
 800a9a0:	0800a9b5 	.word	0x0800a9b5
 800a9a4:	0800a9bb 	.word	0x0800a9bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ac:	e00b      	b.n	800a9c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b2:	e008      	b.n	800a9c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b8:	e005      	b.n	800a9c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9be:	e002      	b.n	800a9c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c4:	bf00      	nop
  }
  return usb_status;
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a9e2:	79fb      	ldrb	r3, [r7, #7]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d102      	bne.n	800a9ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
 800a9ec:	e001      	b.n	800a9f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	4803      	ldr	r0, [pc, #12]	@ (800aa08 <MX_DriverVbusFS+0x34>)
 800a9fa:	f7f8 fedb 	bl	80037b4 <HAL_GPIO_WritePin>
}
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	40020800 	.word	0x40020800

0800aa0c <malloc>:
 800aa0c:	4b02      	ldr	r3, [pc, #8]	@ (800aa18 <malloc+0xc>)
 800aa0e:	4601      	mov	r1, r0
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	f000 b82d 	b.w	800aa70 <_malloc_r>
 800aa16:	bf00      	nop
 800aa18:	2000002c 	.word	0x2000002c

0800aa1c <free>:
 800aa1c:	4b02      	ldr	r3, [pc, #8]	@ (800aa28 <free+0xc>)
 800aa1e:	4601      	mov	r1, r0
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	f000 b8f5 	b.w	800ac10 <_free_r>
 800aa26:	bf00      	nop
 800aa28:	2000002c 	.word	0x2000002c

0800aa2c <sbrk_aligned>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	4e0f      	ldr	r6, [pc, #60]	@ (800aa6c <sbrk_aligned+0x40>)
 800aa30:	460c      	mov	r4, r1
 800aa32:	6831      	ldr	r1, [r6, #0]
 800aa34:	4605      	mov	r5, r0
 800aa36:	b911      	cbnz	r1, 800aa3e <sbrk_aligned+0x12>
 800aa38:	f000 f8ae 	bl	800ab98 <_sbrk_r>
 800aa3c:	6030      	str	r0, [r6, #0]
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4628      	mov	r0, r5
 800aa42:	f000 f8a9 	bl	800ab98 <_sbrk_r>
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	d103      	bne.n	800aa52 <sbrk_aligned+0x26>
 800aa4a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa4e:	4620      	mov	r0, r4
 800aa50:	bd70      	pop	{r4, r5, r6, pc}
 800aa52:	1cc4      	adds	r4, r0, #3
 800aa54:	f024 0403 	bic.w	r4, r4, #3
 800aa58:	42a0      	cmp	r0, r4
 800aa5a:	d0f8      	beq.n	800aa4e <sbrk_aligned+0x22>
 800aa5c:	1a21      	subs	r1, r4, r0
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f000 f89a 	bl	800ab98 <_sbrk_r>
 800aa64:	3001      	adds	r0, #1
 800aa66:	d1f2      	bne.n	800aa4e <sbrk_aligned+0x22>
 800aa68:	e7ef      	b.n	800aa4a <sbrk_aligned+0x1e>
 800aa6a:	bf00      	nop
 800aa6c:	20000d40 	.word	0x20000d40

0800aa70 <_malloc_r>:
 800aa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa74:	1ccd      	adds	r5, r1, #3
 800aa76:	f025 0503 	bic.w	r5, r5, #3
 800aa7a:	3508      	adds	r5, #8
 800aa7c:	2d0c      	cmp	r5, #12
 800aa7e:	bf38      	it	cc
 800aa80:	250c      	movcc	r5, #12
 800aa82:	2d00      	cmp	r5, #0
 800aa84:	4606      	mov	r6, r0
 800aa86:	db01      	blt.n	800aa8c <_malloc_r+0x1c>
 800aa88:	42a9      	cmp	r1, r5
 800aa8a:	d904      	bls.n	800aa96 <_malloc_r+0x26>
 800aa8c:	230c      	movs	r3, #12
 800aa8e:	6033      	str	r3, [r6, #0]
 800aa90:	2000      	movs	r0, #0
 800aa92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab6c <_malloc_r+0xfc>
 800aa9a:	f000 f869 	bl	800ab70 <__malloc_lock>
 800aa9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa2:	461c      	mov	r4, r3
 800aaa4:	bb44      	cbnz	r4, 800aaf8 <_malloc_r+0x88>
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7ff ffbf 	bl	800aa2c <sbrk_aligned>
 800aaae:	1c43      	adds	r3, r0, #1
 800aab0:	4604      	mov	r4, r0
 800aab2:	d158      	bne.n	800ab66 <_malloc_r+0xf6>
 800aab4:	f8d8 4000 	ldr.w	r4, [r8]
 800aab8:	4627      	mov	r7, r4
 800aaba:	2f00      	cmp	r7, #0
 800aabc:	d143      	bne.n	800ab46 <_malloc_r+0xd6>
 800aabe:	2c00      	cmp	r4, #0
 800aac0:	d04b      	beq.n	800ab5a <_malloc_r+0xea>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	4639      	mov	r1, r7
 800aac6:	4630      	mov	r0, r6
 800aac8:	eb04 0903 	add.w	r9, r4, r3
 800aacc:	f000 f864 	bl	800ab98 <_sbrk_r>
 800aad0:	4581      	cmp	r9, r0
 800aad2:	d142      	bne.n	800ab5a <_malloc_r+0xea>
 800aad4:	6821      	ldr	r1, [r4, #0]
 800aad6:	1a6d      	subs	r5, r5, r1
 800aad8:	4629      	mov	r1, r5
 800aada:	4630      	mov	r0, r6
 800aadc:	f7ff ffa6 	bl	800aa2c <sbrk_aligned>
 800aae0:	3001      	adds	r0, #1
 800aae2:	d03a      	beq.n	800ab5a <_malloc_r+0xea>
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	442b      	add	r3, r5
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	f8d8 3000 	ldr.w	r3, [r8]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	bb62      	cbnz	r2, 800ab4c <_malloc_r+0xdc>
 800aaf2:	f8c8 7000 	str.w	r7, [r8]
 800aaf6:	e00f      	b.n	800ab18 <_malloc_r+0xa8>
 800aaf8:	6822      	ldr	r2, [r4, #0]
 800aafa:	1b52      	subs	r2, r2, r5
 800aafc:	d420      	bmi.n	800ab40 <_malloc_r+0xd0>
 800aafe:	2a0b      	cmp	r2, #11
 800ab00:	d917      	bls.n	800ab32 <_malloc_r+0xc2>
 800ab02:	1961      	adds	r1, r4, r5
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	6025      	str	r5, [r4, #0]
 800ab08:	bf18      	it	ne
 800ab0a:	6059      	strne	r1, [r3, #4]
 800ab0c:	6863      	ldr	r3, [r4, #4]
 800ab0e:	bf08      	it	eq
 800ab10:	f8c8 1000 	streq.w	r1, [r8]
 800ab14:	5162      	str	r2, [r4, r5]
 800ab16:	604b      	str	r3, [r1, #4]
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f000 f82f 	bl	800ab7c <__malloc_unlock>
 800ab1e:	f104 000b 	add.w	r0, r4, #11
 800ab22:	1d23      	adds	r3, r4, #4
 800ab24:	f020 0007 	bic.w	r0, r0, #7
 800ab28:	1ac2      	subs	r2, r0, r3
 800ab2a:	bf1c      	itt	ne
 800ab2c:	1a1b      	subne	r3, r3, r0
 800ab2e:	50a3      	strne	r3, [r4, r2]
 800ab30:	e7af      	b.n	800aa92 <_malloc_r+0x22>
 800ab32:	6862      	ldr	r2, [r4, #4]
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	bf0c      	ite	eq
 800ab38:	f8c8 2000 	streq.w	r2, [r8]
 800ab3c:	605a      	strne	r2, [r3, #4]
 800ab3e:	e7eb      	b.n	800ab18 <_malloc_r+0xa8>
 800ab40:	4623      	mov	r3, r4
 800ab42:	6864      	ldr	r4, [r4, #4]
 800ab44:	e7ae      	b.n	800aaa4 <_malloc_r+0x34>
 800ab46:	463c      	mov	r4, r7
 800ab48:	687f      	ldr	r7, [r7, #4]
 800ab4a:	e7b6      	b.n	800aaba <_malloc_r+0x4a>
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	d1fb      	bne.n	800ab4c <_malloc_r+0xdc>
 800ab54:	2300      	movs	r3, #0
 800ab56:	6053      	str	r3, [r2, #4]
 800ab58:	e7de      	b.n	800ab18 <_malloc_r+0xa8>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	6033      	str	r3, [r6, #0]
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f000 f80c 	bl	800ab7c <__malloc_unlock>
 800ab64:	e794      	b.n	800aa90 <_malloc_r+0x20>
 800ab66:	6005      	str	r5, [r0, #0]
 800ab68:	e7d6      	b.n	800ab18 <_malloc_r+0xa8>
 800ab6a:	bf00      	nop
 800ab6c:	20000d44 	.word	0x20000d44

0800ab70 <__malloc_lock>:
 800ab70:	4801      	ldr	r0, [pc, #4]	@ (800ab78 <__malloc_lock+0x8>)
 800ab72:	f000 b84b 	b.w	800ac0c <__retarget_lock_acquire_recursive>
 800ab76:	bf00      	nop
 800ab78:	20000e84 	.word	0x20000e84

0800ab7c <__malloc_unlock>:
 800ab7c:	4801      	ldr	r0, [pc, #4]	@ (800ab84 <__malloc_unlock+0x8>)
 800ab7e:	f000 b846 	b.w	800ac0e <__retarget_lock_release_recursive>
 800ab82:	bf00      	nop
 800ab84:	20000e84 	.word	0x20000e84

0800ab88 <memset>:
 800ab88:	4402      	add	r2, r0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d100      	bne.n	800ab92 <memset+0xa>
 800ab90:	4770      	bx	lr
 800ab92:	f803 1b01 	strb.w	r1, [r3], #1
 800ab96:	e7f9      	b.n	800ab8c <memset+0x4>

0800ab98 <_sbrk_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4d06      	ldr	r5, [pc, #24]	@ (800abb4 <_sbrk_r+0x1c>)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4604      	mov	r4, r0
 800aba0:	4608      	mov	r0, r1
 800aba2:	602b      	str	r3, [r5, #0]
 800aba4:	f7f6 ffc4 	bl	8001b30 <_sbrk>
 800aba8:	1c43      	adds	r3, r0, #1
 800abaa:	d102      	bne.n	800abb2 <_sbrk_r+0x1a>
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	b103      	cbz	r3, 800abb2 <_sbrk_r+0x1a>
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	bd38      	pop	{r3, r4, r5, pc}
 800abb4:	20000e80 	.word	0x20000e80

0800abb8 <__errno>:
 800abb8:	4b01      	ldr	r3, [pc, #4]	@ (800abc0 <__errno+0x8>)
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	2000002c 	.word	0x2000002c

0800abc4 <__libc_init_array>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	4d0d      	ldr	r5, [pc, #52]	@ (800abfc <__libc_init_array+0x38>)
 800abc8:	4c0d      	ldr	r4, [pc, #52]	@ (800ac00 <__libc_init_array+0x3c>)
 800abca:	1b64      	subs	r4, r4, r5
 800abcc:	10a4      	asrs	r4, r4, #2
 800abce:	2600      	movs	r6, #0
 800abd0:	42a6      	cmp	r6, r4
 800abd2:	d109      	bne.n	800abe8 <__libc_init_array+0x24>
 800abd4:	4d0b      	ldr	r5, [pc, #44]	@ (800ac04 <__libc_init_array+0x40>)
 800abd6:	4c0c      	ldr	r4, [pc, #48]	@ (800ac08 <__libc_init_array+0x44>)
 800abd8:	f001 f88a 	bl	800bcf0 <_init>
 800abdc:	1b64      	subs	r4, r4, r5
 800abde:	10a4      	asrs	r4, r4, #2
 800abe0:	2600      	movs	r6, #0
 800abe2:	42a6      	cmp	r6, r4
 800abe4:	d105      	bne.n	800abf2 <__libc_init_array+0x2e>
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abec:	4798      	blx	r3
 800abee:	3601      	adds	r6, #1
 800abf0:	e7ee      	b.n	800abd0 <__libc_init_array+0xc>
 800abf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf6:	4798      	blx	r3
 800abf8:	3601      	adds	r6, #1
 800abfa:	e7f2      	b.n	800abe2 <__libc_init_array+0x1e>
 800abfc:	0800bf10 	.word	0x0800bf10
 800ac00:	0800bf10 	.word	0x0800bf10
 800ac04:	0800bf10 	.word	0x0800bf10
 800ac08:	0800bf14 	.word	0x0800bf14

0800ac0c <__retarget_lock_acquire_recursive>:
 800ac0c:	4770      	bx	lr

0800ac0e <__retarget_lock_release_recursive>:
 800ac0e:	4770      	bx	lr

0800ac10 <_free_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4605      	mov	r5, r0
 800ac14:	2900      	cmp	r1, #0
 800ac16:	d041      	beq.n	800ac9c <_free_r+0x8c>
 800ac18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac1c:	1f0c      	subs	r4, r1, #4
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	bfb8      	it	lt
 800ac22:	18e4      	addlt	r4, r4, r3
 800ac24:	f7ff ffa4 	bl	800ab70 <__malloc_lock>
 800ac28:	4a1d      	ldr	r2, [pc, #116]	@ (800aca0 <_free_r+0x90>)
 800ac2a:	6813      	ldr	r3, [r2, #0]
 800ac2c:	b933      	cbnz	r3, 800ac3c <_free_r+0x2c>
 800ac2e:	6063      	str	r3, [r4, #4]
 800ac30:	6014      	str	r4, [r2, #0]
 800ac32:	4628      	mov	r0, r5
 800ac34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac38:	f7ff bfa0 	b.w	800ab7c <__malloc_unlock>
 800ac3c:	42a3      	cmp	r3, r4
 800ac3e:	d908      	bls.n	800ac52 <_free_r+0x42>
 800ac40:	6820      	ldr	r0, [r4, #0]
 800ac42:	1821      	adds	r1, r4, r0
 800ac44:	428b      	cmp	r3, r1
 800ac46:	bf01      	itttt	eq
 800ac48:	6819      	ldreq	r1, [r3, #0]
 800ac4a:	685b      	ldreq	r3, [r3, #4]
 800ac4c:	1809      	addeq	r1, r1, r0
 800ac4e:	6021      	streq	r1, [r4, #0]
 800ac50:	e7ed      	b.n	800ac2e <_free_r+0x1e>
 800ac52:	461a      	mov	r2, r3
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	b10b      	cbz	r3, 800ac5c <_free_r+0x4c>
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d9fa      	bls.n	800ac52 <_free_r+0x42>
 800ac5c:	6811      	ldr	r1, [r2, #0]
 800ac5e:	1850      	adds	r0, r2, r1
 800ac60:	42a0      	cmp	r0, r4
 800ac62:	d10b      	bne.n	800ac7c <_free_r+0x6c>
 800ac64:	6820      	ldr	r0, [r4, #0]
 800ac66:	4401      	add	r1, r0
 800ac68:	1850      	adds	r0, r2, r1
 800ac6a:	4283      	cmp	r3, r0
 800ac6c:	6011      	str	r1, [r2, #0]
 800ac6e:	d1e0      	bne.n	800ac32 <_free_r+0x22>
 800ac70:	6818      	ldr	r0, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	6053      	str	r3, [r2, #4]
 800ac76:	4408      	add	r0, r1
 800ac78:	6010      	str	r0, [r2, #0]
 800ac7a:	e7da      	b.n	800ac32 <_free_r+0x22>
 800ac7c:	d902      	bls.n	800ac84 <_free_r+0x74>
 800ac7e:	230c      	movs	r3, #12
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	e7d6      	b.n	800ac32 <_free_r+0x22>
 800ac84:	6820      	ldr	r0, [r4, #0]
 800ac86:	1821      	adds	r1, r4, r0
 800ac88:	428b      	cmp	r3, r1
 800ac8a:	bf04      	itt	eq
 800ac8c:	6819      	ldreq	r1, [r3, #0]
 800ac8e:	685b      	ldreq	r3, [r3, #4]
 800ac90:	6063      	str	r3, [r4, #4]
 800ac92:	bf04      	itt	eq
 800ac94:	1809      	addeq	r1, r1, r0
 800ac96:	6021      	streq	r1, [r4, #0]
 800ac98:	6054      	str	r4, [r2, #4]
 800ac9a:	e7ca      	b.n	800ac32 <_free_r+0x22>
 800ac9c:	bd38      	pop	{r3, r4, r5, pc}
 800ac9e:	bf00      	nop
 800aca0:	20000d44 	.word	0x20000d44
 800aca4:	00000000 	.word	0x00000000

0800aca8 <sin>:
 800aca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acaa:	ec53 2b10 	vmov	r2, r3, d0
 800acae:	4826      	ldr	r0, [pc, #152]	@ (800ad48 <sin+0xa0>)
 800acb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800acb4:	4281      	cmp	r1, r0
 800acb6:	d807      	bhi.n	800acc8 <sin+0x20>
 800acb8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ad40 <sin+0x98>
 800acbc:	2000      	movs	r0, #0
 800acbe:	b005      	add	sp, #20
 800acc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc4:	f000 b90c 	b.w	800aee0 <__kernel_sin>
 800acc8:	4820      	ldr	r0, [pc, #128]	@ (800ad4c <sin+0xa4>)
 800acca:	4281      	cmp	r1, r0
 800accc:	d908      	bls.n	800ace0 <sin+0x38>
 800acce:	4610      	mov	r0, r2
 800acd0:	4619      	mov	r1, r3
 800acd2:	f7f5 fa7d 	bl	80001d0 <__aeabi_dsub>
 800acd6:	ec41 0b10 	vmov	d0, r0, r1
 800acda:	b005      	add	sp, #20
 800acdc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ace0:	4668      	mov	r0, sp
 800ace2:	f000 f9b9 	bl	800b058 <__ieee754_rem_pio2>
 800ace6:	f000 0003 	and.w	r0, r0, #3
 800acea:	2801      	cmp	r0, #1
 800acec:	d00c      	beq.n	800ad08 <sin+0x60>
 800acee:	2802      	cmp	r0, #2
 800acf0:	d011      	beq.n	800ad16 <sin+0x6e>
 800acf2:	b9e8      	cbnz	r0, 800ad30 <sin+0x88>
 800acf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800acf8:	ed9d 0b00 	vldr	d0, [sp]
 800acfc:	2001      	movs	r0, #1
 800acfe:	f000 f8ef 	bl	800aee0 <__kernel_sin>
 800ad02:	ec51 0b10 	vmov	r0, r1, d0
 800ad06:	e7e6      	b.n	800acd6 <sin+0x2e>
 800ad08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad0c:	ed9d 0b00 	vldr	d0, [sp]
 800ad10:	f000 f81e 	bl	800ad50 <__kernel_cos>
 800ad14:	e7f5      	b.n	800ad02 <sin+0x5a>
 800ad16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad1a:	ed9d 0b00 	vldr	d0, [sp]
 800ad1e:	2001      	movs	r0, #1
 800ad20:	f000 f8de 	bl	800aee0 <__kernel_sin>
 800ad24:	ec53 2b10 	vmov	r2, r3, d0
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ad2e:	e7d2      	b.n	800acd6 <sin+0x2e>
 800ad30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad34:	ed9d 0b00 	vldr	d0, [sp]
 800ad38:	f000 f80a 	bl	800ad50 <__kernel_cos>
 800ad3c:	e7f2      	b.n	800ad24 <sin+0x7c>
 800ad3e:	bf00      	nop
	...
 800ad48:	3fe921fb 	.word	0x3fe921fb
 800ad4c:	7fefffff 	.word	0x7fefffff

0800ad50 <__kernel_cos>:
 800ad50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	ec57 6b10 	vmov	r6, r7, d0
 800ad58:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ad5c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800ad60:	ed8d 1b00 	vstr	d1, [sp]
 800ad64:	d206      	bcs.n	800ad74 <__kernel_cos+0x24>
 800ad66:	4630      	mov	r0, r6
 800ad68:	4639      	mov	r1, r7
 800ad6a:	f7f5 fe83 	bl	8000a74 <__aeabi_d2iz>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	f000 8088 	beq.w	800ae84 <__kernel_cos+0x134>
 800ad74:	4632      	mov	r2, r6
 800ad76:	463b      	mov	r3, r7
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 fbe0 	bl	8000540 <__aeabi_dmul>
 800ad80:	4b51      	ldr	r3, [pc, #324]	@ (800aec8 <__kernel_cos+0x178>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	4604      	mov	r4, r0
 800ad86:	460d      	mov	r5, r1
 800ad88:	f7f5 fbda 	bl	8000540 <__aeabi_dmul>
 800ad8c:	a340      	add	r3, pc, #256	@ (adr r3, 800ae90 <__kernel_cos+0x140>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	4682      	mov	sl, r0
 800ad94:	468b      	mov	fp, r1
 800ad96:	4620      	mov	r0, r4
 800ad98:	4629      	mov	r1, r5
 800ad9a:	f7f5 fbd1 	bl	8000540 <__aeabi_dmul>
 800ad9e:	a33e      	add	r3, pc, #248	@ (adr r3, 800ae98 <__kernel_cos+0x148>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 fa16 	bl	80001d4 <__adddf3>
 800ada8:	4622      	mov	r2, r4
 800adaa:	462b      	mov	r3, r5
 800adac:	f7f5 fbc8 	bl	8000540 <__aeabi_dmul>
 800adb0:	a33b      	add	r3, pc, #236	@ (adr r3, 800aea0 <__kernel_cos+0x150>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 fa0b 	bl	80001d0 <__aeabi_dsub>
 800adba:	4622      	mov	r2, r4
 800adbc:	462b      	mov	r3, r5
 800adbe:	f7f5 fbbf 	bl	8000540 <__aeabi_dmul>
 800adc2:	a339      	add	r3, pc, #228	@ (adr r3, 800aea8 <__kernel_cos+0x158>)
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f7f5 fa04 	bl	80001d4 <__adddf3>
 800adcc:	4622      	mov	r2, r4
 800adce:	462b      	mov	r3, r5
 800add0:	f7f5 fbb6 	bl	8000540 <__aeabi_dmul>
 800add4:	a336      	add	r3, pc, #216	@ (adr r3, 800aeb0 <__kernel_cos+0x160>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f7f5 f9f9 	bl	80001d0 <__aeabi_dsub>
 800adde:	4622      	mov	r2, r4
 800ade0:	462b      	mov	r3, r5
 800ade2:	f7f5 fbad 	bl	8000540 <__aeabi_dmul>
 800ade6:	a334      	add	r3, pc, #208	@ (adr r3, 800aeb8 <__kernel_cos+0x168>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	f7f5 f9f2 	bl	80001d4 <__adddf3>
 800adf0:	4622      	mov	r2, r4
 800adf2:	462b      	mov	r3, r5
 800adf4:	f7f5 fba4 	bl	8000540 <__aeabi_dmul>
 800adf8:	4622      	mov	r2, r4
 800adfa:	462b      	mov	r3, r5
 800adfc:	f7f5 fba0 	bl	8000540 <__aeabi_dmul>
 800ae00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae04:	4604      	mov	r4, r0
 800ae06:	460d      	mov	r5, r1
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fb98 	bl	8000540 <__aeabi_dmul>
 800ae10:	460b      	mov	r3, r1
 800ae12:	4602      	mov	r2, r0
 800ae14:	4629      	mov	r1, r5
 800ae16:	4620      	mov	r0, r4
 800ae18:	f7f5 f9da 	bl	80001d0 <__aeabi_dsub>
 800ae1c:	4b2b      	ldr	r3, [pc, #172]	@ (800aecc <__kernel_cos+0x17c>)
 800ae1e:	4598      	cmp	r8, r3
 800ae20:	4606      	mov	r6, r0
 800ae22:	460f      	mov	r7, r1
 800ae24:	d810      	bhi.n	800ae48 <__kernel_cos+0xf8>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	4659      	mov	r1, fp
 800ae2e:	f7f5 f9cf 	bl	80001d0 <__aeabi_dsub>
 800ae32:	460b      	mov	r3, r1
 800ae34:	4926      	ldr	r1, [pc, #152]	@ (800aed0 <__kernel_cos+0x180>)
 800ae36:	4602      	mov	r2, r0
 800ae38:	2000      	movs	r0, #0
 800ae3a:	f7f5 f9c9 	bl	80001d0 <__aeabi_dsub>
 800ae3e:	ec41 0b10 	vmov	d0, r0, r1
 800ae42:	b003      	add	sp, #12
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	4b22      	ldr	r3, [pc, #136]	@ (800aed4 <__kernel_cos+0x184>)
 800ae4a:	4921      	ldr	r1, [pc, #132]	@ (800aed0 <__kernel_cos+0x180>)
 800ae4c:	4598      	cmp	r8, r3
 800ae4e:	bf8c      	ite	hi
 800ae50:	4d21      	ldrhi	r5, [pc, #132]	@ (800aed8 <__kernel_cos+0x188>)
 800ae52:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800ae56:	2400      	movs	r4, #0
 800ae58:	4622      	mov	r2, r4
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f7f5 f9b7 	bl	80001d0 <__aeabi_dsub>
 800ae62:	4622      	mov	r2, r4
 800ae64:	4680      	mov	r8, r0
 800ae66:	4689      	mov	r9, r1
 800ae68:	462b      	mov	r3, r5
 800ae6a:	4650      	mov	r0, sl
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	f7f5 f9af 	bl	80001d0 <__aeabi_dsub>
 800ae72:	4632      	mov	r2, r6
 800ae74:	463b      	mov	r3, r7
 800ae76:	f7f5 f9ab 	bl	80001d0 <__aeabi_dsub>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4640      	mov	r0, r8
 800ae80:	4649      	mov	r1, r9
 800ae82:	e7da      	b.n	800ae3a <__kernel_cos+0xea>
 800ae84:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800aec0 <__kernel_cos+0x170>
 800ae88:	e7db      	b.n	800ae42 <__kernel_cos+0xf2>
 800ae8a:	bf00      	nop
 800ae8c:	f3af 8000 	nop.w
 800ae90:	be8838d4 	.word	0xbe8838d4
 800ae94:	bda8fae9 	.word	0xbda8fae9
 800ae98:	bdb4b1c4 	.word	0xbdb4b1c4
 800ae9c:	3e21ee9e 	.word	0x3e21ee9e
 800aea0:	809c52ad 	.word	0x809c52ad
 800aea4:	3e927e4f 	.word	0x3e927e4f
 800aea8:	19cb1590 	.word	0x19cb1590
 800aeac:	3efa01a0 	.word	0x3efa01a0
 800aeb0:	16c15177 	.word	0x16c15177
 800aeb4:	3f56c16c 	.word	0x3f56c16c
 800aeb8:	5555554c 	.word	0x5555554c
 800aebc:	3fa55555 	.word	0x3fa55555
 800aec0:	00000000 	.word	0x00000000
 800aec4:	3ff00000 	.word	0x3ff00000
 800aec8:	3fe00000 	.word	0x3fe00000
 800aecc:	3fd33332 	.word	0x3fd33332
 800aed0:	3ff00000 	.word	0x3ff00000
 800aed4:	3fe90000 	.word	0x3fe90000
 800aed8:	3fd20000 	.word	0x3fd20000
 800aedc:	00000000 	.word	0x00000000

0800aee0 <__kernel_sin>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	ec55 4b10 	vmov	r4, r5, d0
 800aee8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800aeec:	b085      	sub	sp, #20
 800aeee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800aef2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800aef6:	4680      	mov	r8, r0
 800aef8:	d205      	bcs.n	800af06 <__kernel_sin+0x26>
 800aefa:	4620      	mov	r0, r4
 800aefc:	4629      	mov	r1, r5
 800aefe:	f7f5 fdb9 	bl	8000a74 <__aeabi_d2iz>
 800af02:	2800      	cmp	r0, #0
 800af04:	d052      	beq.n	800afac <__kernel_sin+0xcc>
 800af06:	4622      	mov	r2, r4
 800af08:	462b      	mov	r3, r5
 800af0a:	4620      	mov	r0, r4
 800af0c:	4629      	mov	r1, r5
 800af0e:	f7f5 fb17 	bl	8000540 <__aeabi_dmul>
 800af12:	4682      	mov	sl, r0
 800af14:	468b      	mov	fp, r1
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4620      	mov	r0, r4
 800af1c:	4629      	mov	r1, r5
 800af1e:	f7f5 fb0f 	bl	8000540 <__aeabi_dmul>
 800af22:	a342      	add	r3, pc, #264	@ (adr r3, 800b02c <__kernel_sin+0x14c>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	e9cd 0100 	strd	r0, r1, [sp]
 800af2c:	4650      	mov	r0, sl
 800af2e:	4659      	mov	r1, fp
 800af30:	f7f5 fb06 	bl	8000540 <__aeabi_dmul>
 800af34:	a33f      	add	r3, pc, #252	@ (adr r3, 800b034 <__kernel_sin+0x154>)
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	f7f5 f949 	bl	80001d0 <__aeabi_dsub>
 800af3e:	4652      	mov	r2, sl
 800af40:	465b      	mov	r3, fp
 800af42:	f7f5 fafd 	bl	8000540 <__aeabi_dmul>
 800af46:	a33d      	add	r3, pc, #244	@ (adr r3, 800b03c <__kernel_sin+0x15c>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	f7f5 f942 	bl	80001d4 <__adddf3>
 800af50:	4652      	mov	r2, sl
 800af52:	465b      	mov	r3, fp
 800af54:	f7f5 faf4 	bl	8000540 <__aeabi_dmul>
 800af58:	a33a      	add	r3, pc, #232	@ (adr r3, 800b044 <__kernel_sin+0x164>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f7f5 f937 	bl	80001d0 <__aeabi_dsub>
 800af62:	4652      	mov	r2, sl
 800af64:	465b      	mov	r3, fp
 800af66:	f7f5 faeb 	bl	8000540 <__aeabi_dmul>
 800af6a:	a338      	add	r3, pc, #224	@ (adr r3, 800b04c <__kernel_sin+0x16c>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7f5 f930 	bl	80001d4 <__adddf3>
 800af74:	4606      	mov	r6, r0
 800af76:	460f      	mov	r7, r1
 800af78:	f1b8 0f00 	cmp.w	r8, #0
 800af7c:	d11b      	bne.n	800afb6 <__kernel_sin+0xd6>
 800af7e:	4602      	mov	r2, r0
 800af80:	460b      	mov	r3, r1
 800af82:	4650      	mov	r0, sl
 800af84:	4659      	mov	r1, fp
 800af86:	f7f5 fadb 	bl	8000540 <__aeabi_dmul>
 800af8a:	a325      	add	r3, pc, #148	@ (adr r3, 800b020 <__kernel_sin+0x140>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	f7f5 f91e 	bl	80001d0 <__aeabi_dsub>
 800af94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af98:	f7f5 fad2 	bl	8000540 <__aeabi_dmul>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4620      	mov	r0, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	f7f5 f916 	bl	80001d4 <__adddf3>
 800afa8:	4604      	mov	r4, r0
 800afaa:	460d      	mov	r5, r1
 800afac:	ec45 4b10 	vmov	d0, r4, r5
 800afb0:	b005      	add	sp, #20
 800afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afba:	4b1b      	ldr	r3, [pc, #108]	@ (800b028 <__kernel_sin+0x148>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	f7f5 fabf 	bl	8000540 <__aeabi_dmul>
 800afc2:	4632      	mov	r2, r6
 800afc4:	4680      	mov	r8, r0
 800afc6:	4689      	mov	r9, r1
 800afc8:	463b      	mov	r3, r7
 800afca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afce:	f7f5 fab7 	bl	8000540 <__aeabi_dmul>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4640      	mov	r0, r8
 800afd8:	4649      	mov	r1, r9
 800afda:	f7f5 f8f9 	bl	80001d0 <__aeabi_dsub>
 800afde:	4652      	mov	r2, sl
 800afe0:	465b      	mov	r3, fp
 800afe2:	f7f5 faad 	bl	8000540 <__aeabi_dmul>
 800afe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afea:	f7f5 f8f1 	bl	80001d0 <__aeabi_dsub>
 800afee:	a30c      	add	r3, pc, #48	@ (adr r3, 800b020 <__kernel_sin+0x140>)
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	4606      	mov	r6, r0
 800aff6:	460f      	mov	r7, r1
 800aff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800affc:	f7f5 faa0 	bl	8000540 <__aeabi_dmul>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	f7f5 f8e4 	bl	80001d4 <__adddf3>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4620      	mov	r0, r4
 800b012:	4629      	mov	r1, r5
 800b014:	f7f5 f8dc 	bl	80001d0 <__aeabi_dsub>
 800b018:	e7c6      	b.n	800afa8 <__kernel_sin+0xc8>
 800b01a:	bf00      	nop
 800b01c:	f3af 8000 	nop.w
 800b020:	55555549 	.word	0x55555549
 800b024:	3fc55555 	.word	0x3fc55555
 800b028:	3fe00000 	.word	0x3fe00000
 800b02c:	5acfd57c 	.word	0x5acfd57c
 800b030:	3de5d93a 	.word	0x3de5d93a
 800b034:	8a2b9ceb 	.word	0x8a2b9ceb
 800b038:	3e5ae5e6 	.word	0x3e5ae5e6
 800b03c:	57b1fe7d 	.word	0x57b1fe7d
 800b040:	3ec71de3 	.word	0x3ec71de3
 800b044:	19c161d5 	.word	0x19c161d5
 800b048:	3f2a01a0 	.word	0x3f2a01a0
 800b04c:	1110f8a6 	.word	0x1110f8a6
 800b050:	3f811111 	.word	0x3f811111
 800b054:	00000000 	.word	0x00000000

0800b058 <__ieee754_rem_pio2>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	ec57 6b10 	vmov	r6, r7, d0
 800b060:	4bc5      	ldr	r3, [pc, #788]	@ (800b378 <__ieee754_rem_pio2+0x320>)
 800b062:	b08d      	sub	sp, #52	@ 0x34
 800b064:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b068:	4598      	cmp	r8, r3
 800b06a:	4604      	mov	r4, r0
 800b06c:	9704      	str	r7, [sp, #16]
 800b06e:	d807      	bhi.n	800b080 <__ieee754_rem_pio2+0x28>
 800b070:	2200      	movs	r2, #0
 800b072:	2300      	movs	r3, #0
 800b074:	ed80 0b00 	vstr	d0, [r0]
 800b078:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b07c:	2500      	movs	r5, #0
 800b07e:	e028      	b.n	800b0d2 <__ieee754_rem_pio2+0x7a>
 800b080:	4bbe      	ldr	r3, [pc, #760]	@ (800b37c <__ieee754_rem_pio2+0x324>)
 800b082:	4598      	cmp	r8, r3
 800b084:	d878      	bhi.n	800b178 <__ieee754_rem_pio2+0x120>
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	4dbd      	ldr	r5, [pc, #756]	@ (800b380 <__ieee754_rem_pio2+0x328>)
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	4630      	mov	r0, r6
 800b08e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b340 <__ieee754_rem_pio2+0x2e8>)
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	4639      	mov	r1, r7
 800b096:	dd38      	ble.n	800b10a <__ieee754_rem_pio2+0xb2>
 800b098:	f7f5 f89a 	bl	80001d0 <__aeabi_dsub>
 800b09c:	45a8      	cmp	r8, r5
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460f      	mov	r7, r1
 800b0a2:	d01a      	beq.n	800b0da <__ieee754_rem_pio2+0x82>
 800b0a4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b348 <__ieee754_rem_pio2+0x2f0>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 f891 	bl	80001d0 <__aeabi_dsub>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4680      	mov	r8, r0
 800b0b4:	4689      	mov	r9, r1
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	f7f5 f889 	bl	80001d0 <__aeabi_dsub>
 800b0be:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b348 <__ieee754_rem_pio2+0x2f0>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7f5 f884 	bl	80001d0 <__aeabi_dsub>
 800b0c8:	e9c4 8900 	strd	r8, r9, [r4]
 800b0cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0d0:	2501      	movs	r5, #1
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	b00d      	add	sp, #52	@ 0x34
 800b0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0da:	a39d      	add	r3, pc, #628	@ (adr r3, 800b350 <__ieee754_rem_pio2+0x2f8>)
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f7f5 f876 	bl	80001d0 <__aeabi_dsub>
 800b0e4:	a39c      	add	r3, pc, #624	@ (adr r3, 800b358 <__ieee754_rem_pio2+0x300>)
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	f7f5 f86f 	bl	80001d0 <__aeabi_dsub>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4680      	mov	r8, r0
 800b0f8:	4689      	mov	r9, r1
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	f7f5 f867 	bl	80001d0 <__aeabi_dsub>
 800b102:	a395      	add	r3, pc, #596	@ (adr r3, 800b358 <__ieee754_rem_pio2+0x300>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	e7dc      	b.n	800b0c4 <__ieee754_rem_pio2+0x6c>
 800b10a:	f7f5 f863 	bl	80001d4 <__adddf3>
 800b10e:	45a8      	cmp	r8, r5
 800b110:	4606      	mov	r6, r0
 800b112:	460f      	mov	r7, r1
 800b114:	d018      	beq.n	800b148 <__ieee754_rem_pio2+0xf0>
 800b116:	a38c      	add	r3, pc, #560	@ (adr r3, 800b348 <__ieee754_rem_pio2+0x2f0>)
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	f7f5 f85a 	bl	80001d4 <__adddf3>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4680      	mov	r8, r0
 800b126:	4689      	mov	r9, r1
 800b128:	4630      	mov	r0, r6
 800b12a:	4639      	mov	r1, r7
 800b12c:	f7f5 f850 	bl	80001d0 <__aeabi_dsub>
 800b130:	a385      	add	r3, pc, #532	@ (adr r3, 800b348 <__ieee754_rem_pio2+0x2f0>)
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	f7f5 f84d 	bl	80001d4 <__adddf3>
 800b13a:	f04f 35ff 	mov.w	r5, #4294967295
 800b13e:	e9c4 8900 	strd	r8, r9, [r4]
 800b142:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b146:	e7c4      	b.n	800b0d2 <__ieee754_rem_pio2+0x7a>
 800b148:	a381      	add	r3, pc, #516	@ (adr r3, 800b350 <__ieee754_rem_pio2+0x2f8>)
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	f7f5 f841 	bl	80001d4 <__adddf3>
 800b152:	a381      	add	r3, pc, #516	@ (adr r3, 800b358 <__ieee754_rem_pio2+0x300>)
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	4606      	mov	r6, r0
 800b15a:	460f      	mov	r7, r1
 800b15c:	f7f5 f83a 	bl	80001d4 <__adddf3>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4680      	mov	r8, r0
 800b166:	4689      	mov	r9, r1
 800b168:	4630      	mov	r0, r6
 800b16a:	4639      	mov	r1, r7
 800b16c:	f7f5 f830 	bl	80001d0 <__aeabi_dsub>
 800b170:	a379      	add	r3, pc, #484	@ (adr r3, 800b358 <__ieee754_rem_pio2+0x300>)
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	e7de      	b.n	800b136 <__ieee754_rem_pio2+0xde>
 800b178:	4b82      	ldr	r3, [pc, #520]	@ (800b384 <__ieee754_rem_pio2+0x32c>)
 800b17a:	4598      	cmp	r8, r3
 800b17c:	f200 80d1 	bhi.w	800b322 <__ieee754_rem_pio2+0x2ca>
 800b180:	f000 f966 	bl	800b450 <fabs>
 800b184:	ec57 6b10 	vmov	r6, r7, d0
 800b188:	a375      	add	r3, pc, #468	@ (adr r3, 800b360 <__ieee754_rem_pio2+0x308>)
 800b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18e:	4630      	mov	r0, r6
 800b190:	4639      	mov	r1, r7
 800b192:	f7f5 f9d5 	bl	8000540 <__aeabi_dmul>
 800b196:	4b7c      	ldr	r3, [pc, #496]	@ (800b388 <__ieee754_rem_pio2+0x330>)
 800b198:	2200      	movs	r2, #0
 800b19a:	f7f5 f81b 	bl	80001d4 <__adddf3>
 800b19e:	f7f5 fc69 	bl	8000a74 <__aeabi_d2iz>
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	f7f5 f962 	bl	800046c <__aeabi_i2d>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1b0:	a363      	add	r3, pc, #396	@ (adr r3, 800b340 <__ieee754_rem_pio2+0x2e8>)
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	f7f5 f9c3 	bl	8000540 <__aeabi_dmul>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 f805 	bl	80001d0 <__aeabi_dsub>
 800b1c6:	a360      	add	r3, pc, #384	@ (adr r3, 800b348 <__ieee754_rem_pio2+0x2f0>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	4682      	mov	sl, r0
 800b1ce:	468b      	mov	fp, r1
 800b1d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d4:	f7f5 f9b4 	bl	8000540 <__aeabi_dmul>
 800b1d8:	2d1f      	cmp	r5, #31
 800b1da:	4606      	mov	r6, r0
 800b1dc:	460f      	mov	r7, r1
 800b1de:	dc0c      	bgt.n	800b1fa <__ieee754_rem_pio2+0x1a2>
 800b1e0:	4b6a      	ldr	r3, [pc, #424]	@ (800b38c <__ieee754_rem_pio2+0x334>)
 800b1e2:	1e6a      	subs	r2, r5, #1
 800b1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e8:	4543      	cmp	r3, r8
 800b1ea:	d006      	beq.n	800b1fa <__ieee754_rem_pio2+0x1a2>
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	463b      	mov	r3, r7
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	4659      	mov	r1, fp
 800b1f4:	f7f4 ffec 	bl	80001d0 <__aeabi_dsub>
 800b1f8:	e00e      	b.n	800b218 <__ieee754_rem_pio2+0x1c0>
 800b1fa:	463b      	mov	r3, r7
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	4650      	mov	r0, sl
 800b200:	4659      	mov	r1, fp
 800b202:	f7f4 ffe5 	bl	80001d0 <__aeabi_dsub>
 800b206:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b20a:	9305      	str	r3, [sp, #20]
 800b20c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b210:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b214:	2b10      	cmp	r3, #16
 800b216:	dc02      	bgt.n	800b21e <__ieee754_rem_pio2+0x1c6>
 800b218:	e9c4 0100 	strd	r0, r1, [r4]
 800b21c:	e039      	b.n	800b292 <__ieee754_rem_pio2+0x23a>
 800b21e:	a34c      	add	r3, pc, #304	@ (adr r3, 800b350 <__ieee754_rem_pio2+0x2f8>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b228:	f7f5 f98a 	bl	8000540 <__aeabi_dmul>
 800b22c:	4606      	mov	r6, r0
 800b22e:	460f      	mov	r7, r1
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4650      	mov	r0, sl
 800b236:	4659      	mov	r1, fp
 800b238:	f7f4 ffca 	bl	80001d0 <__aeabi_dsub>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4680      	mov	r8, r0
 800b242:	4689      	mov	r9, r1
 800b244:	4650      	mov	r0, sl
 800b246:	4659      	mov	r1, fp
 800b248:	f7f4 ffc2 	bl	80001d0 <__aeabi_dsub>
 800b24c:	4632      	mov	r2, r6
 800b24e:	463b      	mov	r3, r7
 800b250:	f7f4 ffbe 	bl	80001d0 <__aeabi_dsub>
 800b254:	a340      	add	r3, pc, #256	@ (adr r3, 800b358 <__ieee754_rem_pio2+0x300>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b262:	f7f5 f96d 	bl	8000540 <__aeabi_dmul>
 800b266:	4632      	mov	r2, r6
 800b268:	463b      	mov	r3, r7
 800b26a:	f7f4 ffb1 	bl	80001d0 <__aeabi_dsub>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	4640      	mov	r0, r8
 800b278:	4649      	mov	r1, r9
 800b27a:	f7f4 ffa9 	bl	80001d0 <__aeabi_dsub>
 800b27e:	9a05      	ldr	r2, [sp, #20]
 800b280:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b31      	cmp	r3, #49	@ 0x31
 800b288:	dc20      	bgt.n	800b2cc <__ieee754_rem_pio2+0x274>
 800b28a:	e9c4 0100 	strd	r0, r1, [r4]
 800b28e:	46c2      	mov	sl, r8
 800b290:	46cb      	mov	fp, r9
 800b292:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b296:	4650      	mov	r0, sl
 800b298:	4642      	mov	r2, r8
 800b29a:	464b      	mov	r3, r9
 800b29c:	4659      	mov	r1, fp
 800b29e:	f7f4 ff97 	bl	80001d0 <__aeabi_dsub>
 800b2a2:	463b      	mov	r3, r7
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	f7f4 ff93 	bl	80001d0 <__aeabi_dsub>
 800b2aa:	9b04      	ldr	r3, [sp, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2b2:	f6bf af0e 	bge.w	800b0d2 <__ieee754_rem_pio2+0x7a>
 800b2b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b2ba:	6063      	str	r3, [r4, #4]
 800b2bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2c0:	f8c4 8000 	str.w	r8, [r4]
 800b2c4:	60a0      	str	r0, [r4, #8]
 800b2c6:	60e3      	str	r3, [r4, #12]
 800b2c8:	426d      	negs	r5, r5
 800b2ca:	e702      	b.n	800b0d2 <__ieee754_rem_pio2+0x7a>
 800b2cc:	a326      	add	r3, pc, #152	@ (adr r3, 800b368 <__ieee754_rem_pio2+0x310>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2d6:	f7f5 f933 	bl	8000540 <__aeabi_dmul>
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	4602      	mov	r2, r0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	f7f4 ff73 	bl	80001d0 <__aeabi_dsub>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4682      	mov	sl, r0
 800b2f0:	468b      	mov	fp, r1
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	f7f4 ff6b 	bl	80001d0 <__aeabi_dsub>
 800b2fa:	4632      	mov	r2, r6
 800b2fc:	463b      	mov	r3, r7
 800b2fe:	f7f4 ff67 	bl	80001d0 <__aeabi_dsub>
 800b302:	a31b      	add	r3, pc, #108	@ (adr r3, 800b370 <__ieee754_rem_pio2+0x318>)
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	4606      	mov	r6, r0
 800b30a:	460f      	mov	r7, r1
 800b30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b310:	f7f5 f916 	bl	8000540 <__aeabi_dmul>
 800b314:	4632      	mov	r2, r6
 800b316:	463b      	mov	r3, r7
 800b318:	f7f4 ff5a 	bl	80001d0 <__aeabi_dsub>
 800b31c:	4606      	mov	r6, r0
 800b31e:	460f      	mov	r7, r1
 800b320:	e764      	b.n	800b1ec <__ieee754_rem_pio2+0x194>
 800b322:	4b1b      	ldr	r3, [pc, #108]	@ (800b390 <__ieee754_rem_pio2+0x338>)
 800b324:	4598      	cmp	r8, r3
 800b326:	d935      	bls.n	800b394 <__ieee754_rem_pio2+0x33c>
 800b328:	4632      	mov	r2, r6
 800b32a:	463b      	mov	r3, r7
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f4 ff4e 	bl	80001d0 <__aeabi_dsub>
 800b334:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b338:	e9c4 0100 	strd	r0, r1, [r4]
 800b33c:	e69e      	b.n	800b07c <__ieee754_rem_pio2+0x24>
 800b33e:	bf00      	nop
 800b340:	54400000 	.word	0x54400000
 800b344:	3ff921fb 	.word	0x3ff921fb
 800b348:	1a626331 	.word	0x1a626331
 800b34c:	3dd0b461 	.word	0x3dd0b461
 800b350:	1a600000 	.word	0x1a600000
 800b354:	3dd0b461 	.word	0x3dd0b461
 800b358:	2e037073 	.word	0x2e037073
 800b35c:	3ba3198a 	.word	0x3ba3198a
 800b360:	6dc9c883 	.word	0x6dc9c883
 800b364:	3fe45f30 	.word	0x3fe45f30
 800b368:	2e000000 	.word	0x2e000000
 800b36c:	3ba3198a 	.word	0x3ba3198a
 800b370:	252049c1 	.word	0x252049c1
 800b374:	397b839a 	.word	0x397b839a
 800b378:	3fe921fb 	.word	0x3fe921fb
 800b37c:	4002d97b 	.word	0x4002d97b
 800b380:	3ff921fb 	.word	0x3ff921fb
 800b384:	413921fb 	.word	0x413921fb
 800b388:	3fe00000 	.word	0x3fe00000
 800b38c:	0800bd2c 	.word	0x0800bd2c
 800b390:	7fefffff 	.word	0x7fefffff
 800b394:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b398:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b39c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	f7f5 fb66 	bl	8000a74 <__aeabi_d2iz>
 800b3a8:	f7f5 f860 	bl	800046c <__aeabi_i2d>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	4639      	mov	r1, r7
 800b3b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b3b8:	f7f4 ff0a 	bl	80001d0 <__aeabi_dsub>
 800b3bc:	4b22      	ldr	r3, [pc, #136]	@ (800b448 <__ieee754_rem_pio2+0x3f0>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f7f5 f8be 	bl	8000540 <__aeabi_dmul>
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	f7f5 fb54 	bl	8000a74 <__aeabi_d2iz>
 800b3cc:	f7f5 f84e 	bl	800046c <__aeabi_i2d>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	4639      	mov	r1, r7
 800b3d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3dc:	f7f4 fef8 	bl	80001d0 <__aeabi_dsub>
 800b3e0:	4b19      	ldr	r3, [pc, #100]	@ (800b448 <__ieee754_rem_pio2+0x3f0>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f7f5 f8ac 	bl	8000540 <__aeabi_dmul>
 800b3e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b3ec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b3f0:	f04f 0803 	mov.w	r8, #3
 800b3f4:	2600      	movs	r6, #0
 800b3f6:	2700      	movs	r7, #0
 800b3f8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	463b      	mov	r3, r7
 800b400:	46c2      	mov	sl, r8
 800b402:	f108 38ff 	add.w	r8, r8, #4294967295
 800b406:	f7f5 fb03 	bl	8000a10 <__aeabi_dcmpeq>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d1f4      	bne.n	800b3f8 <__ieee754_rem_pio2+0x3a0>
 800b40e:	4b0f      	ldr	r3, [pc, #60]	@ (800b44c <__ieee754_rem_pio2+0x3f4>)
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	2302      	movs	r3, #2
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	462a      	mov	r2, r5
 800b418:	4653      	mov	r3, sl
 800b41a:	4621      	mov	r1, r4
 800b41c:	a806      	add	r0, sp, #24
 800b41e:	f000 f81f 	bl	800b460 <__kernel_rem_pio2>
 800b422:	9b04      	ldr	r3, [sp, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	4605      	mov	r5, r0
 800b428:	f6bf ae53 	bge.w	800b0d2 <__ieee754_rem_pio2+0x7a>
 800b42c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b434:	e9c4 2300 	strd	r2, r3, [r4]
 800b438:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b43c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b440:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b444:	e740      	b.n	800b2c8 <__ieee754_rem_pio2+0x270>
 800b446:	bf00      	nop
 800b448:	41700000 	.word	0x41700000
 800b44c:	0800bdac 	.word	0x0800bdac

0800b450 <fabs>:
 800b450:	ec51 0b10 	vmov	r0, r1, d0
 800b454:	4602      	mov	r2, r0
 800b456:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b45a:	ec43 2b10 	vmov	d0, r2, r3
 800b45e:	4770      	bx	lr

0800b460 <__kernel_rem_pio2>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	ed2d 8b02 	vpush	{d8}
 800b468:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b46c:	f112 0f14 	cmn.w	r2, #20
 800b470:	9306      	str	r3, [sp, #24]
 800b472:	9104      	str	r1, [sp, #16]
 800b474:	4bc2      	ldr	r3, [pc, #776]	@ (800b780 <__kernel_rem_pio2+0x320>)
 800b476:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b478:	9008      	str	r0, [sp, #32]
 800b47a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	9b06      	ldr	r3, [sp, #24]
 800b482:	f103 33ff 	add.w	r3, r3, #4294967295
 800b486:	bfa8      	it	ge
 800b488:	1ed4      	subge	r4, r2, #3
 800b48a:	9305      	str	r3, [sp, #20]
 800b48c:	bfb2      	itee	lt
 800b48e:	2400      	movlt	r4, #0
 800b490:	2318      	movge	r3, #24
 800b492:	fb94 f4f3 	sdivge	r4, r4, r3
 800b496:	f06f 0317 	mvn.w	r3, #23
 800b49a:	fb04 3303 	mla	r3, r4, r3, r3
 800b49e:	eb03 0b02 	add.w	fp, r3, r2
 800b4a2:	9b00      	ldr	r3, [sp, #0]
 800b4a4:	9a05      	ldr	r2, [sp, #20]
 800b4a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800b770 <__kernel_rem_pio2+0x310>
 800b4aa:	eb03 0802 	add.w	r8, r3, r2
 800b4ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b4b0:	1aa7      	subs	r7, r4, r2
 800b4b2:	ae20      	add	r6, sp, #128	@ 0x80
 800b4b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b4b8:	2500      	movs	r5, #0
 800b4ba:	4545      	cmp	r5, r8
 800b4bc:	dd12      	ble.n	800b4e4 <__kernel_rem_pio2+0x84>
 800b4be:	9b06      	ldr	r3, [sp, #24]
 800b4c0:	aa20      	add	r2, sp, #128	@ 0x80
 800b4c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b4c6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b4ca:	2700      	movs	r7, #0
 800b4cc:	9b00      	ldr	r3, [sp, #0]
 800b4ce:	429f      	cmp	r7, r3
 800b4d0:	dc2e      	bgt.n	800b530 <__kernel_rem_pio2+0xd0>
 800b4d2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800b770 <__kernel_rem_pio2+0x310>
 800b4d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4da:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4de:	46a8      	mov	r8, r5
 800b4e0:	2600      	movs	r6, #0
 800b4e2:	e01b      	b.n	800b51c <__kernel_rem_pio2+0xbc>
 800b4e4:	42ef      	cmn	r7, r5
 800b4e6:	d407      	bmi.n	800b4f8 <__kernel_rem_pio2+0x98>
 800b4e8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b4ec:	f7f4 ffbe 	bl	800046c <__aeabi_i2d>
 800b4f0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b4f4:	3501      	adds	r5, #1
 800b4f6:	e7e0      	b.n	800b4ba <__kernel_rem_pio2+0x5a>
 800b4f8:	ec51 0b18 	vmov	r0, r1, d8
 800b4fc:	e7f8      	b.n	800b4f0 <__kernel_rem_pio2+0x90>
 800b4fe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800b502:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b506:	f7f5 f81b 	bl	8000540 <__aeabi_dmul>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b512:	f7f4 fe5f 	bl	80001d4 <__adddf3>
 800b516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b51a:	3601      	adds	r6, #1
 800b51c:	9b05      	ldr	r3, [sp, #20]
 800b51e:	429e      	cmp	r6, r3
 800b520:	dded      	ble.n	800b4fe <__kernel_rem_pio2+0x9e>
 800b522:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b526:	3701      	adds	r7, #1
 800b528:	ecaa 7b02 	vstmia	sl!, {d7}
 800b52c:	3508      	adds	r5, #8
 800b52e:	e7cd      	b.n	800b4cc <__kernel_rem_pio2+0x6c>
 800b530:	9b00      	ldr	r3, [sp, #0]
 800b532:	f8dd 8000 	ldr.w	r8, [sp]
 800b536:	aa0c      	add	r2, sp, #48	@ 0x30
 800b538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b53c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b53e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b540:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b544:	9309      	str	r3, [sp, #36]	@ 0x24
 800b546:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b54a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b54c:	ab98      	add	r3, sp, #608	@ 0x260
 800b54e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b552:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b556:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b55a:	ac0c      	add	r4, sp, #48	@ 0x30
 800b55c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b55e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b562:	46a1      	mov	r9, r4
 800b564:	46c2      	mov	sl, r8
 800b566:	f1ba 0f00 	cmp.w	sl, #0
 800b56a:	dc77      	bgt.n	800b65c <__kernel_rem_pio2+0x1fc>
 800b56c:	4658      	mov	r0, fp
 800b56e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b572:	f000 fac5 	bl	800bb00 <scalbn>
 800b576:	ec57 6b10 	vmov	r6, r7, d0
 800b57a:	2200      	movs	r2, #0
 800b57c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f4 ffdc 	bl	8000540 <__aeabi_dmul>
 800b588:	ec41 0b10 	vmov	d0, r0, r1
 800b58c:	f000 fb34 	bl	800bbf8 <floor>
 800b590:	4b7c      	ldr	r3, [pc, #496]	@ (800b784 <__kernel_rem_pio2+0x324>)
 800b592:	ec51 0b10 	vmov	r0, r1, d0
 800b596:	2200      	movs	r2, #0
 800b598:	f7f4 ffd2 	bl	8000540 <__aeabi_dmul>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f4 fe14 	bl	80001d0 <__aeabi_dsub>
 800b5a8:	460f      	mov	r7, r1
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	f7f5 fa62 	bl	8000a74 <__aeabi_d2iz>
 800b5b0:	9002      	str	r0, [sp, #8]
 800b5b2:	f7f4 ff5b 	bl	800046c <__aeabi_i2d>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	4639      	mov	r1, r7
 800b5be:	f7f4 fe07 	bl	80001d0 <__aeabi_dsub>
 800b5c2:	f1bb 0f00 	cmp.w	fp, #0
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	460f      	mov	r7, r1
 800b5ca:	dd6c      	ble.n	800b6a6 <__kernel_rem_pio2+0x246>
 800b5cc:	f108 31ff 	add.w	r1, r8, #4294967295
 800b5d0:	ab0c      	add	r3, sp, #48	@ 0x30
 800b5d2:	9d02      	ldr	r5, [sp, #8]
 800b5d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5d8:	f1cb 0018 	rsb	r0, fp, #24
 800b5dc:	fa43 f200 	asr.w	r2, r3, r0
 800b5e0:	4415      	add	r5, r2
 800b5e2:	4082      	lsls	r2, r0
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	aa0c      	add	r2, sp, #48	@ 0x30
 800b5e8:	9502      	str	r5, [sp, #8]
 800b5ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b5ee:	f1cb 0217 	rsb	r2, fp, #23
 800b5f2:	fa43 f902 	asr.w	r9, r3, r2
 800b5f6:	f1b9 0f00 	cmp.w	r9, #0
 800b5fa:	dd64      	ble.n	800b6c6 <__kernel_rem_pio2+0x266>
 800b5fc:	9b02      	ldr	r3, [sp, #8]
 800b5fe:	2200      	movs	r2, #0
 800b600:	3301      	adds	r3, #1
 800b602:	9302      	str	r3, [sp, #8]
 800b604:	4615      	mov	r5, r2
 800b606:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b60a:	4590      	cmp	r8, r2
 800b60c:	f300 80a1 	bgt.w	800b752 <__kernel_rem_pio2+0x2f2>
 800b610:	f1bb 0f00 	cmp.w	fp, #0
 800b614:	dd07      	ble.n	800b626 <__kernel_rem_pio2+0x1c6>
 800b616:	f1bb 0f01 	cmp.w	fp, #1
 800b61a:	f000 80c1 	beq.w	800b7a0 <__kernel_rem_pio2+0x340>
 800b61e:	f1bb 0f02 	cmp.w	fp, #2
 800b622:	f000 80c8 	beq.w	800b7b6 <__kernel_rem_pio2+0x356>
 800b626:	f1b9 0f02 	cmp.w	r9, #2
 800b62a:	d14c      	bne.n	800b6c6 <__kernel_rem_pio2+0x266>
 800b62c:	4632      	mov	r2, r6
 800b62e:	463b      	mov	r3, r7
 800b630:	4955      	ldr	r1, [pc, #340]	@ (800b788 <__kernel_rem_pio2+0x328>)
 800b632:	2000      	movs	r0, #0
 800b634:	f7f4 fdcc 	bl	80001d0 <__aeabi_dsub>
 800b638:	4606      	mov	r6, r0
 800b63a:	460f      	mov	r7, r1
 800b63c:	2d00      	cmp	r5, #0
 800b63e:	d042      	beq.n	800b6c6 <__kernel_rem_pio2+0x266>
 800b640:	4658      	mov	r0, fp
 800b642:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800b778 <__kernel_rem_pio2+0x318>
 800b646:	f000 fa5b 	bl	800bb00 <scalbn>
 800b64a:	4630      	mov	r0, r6
 800b64c:	4639      	mov	r1, r7
 800b64e:	ec53 2b10 	vmov	r2, r3, d0
 800b652:	f7f4 fdbd 	bl	80001d0 <__aeabi_dsub>
 800b656:	4606      	mov	r6, r0
 800b658:	460f      	mov	r7, r1
 800b65a:	e034      	b.n	800b6c6 <__kernel_rem_pio2+0x266>
 800b65c:	4b4b      	ldr	r3, [pc, #300]	@ (800b78c <__kernel_rem_pio2+0x32c>)
 800b65e:	2200      	movs	r2, #0
 800b660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b664:	f7f4 ff6c 	bl	8000540 <__aeabi_dmul>
 800b668:	f7f5 fa04 	bl	8000a74 <__aeabi_d2iz>
 800b66c:	f7f4 fefe 	bl	800046c <__aeabi_i2d>
 800b670:	4b47      	ldr	r3, [pc, #284]	@ (800b790 <__kernel_rem_pio2+0x330>)
 800b672:	2200      	movs	r2, #0
 800b674:	4606      	mov	r6, r0
 800b676:	460f      	mov	r7, r1
 800b678:	f7f4 ff62 	bl	8000540 <__aeabi_dmul>
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b684:	f7f4 fda4 	bl	80001d0 <__aeabi_dsub>
 800b688:	f7f5 f9f4 	bl	8000a74 <__aeabi_d2iz>
 800b68c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b690:	f849 0b04 	str.w	r0, [r9], #4
 800b694:	4639      	mov	r1, r7
 800b696:	4630      	mov	r0, r6
 800b698:	f7f4 fd9c 	bl	80001d4 <__adddf3>
 800b69c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6a4:	e75f      	b.n	800b566 <__kernel_rem_pio2+0x106>
 800b6a6:	d107      	bne.n	800b6b8 <__kernel_rem_pio2+0x258>
 800b6a8:	f108 33ff 	add.w	r3, r8, #4294967295
 800b6ac:	aa0c      	add	r2, sp, #48	@ 0x30
 800b6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6b2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b6b6:	e79e      	b.n	800b5f6 <__kernel_rem_pio2+0x196>
 800b6b8:	4b36      	ldr	r3, [pc, #216]	@ (800b794 <__kernel_rem_pio2+0x334>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f5 f9c6 	bl	8000a4c <__aeabi_dcmpge>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d143      	bne.n	800b74c <__kernel_rem_pio2+0x2ec>
 800b6c4:	4681      	mov	r9, r0
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	4639      	mov	r1, r7
 800b6ce:	f7f5 f99f 	bl	8000a10 <__aeabi_dcmpeq>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	f000 80c1 	beq.w	800b85a <__kernel_rem_pio2+0x3fa>
 800b6d8:	f108 33ff 	add.w	r3, r8, #4294967295
 800b6dc:	2200      	movs	r2, #0
 800b6de:	9900      	ldr	r1, [sp, #0]
 800b6e0:	428b      	cmp	r3, r1
 800b6e2:	da70      	bge.n	800b7c6 <__kernel_rem_pio2+0x366>
 800b6e4:	2a00      	cmp	r2, #0
 800b6e6:	f000 808b 	beq.w	800b800 <__kernel_rem_pio2+0x3a0>
 800b6ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6ee:	ab0c      	add	r3, sp, #48	@ 0x30
 800b6f0:	f1ab 0b18 	sub.w	fp, fp, #24
 800b6f4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0f6      	beq.n	800b6ea <__kernel_rem_pio2+0x28a>
 800b6fc:	4658      	mov	r0, fp
 800b6fe:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800b778 <__kernel_rem_pio2+0x318>
 800b702:	f000 f9fd 	bl	800bb00 <scalbn>
 800b706:	f108 0301 	add.w	r3, r8, #1
 800b70a:	00da      	lsls	r2, r3, #3
 800b70c:	9205      	str	r2, [sp, #20]
 800b70e:	ec55 4b10 	vmov	r4, r5, d0
 800b712:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b714:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800b78c <__kernel_rem_pio2+0x32c>
 800b718:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b71c:	4646      	mov	r6, r8
 800b71e:	f04f 0a00 	mov.w	sl, #0
 800b722:	2e00      	cmp	r6, #0
 800b724:	f280 80d1 	bge.w	800b8ca <__kernel_rem_pio2+0x46a>
 800b728:	4644      	mov	r4, r8
 800b72a:	2c00      	cmp	r4, #0
 800b72c:	f2c0 80ff 	blt.w	800b92e <__kernel_rem_pio2+0x4ce>
 800b730:	4b19      	ldr	r3, [pc, #100]	@ (800b798 <__kernel_rem_pio2+0x338>)
 800b732:	461f      	mov	r7, r3
 800b734:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b736:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b73a:	9306      	str	r3, [sp, #24]
 800b73c:	f04f 0a00 	mov.w	sl, #0
 800b740:	f04f 0b00 	mov.w	fp, #0
 800b744:	2600      	movs	r6, #0
 800b746:	eba8 0504 	sub.w	r5, r8, r4
 800b74a:	e0e4      	b.n	800b916 <__kernel_rem_pio2+0x4b6>
 800b74c:	f04f 0902 	mov.w	r9, #2
 800b750:	e754      	b.n	800b5fc <__kernel_rem_pio2+0x19c>
 800b752:	f854 3b04 	ldr.w	r3, [r4], #4
 800b756:	bb0d      	cbnz	r5, 800b79c <__kernel_rem_pio2+0x33c>
 800b758:	b123      	cbz	r3, 800b764 <__kernel_rem_pio2+0x304>
 800b75a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b75e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b762:	2301      	movs	r3, #1
 800b764:	3201      	adds	r2, #1
 800b766:	461d      	mov	r5, r3
 800b768:	e74f      	b.n	800b60a <__kernel_rem_pio2+0x1aa>
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w
	...
 800b77c:	3ff00000 	.word	0x3ff00000
 800b780:	0800bef8 	.word	0x0800bef8
 800b784:	40200000 	.word	0x40200000
 800b788:	3ff00000 	.word	0x3ff00000
 800b78c:	3e700000 	.word	0x3e700000
 800b790:	41700000 	.word	0x41700000
 800b794:	3fe00000 	.word	0x3fe00000
 800b798:	0800beb8 	.word	0x0800beb8
 800b79c:	1acb      	subs	r3, r1, r3
 800b79e:	e7de      	b.n	800b75e <__kernel_rem_pio2+0x2fe>
 800b7a0:	f108 32ff 	add.w	r2, r8, #4294967295
 800b7a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b7ae:	a90c      	add	r1, sp, #48	@ 0x30
 800b7b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b7b4:	e737      	b.n	800b626 <__kernel_rem_pio2+0x1c6>
 800b7b6:	f108 32ff 	add.w	r2, r8, #4294967295
 800b7ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800b7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b7c4:	e7f3      	b.n	800b7ae <__kernel_rem_pio2+0x34e>
 800b7c6:	a90c      	add	r1, sp, #48	@ 0x30
 800b7c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	e785      	b.n	800b6de <__kernel_rem_pio2+0x27e>
 800b7d2:	3401      	adds	r4, #1
 800b7d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b7d8:	2a00      	cmp	r2, #0
 800b7da:	d0fa      	beq.n	800b7d2 <__kernel_rem_pio2+0x372>
 800b7dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b7e2:	eb0d 0503 	add.w	r5, sp, r3
 800b7e6:	9b06      	ldr	r3, [sp, #24]
 800b7e8:	aa20      	add	r2, sp, #128	@ 0x80
 800b7ea:	4443      	add	r3, r8
 800b7ec:	f108 0701 	add.w	r7, r8, #1
 800b7f0:	3d98      	subs	r5, #152	@ 0x98
 800b7f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b7f6:	4444      	add	r4, r8
 800b7f8:	42bc      	cmp	r4, r7
 800b7fa:	da04      	bge.n	800b806 <__kernel_rem_pio2+0x3a6>
 800b7fc:	46a0      	mov	r8, r4
 800b7fe:	e6a2      	b.n	800b546 <__kernel_rem_pio2+0xe6>
 800b800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b802:	2401      	movs	r4, #1
 800b804:	e7e6      	b.n	800b7d4 <__kernel_rem_pio2+0x374>
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b80c:	f7f4 fe2e 	bl	800046c <__aeabi_i2d>
 800b810:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800bad0 <__kernel_rem_pio2+0x670>
 800b814:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b81c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b820:	46b2      	mov	sl, r6
 800b822:	f04f 0800 	mov.w	r8, #0
 800b826:	9b05      	ldr	r3, [sp, #20]
 800b828:	4598      	cmp	r8, r3
 800b82a:	dd05      	ble.n	800b838 <__kernel_rem_pio2+0x3d8>
 800b82c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b830:	3701      	adds	r7, #1
 800b832:	eca5 7b02 	vstmia	r5!, {d7}
 800b836:	e7df      	b.n	800b7f8 <__kernel_rem_pio2+0x398>
 800b838:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b83c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b840:	f7f4 fe7e 	bl	8000540 <__aeabi_dmul>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b84c:	f7f4 fcc2 	bl	80001d4 <__adddf3>
 800b850:	f108 0801 	add.w	r8, r8, #1
 800b854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b858:	e7e5      	b.n	800b826 <__kernel_rem_pio2+0x3c6>
 800b85a:	f1cb 0000 	rsb	r0, fp, #0
 800b85e:	ec47 6b10 	vmov	d0, r6, r7
 800b862:	f000 f94d 	bl	800bb00 <scalbn>
 800b866:	ec55 4b10 	vmov	r4, r5, d0
 800b86a:	4b9b      	ldr	r3, [pc, #620]	@ (800bad8 <__kernel_rem_pio2+0x678>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	4620      	mov	r0, r4
 800b870:	4629      	mov	r1, r5
 800b872:	f7f5 f8eb 	bl	8000a4c <__aeabi_dcmpge>
 800b876:	b300      	cbz	r0, 800b8ba <__kernel_rem_pio2+0x45a>
 800b878:	4b98      	ldr	r3, [pc, #608]	@ (800badc <__kernel_rem_pio2+0x67c>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	4620      	mov	r0, r4
 800b87e:	4629      	mov	r1, r5
 800b880:	f7f4 fe5e 	bl	8000540 <__aeabi_dmul>
 800b884:	f7f5 f8f6 	bl	8000a74 <__aeabi_d2iz>
 800b888:	4606      	mov	r6, r0
 800b88a:	f7f4 fdef 	bl	800046c <__aeabi_i2d>
 800b88e:	4b92      	ldr	r3, [pc, #584]	@ (800bad8 <__kernel_rem_pio2+0x678>)
 800b890:	2200      	movs	r2, #0
 800b892:	f7f4 fe55 	bl	8000540 <__aeabi_dmul>
 800b896:	460b      	mov	r3, r1
 800b898:	4602      	mov	r2, r0
 800b89a:	4629      	mov	r1, r5
 800b89c:	4620      	mov	r0, r4
 800b89e:	f7f4 fc97 	bl	80001d0 <__aeabi_dsub>
 800b8a2:	f7f5 f8e7 	bl	8000a74 <__aeabi_d2iz>
 800b8a6:	ab0c      	add	r3, sp, #48	@ 0x30
 800b8a8:	f10b 0b18 	add.w	fp, fp, #24
 800b8ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b8b0:	f108 0801 	add.w	r8, r8, #1
 800b8b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b8b8:	e720      	b.n	800b6fc <__kernel_rem_pio2+0x29c>
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f5 f8d9 	bl	8000a74 <__aeabi_d2iz>
 800b8c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b8c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b8c8:	e718      	b.n	800b6fc <__kernel_rem_pio2+0x29c>
 800b8ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800b8cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b8d0:	f7f4 fdcc 	bl	800046c <__aeabi_i2d>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	462b      	mov	r3, r5
 800b8d8:	f7f4 fe32 	bl	8000540 <__aeabi_dmul>
 800b8dc:	4652      	mov	r2, sl
 800b8de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b8e2:	465b      	mov	r3, fp
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	f7f4 fe2a 	bl	8000540 <__aeabi_dmul>
 800b8ec:	3e01      	subs	r6, #1
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	e716      	b.n	800b722 <__kernel_rem_pio2+0x2c2>
 800b8f4:	9906      	ldr	r1, [sp, #24]
 800b8f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b8fa:	9106      	str	r1, [sp, #24]
 800b8fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b900:	f7f4 fe1e 	bl	8000540 <__aeabi_dmul>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4650      	mov	r0, sl
 800b90a:	4659      	mov	r1, fp
 800b90c:	f7f4 fc62 	bl	80001d4 <__adddf3>
 800b910:	3601      	adds	r6, #1
 800b912:	4682      	mov	sl, r0
 800b914:	468b      	mov	fp, r1
 800b916:	9b00      	ldr	r3, [sp, #0]
 800b918:	429e      	cmp	r6, r3
 800b91a:	dc01      	bgt.n	800b920 <__kernel_rem_pio2+0x4c0>
 800b91c:	42ae      	cmp	r6, r5
 800b91e:	dde9      	ble.n	800b8f4 <__kernel_rem_pio2+0x494>
 800b920:	ab48      	add	r3, sp, #288	@ 0x120
 800b922:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b926:	e9c5 ab00 	strd	sl, fp, [r5]
 800b92a:	3c01      	subs	r4, #1
 800b92c:	e6fd      	b.n	800b72a <__kernel_rem_pio2+0x2ca>
 800b92e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b930:	2b02      	cmp	r3, #2
 800b932:	dc0b      	bgt.n	800b94c <__kernel_rem_pio2+0x4ec>
 800b934:	2b00      	cmp	r3, #0
 800b936:	dc35      	bgt.n	800b9a4 <__kernel_rem_pio2+0x544>
 800b938:	d059      	beq.n	800b9ee <__kernel_rem_pio2+0x58e>
 800b93a:	9b02      	ldr	r3, [sp, #8]
 800b93c:	f003 0007 	and.w	r0, r3, #7
 800b940:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b944:	ecbd 8b02 	vpop	{d8}
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d1f3      	bne.n	800b93a <__kernel_rem_pio2+0x4da>
 800b952:	9b05      	ldr	r3, [sp, #20]
 800b954:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b958:	eb0d 0403 	add.w	r4, sp, r3
 800b95c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b960:	4625      	mov	r5, r4
 800b962:	46c2      	mov	sl, r8
 800b964:	f1ba 0f00 	cmp.w	sl, #0
 800b968:	dc69      	bgt.n	800ba3e <__kernel_rem_pio2+0x5de>
 800b96a:	4645      	mov	r5, r8
 800b96c:	2d01      	cmp	r5, #1
 800b96e:	f300 8087 	bgt.w	800ba80 <__kernel_rem_pio2+0x620>
 800b972:	9c05      	ldr	r4, [sp, #20]
 800b974:	ab48      	add	r3, sp, #288	@ 0x120
 800b976:	441c      	add	r4, r3
 800b978:	2000      	movs	r0, #0
 800b97a:	2100      	movs	r1, #0
 800b97c:	f1b8 0f01 	cmp.w	r8, #1
 800b980:	f300 809c 	bgt.w	800babc <__kernel_rem_pio2+0x65c>
 800b984:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800b988:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	f040 80a6 	bne.w	800bae0 <__kernel_rem_pio2+0x680>
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	e9c3 5600 	strd	r5, r6, [r3]
 800b99a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b99e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b9a2:	e7ca      	b.n	800b93a <__kernel_rem_pio2+0x4da>
 800b9a4:	9d05      	ldr	r5, [sp, #20]
 800b9a6:	ab48      	add	r3, sp, #288	@ 0x120
 800b9a8:	441d      	add	r5, r3
 800b9aa:	4644      	mov	r4, r8
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	2c00      	cmp	r4, #0
 800b9b2:	da35      	bge.n	800ba20 <__kernel_rem_pio2+0x5c0>
 800b9b4:	f1b9 0f00 	cmp.w	r9, #0
 800b9b8:	d038      	beq.n	800ba2c <__kernel_rem_pio2+0x5cc>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9c0:	9c04      	ldr	r4, [sp, #16]
 800b9c2:	e9c4 2300 	strd	r2, r3, [r4]
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b9ce:	f7f4 fbff 	bl	80001d0 <__aeabi_dsub>
 800b9d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800b9d4:	2401      	movs	r4, #1
 800b9d6:	45a0      	cmp	r8, r4
 800b9d8:	da2b      	bge.n	800ba32 <__kernel_rem_pio2+0x5d2>
 800b9da:	f1b9 0f00 	cmp.w	r9, #0
 800b9de:	d002      	beq.n	800b9e6 <__kernel_rem_pio2+0x586>
 800b9e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	9b04      	ldr	r3, [sp, #16]
 800b9e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b9ec:	e7a5      	b.n	800b93a <__kernel_rem_pio2+0x4da>
 800b9ee:	9c05      	ldr	r4, [sp, #20]
 800b9f0:	ab48      	add	r3, sp, #288	@ 0x120
 800b9f2:	441c      	add	r4, r3
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	f1b8 0f00 	cmp.w	r8, #0
 800b9fc:	da09      	bge.n	800ba12 <__kernel_rem_pio2+0x5b2>
 800b9fe:	f1b9 0f00 	cmp.w	r9, #0
 800ba02:	d002      	beq.n	800ba0a <__kernel_rem_pio2+0x5aa>
 800ba04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba08:	4619      	mov	r1, r3
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	e9c3 0100 	strd	r0, r1, [r3]
 800ba10:	e793      	b.n	800b93a <__kernel_rem_pio2+0x4da>
 800ba12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ba16:	f7f4 fbdd 	bl	80001d4 <__adddf3>
 800ba1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba1e:	e7eb      	b.n	800b9f8 <__kernel_rem_pio2+0x598>
 800ba20:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ba24:	f7f4 fbd6 	bl	80001d4 <__adddf3>
 800ba28:	3c01      	subs	r4, #1
 800ba2a:	e7c1      	b.n	800b9b0 <__kernel_rem_pio2+0x550>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	e7c6      	b.n	800b9c0 <__kernel_rem_pio2+0x560>
 800ba32:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ba36:	f7f4 fbcd 	bl	80001d4 <__adddf3>
 800ba3a:	3401      	adds	r4, #1
 800ba3c:	e7cb      	b.n	800b9d6 <__kernel_rem_pio2+0x576>
 800ba3e:	ed35 7b02 	vldmdb	r5!, {d7}
 800ba42:	ed8d 7b00 	vstr	d7, [sp]
 800ba46:	ed95 7b02 	vldr	d7, [r5, #8]
 800ba4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba4e:	ec53 2b17 	vmov	r2, r3, d7
 800ba52:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba56:	f7f4 fbbd 	bl	80001d4 <__adddf3>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4606      	mov	r6, r0
 800ba60:	460f      	mov	r7, r1
 800ba62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba66:	f7f4 fbb3 	bl	80001d0 <__aeabi_dsub>
 800ba6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba6e:	f7f4 fbb1 	bl	80001d4 <__adddf3>
 800ba72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba76:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ba7a:	e9c5 6700 	strd	r6, r7, [r5]
 800ba7e:	e771      	b.n	800b964 <__kernel_rem_pio2+0x504>
 800ba80:	ed34 7b02 	vldmdb	r4!, {d7}
 800ba84:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800ba88:	ec51 0b17 	vmov	r0, r1, d7
 800ba8c:	4652      	mov	r2, sl
 800ba8e:	465b      	mov	r3, fp
 800ba90:	ed8d 7b00 	vstr	d7, [sp]
 800ba94:	f7f4 fb9e 	bl	80001d4 <__adddf3>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	460f      	mov	r7, r1
 800baa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baa4:	f7f4 fb94 	bl	80001d0 <__aeabi_dsub>
 800baa8:	4652      	mov	r2, sl
 800baaa:	465b      	mov	r3, fp
 800baac:	f7f4 fb92 	bl	80001d4 <__adddf3>
 800bab0:	3d01      	subs	r5, #1
 800bab2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bab6:	e9c4 6700 	strd	r6, r7, [r4]
 800baba:	e757      	b.n	800b96c <__kernel_rem_pio2+0x50c>
 800babc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bac0:	f7f4 fb88 	bl	80001d4 <__adddf3>
 800bac4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bac8:	e758      	b.n	800b97c <__kernel_rem_pio2+0x51c>
 800baca:	bf00      	nop
 800bacc:	f3af 8000 	nop.w
	...
 800bad8:	41700000 	.word	0x41700000
 800badc:	3e700000 	.word	0x3e700000
 800bae0:	9b04      	ldr	r3, [sp, #16]
 800bae2:	9a04      	ldr	r2, [sp, #16]
 800bae4:	601d      	str	r5, [r3, #0]
 800bae6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800baea:	605c      	str	r4, [r3, #4]
 800baec:	609f      	str	r7, [r3, #8]
 800baee:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800baf2:	60d3      	str	r3, [r2, #12]
 800baf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800baf8:	6110      	str	r0, [r2, #16]
 800bafa:	6153      	str	r3, [r2, #20]
 800bafc:	e71d      	b.n	800b93a <__kernel_rem_pio2+0x4da>
 800bafe:	bf00      	nop

0800bb00 <scalbn>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	ec55 4b10 	vmov	r4, r5, d0
 800bb06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	462b      	mov	r3, r5
 800bb0e:	b991      	cbnz	r1, 800bb36 <scalbn+0x36>
 800bb10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bb14:	4323      	orrs	r3, r4
 800bb16:	d03b      	beq.n	800bb90 <scalbn+0x90>
 800bb18:	4b33      	ldr	r3, [pc, #204]	@ (800bbe8 <scalbn+0xe8>)
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f7f4 fd0e 	bl	8000540 <__aeabi_dmul>
 800bb24:	4b31      	ldr	r3, [pc, #196]	@ (800bbec <scalbn+0xec>)
 800bb26:	429e      	cmp	r6, r3
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	da0f      	bge.n	800bb4e <scalbn+0x4e>
 800bb2e:	a326      	add	r3, pc, #152	@ (adr r3, 800bbc8 <scalbn+0xc8>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	e01e      	b.n	800bb74 <scalbn+0x74>
 800bb36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bb3a:	4291      	cmp	r1, r2
 800bb3c:	d10b      	bne.n	800bb56 <scalbn+0x56>
 800bb3e:	4622      	mov	r2, r4
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 fb46 	bl	80001d4 <__adddf3>
 800bb48:	4604      	mov	r4, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	e020      	b.n	800bb90 <scalbn+0x90>
 800bb4e:	460b      	mov	r3, r1
 800bb50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bb54:	3936      	subs	r1, #54	@ 0x36
 800bb56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bb5a:	4296      	cmp	r6, r2
 800bb5c:	dd0d      	ble.n	800bb7a <scalbn+0x7a>
 800bb5e:	2d00      	cmp	r5, #0
 800bb60:	a11b      	add	r1, pc, #108	@ (adr r1, 800bbd0 <scalbn+0xd0>)
 800bb62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb66:	da02      	bge.n	800bb6e <scalbn+0x6e>
 800bb68:	a11b      	add	r1, pc, #108	@ (adr r1, 800bbd8 <scalbn+0xd8>)
 800bb6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb6e:	a318      	add	r3, pc, #96	@ (adr r3, 800bbd0 <scalbn+0xd0>)
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f7f4 fce4 	bl	8000540 <__aeabi_dmul>
 800bb78:	e7e6      	b.n	800bb48 <scalbn+0x48>
 800bb7a:	1872      	adds	r2, r6, r1
 800bb7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bb80:	428a      	cmp	r2, r1
 800bb82:	dcec      	bgt.n	800bb5e <scalbn+0x5e>
 800bb84:	2a00      	cmp	r2, #0
 800bb86:	dd06      	ble.n	800bb96 <scalbn+0x96>
 800bb88:	f36f 531e 	bfc	r3, #20, #11
 800bb8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb90:	ec45 4b10 	vmov	d0, r4, r5
 800bb94:	bd70      	pop	{r4, r5, r6, pc}
 800bb96:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bb9a:	da08      	bge.n	800bbae <scalbn+0xae>
 800bb9c:	2d00      	cmp	r5, #0
 800bb9e:	a10a      	add	r1, pc, #40	@ (adr r1, 800bbc8 <scalbn+0xc8>)
 800bba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bba4:	dac3      	bge.n	800bb2e <scalbn+0x2e>
 800bba6:	a10e      	add	r1, pc, #56	@ (adr r1, 800bbe0 <scalbn+0xe0>)
 800bba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbac:	e7bf      	b.n	800bb2e <scalbn+0x2e>
 800bbae:	3236      	adds	r2, #54	@ 0x36
 800bbb0:	f36f 531e 	bfc	r3, #20, #11
 800bbb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bbb8:	4620      	mov	r0, r4
 800bbba:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf0 <scalbn+0xf0>)
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	e7d8      	b.n	800bb74 <scalbn+0x74>
 800bbc2:	bf00      	nop
 800bbc4:	f3af 8000 	nop.w
 800bbc8:	c2f8f359 	.word	0xc2f8f359
 800bbcc:	01a56e1f 	.word	0x01a56e1f
 800bbd0:	8800759c 	.word	0x8800759c
 800bbd4:	7e37e43c 	.word	0x7e37e43c
 800bbd8:	8800759c 	.word	0x8800759c
 800bbdc:	fe37e43c 	.word	0xfe37e43c
 800bbe0:	c2f8f359 	.word	0xc2f8f359
 800bbe4:	81a56e1f 	.word	0x81a56e1f
 800bbe8:	43500000 	.word	0x43500000
 800bbec:	ffff3cb0 	.word	0xffff3cb0
 800bbf0:	3c900000 	.word	0x3c900000
 800bbf4:	00000000 	.word	0x00000000

0800bbf8 <floor>:
 800bbf8:	ec51 0b10 	vmov	r0, r1, d0
 800bbfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800bc08:	2e13      	cmp	r6, #19
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	4680      	mov	r8, r0
 800bc10:	dc34      	bgt.n	800bc7c <floor+0x84>
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	da17      	bge.n	800bc46 <floor+0x4e>
 800bc16:	a332      	add	r3, pc, #200	@ (adr r3, 800bce0 <floor+0xe8>)
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	f7f4 fada 	bl	80001d4 <__adddf3>
 800bc20:	2200      	movs	r2, #0
 800bc22:	2300      	movs	r3, #0
 800bc24:	f7f4 ff1c 	bl	8000a60 <__aeabi_dcmpgt>
 800bc28:	b150      	cbz	r0, 800bc40 <floor+0x48>
 800bc2a:	2c00      	cmp	r4, #0
 800bc2c:	da55      	bge.n	800bcda <floor+0xe2>
 800bc2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800bc32:	432c      	orrs	r4, r5
 800bc34:	2500      	movs	r5, #0
 800bc36:	42ac      	cmp	r4, r5
 800bc38:	4c2b      	ldr	r4, [pc, #172]	@ (800bce8 <floor+0xf0>)
 800bc3a:	bf08      	it	eq
 800bc3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bc40:	4621      	mov	r1, r4
 800bc42:	4628      	mov	r0, r5
 800bc44:	e023      	b.n	800bc8e <floor+0x96>
 800bc46:	4f29      	ldr	r7, [pc, #164]	@ (800bcec <floor+0xf4>)
 800bc48:	4137      	asrs	r7, r6
 800bc4a:	ea01 0307 	and.w	r3, r1, r7
 800bc4e:	4303      	orrs	r3, r0
 800bc50:	d01d      	beq.n	800bc8e <floor+0x96>
 800bc52:	a323      	add	r3, pc, #140	@ (adr r3, 800bce0 <floor+0xe8>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 fabc 	bl	80001d4 <__adddf3>
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f7f4 fefe 	bl	8000a60 <__aeabi_dcmpgt>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d0eb      	beq.n	800bc40 <floor+0x48>
 800bc68:	2c00      	cmp	r4, #0
 800bc6a:	bfbe      	ittt	lt
 800bc6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800bc70:	4133      	asrlt	r3, r6
 800bc72:	18e4      	addlt	r4, r4, r3
 800bc74:	ea24 0407 	bic.w	r4, r4, r7
 800bc78:	2500      	movs	r5, #0
 800bc7a:	e7e1      	b.n	800bc40 <floor+0x48>
 800bc7c:	2e33      	cmp	r6, #51	@ 0x33
 800bc7e:	dd0a      	ble.n	800bc96 <floor+0x9e>
 800bc80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bc84:	d103      	bne.n	800bc8e <floor+0x96>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	f7f4 faa3 	bl	80001d4 <__adddf3>
 800bc8e:	ec41 0b10 	vmov	d0, r0, r1
 800bc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800bc9a:	f04f 37ff 	mov.w	r7, #4294967295
 800bc9e:	40df      	lsrs	r7, r3
 800bca0:	4207      	tst	r7, r0
 800bca2:	d0f4      	beq.n	800bc8e <floor+0x96>
 800bca4:	a30e      	add	r3, pc, #56	@ (adr r3, 800bce0 <floor+0xe8>)
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	f7f4 fa93 	bl	80001d4 <__adddf3>
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	f7f4 fed5 	bl	8000a60 <__aeabi_dcmpgt>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d0c2      	beq.n	800bc40 <floor+0x48>
 800bcba:	2c00      	cmp	r4, #0
 800bcbc:	da0a      	bge.n	800bcd4 <floor+0xdc>
 800bcbe:	2e14      	cmp	r6, #20
 800bcc0:	d101      	bne.n	800bcc6 <floor+0xce>
 800bcc2:	3401      	adds	r4, #1
 800bcc4:	e006      	b.n	800bcd4 <floor+0xdc>
 800bcc6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bcca:	2301      	movs	r3, #1
 800bccc:	40b3      	lsls	r3, r6
 800bcce:	441d      	add	r5, r3
 800bcd0:	4545      	cmp	r5, r8
 800bcd2:	d3f6      	bcc.n	800bcc2 <floor+0xca>
 800bcd4:	ea25 0507 	bic.w	r5, r5, r7
 800bcd8:	e7b2      	b.n	800bc40 <floor+0x48>
 800bcda:	2500      	movs	r5, #0
 800bcdc:	462c      	mov	r4, r5
 800bcde:	e7af      	b.n	800bc40 <floor+0x48>
 800bce0:	8800759c 	.word	0x8800759c
 800bce4:	7e37e43c 	.word	0x7e37e43c
 800bce8:	bff00000 	.word	0xbff00000
 800bcec:	000fffff 	.word	0x000fffff

0800bcf0 <_init>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	bf00      	nop
 800bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf6:	bc08      	pop	{r3}
 800bcf8:	469e      	mov	lr, r3
 800bcfa:	4770      	bx	lr

0800bcfc <_fini>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr
